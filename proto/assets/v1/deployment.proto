syntax = "proto3";

package cqc.assets.v1;

option go_package = "github.com/Combine-Capital/cqc/gen/go/cqc/assets/v1;assetsv1";

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

// AssetDeployment represents a specific on-chain deployment of an asset.
// One canonical asset (e.g., USDC) can have multiple deployments across different chains.
message AssetDeployment {
  // Unique deployment identifier in format "{chain}:{address}".
  // Example: "ETHEREUM:0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48" for USDC on Ethereum.
  // Example: "SOLANA:EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v" for USDC on Solana.
  // For native tokens, use "native" as address (e.g., "ETHEREUM:native" for ETH).
  optional string deployment_id = 1;

  // Asset UUID this deployment belongs to.
  optional string asset_id = 2;

  // Chain identifier where this asset is deployed (e.g., "ETHEREUM", "POLYGON", "ARBITRUM", "SOLANA", "BITCOIN").
  optional string chain_id = 3;

  // Human-readable chain name (e.g., "Ethereum", "Polygon", "Arbitrum", "Solana", "Bitcoin").
  optional string chain_name = 4;

  // Smart contract address or "native" for native blockchain tokens.
  // Example: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48" for USDC on Ethereum.
  // Example: "native" for ETH on Ethereum.
  optional string address = 5;

  // Number of decimal places this deployment uses.
  // Must be between 0 and 18 (matches SQL CHECK constraint).
  optional int32 decimals = 6;

  // Timestamp of when this deployment occurred.
  optional google.protobuf.Timestamp deployed_at = 7;

  // Timestamp when this deployment record was created.
  optional google.protobuf.Timestamp created_at = 8;

  // Timestamp when this deployment record was last updated.
  optional google.protobuf.Timestamp updated_at = 9;

  // Additional deployment-specific metadata.
  optional google.protobuf.Struct metadata = 10;
}

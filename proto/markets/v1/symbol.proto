syntax = "proto3";

package cqc.markets.v1;

option go_package = "github.com/Combine-Capital/cqc/gen/go/cqc/markets/v1;marketsv1";

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

// SymbolType represents the type of trading symbol/market.
enum SymbolType {
  SYMBOL_TYPE_UNSPECIFIED = 0;
  SYMBOL_TYPE_SPOT = 1;        // Spot market (immediate settlement)
  SYMBOL_TYPE_PERPETUAL = 2;   // Perpetual futures (no expiry)
  SYMBOL_TYPE_FUTURE = 3;      // Dated futures contract
  SYMBOL_TYPE_OPTION = 4;      // Options contract
  SYMBOL_TYPE_MARGIN = 5;      // Margin trading market
}

// OptionType represents whether an option is a call or put.
enum OptionType {
  OPTION_TYPE_UNSPECIFIED = 0;
  OPTION_TYPE_CALL = 1;   // Right to buy the underlying asset
  OPTION_TYPE_PUT = 2;    // Right to sell the underlying asset
}

// Symbol represents a trading pair or market (e.g., BTC/USDT spot, ETH-PERP, BTC option).
// A Symbol combines a base asset, quote asset, and market type to define a tradeable instrument.
message Symbol {
  // Unique symbol identifier (UUID).
  // Example: "btc-usdt-spot", "eth-usd-perp", "btc-25oct24-30000-call"
  optional string symbol_id = 1;

  // Human-readable symbol representation (e.g., "BTC/USDT", "ETH-PERP", "BTC-25OCT24-30000-C").
  optional string symbol = 2;

  // Type of symbol/market.
  optional SymbolType symbol_type = 3;

  // Base asset identifier (UUID) - the asset being traded.
  // For BTC/USDT, this is BTC. For ETH-PERP, this is ETH.
  optional string base_asset_id = 4;

  // Quote asset identifier (UUID) - the asset used for pricing.
  // For BTC/USDT, this is USDT. For BTC/USD, this is USD.
  optional string quote_asset_id = 5;

  // Settlement asset identifier (UUID) - asset used for contract settlement.
  // For perpetuals/futures, may differ from quote asset.
  // NULL for spot markets (settlement is in base/quote assets directly).
  optional string settlement_asset_id = 6;

  // Minimum price increment (tick size).
  // Example: 0.01 means price can move in increments of 0.01
  optional double tick_size = 7;

  // Minimum order size increment (lot size) in base asset units.
  // Example: 0.001 means you can trade in increments of 0.001 BTC
  optional double lot_size = 8;

  // Minimum order value in quote currency.
  // Example: 10.0 means minimum order must be worth at least 10 USDT
  optional double min_order_size = 9;

  // Maximum order value in quote currency.
  // NULL if no maximum limit.
  optional double max_order_size = 10;

  // Minimum notional value (price * quantity) in quote currency.
  // Example: 10.0 USDT minimum notional for an order
  optional double min_notional = 11;

  // Contract multiplier for futures/options.
  // Example: 1 contract = 1 BTC, multiplier = 1.0
  // NULL for spot markets.
  optional double contract_size = 12;

  // Expiry timestamp for futures/options.
  // NULL for spot markets and perpetuals.
  optional google.protobuf.Timestamp expiry = 13;

  // Strike price for options contracts.
  // NULL for non-option symbols.
  optional double strike_price = 14;

  // Option type (CALL or PUT).
  // Only populated for option symbols.
  optional OptionType option_type = 15;

  // Whether this symbol is currently active and tradeable.
  optional bool is_active = 16;

  // Timestamp when this symbol was created/listed.
  optional google.protobuf.Timestamp created_at = 17;

  // Timestamp when this symbol was last updated.
  optional google.protobuf.Timestamp updated_at = 18;

  // Timestamp when this symbol was deactivated/delisted.
  // NULL if still active.
  optional google.protobuf.Timestamp delisted_at = 19;

  // Additional symbol-specific metadata.
  optional google.protobuf.Struct metadata = 20;
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: proto/markets/v1/price.proto

package marketsv1

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Price represents a point-in-time price observation for an asset.
// Prices can come from various venues (exchanges, AMMs, oracles) and sources.
type Price struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Asset identifier (UUID) for which this price is reported.
	// References the canonical asset from the assets domain.
	AssetId *string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3,oneof" json:"asset_id,omitempty"`
	// Numeric price value in the quote currency.
	// For pairs like BTC-USD, this is the USD price of 1 BTC.
	Value *float64 `protobuf:"fixed64,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Quote currency asset identifier (e.g., USD, USDT, ETH).
	// If null, assumed to be USD.
	QuoteAssetId *string `protobuf:"bytes,3,opt,name=quote_asset_id,json=quoteAssetId,proto3,oneof" json:"quote_asset_id,omitempty"`
	// Timestamp when this price was observed or generated.
	Timestamp *timestamp.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
	// Venue where this price was observed (e.g., "binance", "uniswap-v3-eth").
	// NULL for aggregated/oracle prices.
	VenueId *string `protobuf:"bytes,5,opt,name=venue_id,json=venueId,proto3,oneof" json:"venue_id,omitempty"`
	// Trading pair symbol as represented on the venue (e.g., "BTCUSDT", "BTC-USD").
	// NULL for oracle or aggregated prices.
	VenueSymbol *string `protobuf:"bytes,6,opt,name=venue_symbol,json=venueSymbol,proto3,oneof" json:"venue_symbol,omitempty"`
	// Data source for this price (e.g., "exchange_api", "chainlink_oracle", "internal_calc").
	Source *string `protobuf:"bytes,7,opt,name=source,proto3,oneof" json:"source,omitempty"`
	// Volume traded at this price level (for trade prices).
	// NULL for non-trade price types.
	Volume *float64 `protobuf:"fixed64,8,opt,name=volume,proto3,oneof" json:"volume,omitempty"`
	// Bid price (highest buy order).
	// Only populated for bid-ask spread data.
	Bid *float64 `protobuf:"fixed64,9,opt,name=bid,proto3,oneof" json:"bid,omitempty"`
	// Ask price (lowest sell order).
	// Only populated for bid-ask spread data.
	Ask *float64 `protobuf:"fixed64,10,opt,name=ask,proto3,oneof" json:"ask,omitempty"`
	// Confidence or quality score for this price (0.0 to 1.0).
	// Higher values indicate more reliable prices.
	Confidence *float64 `protobuf:"fixed64,11,opt,name=confidence,proto3,oneof" json:"confidence,omitempty"`
}

func (x *Price) Reset() {
	*x = Price{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_markets_v1_price_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Price) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Price) ProtoMessage() {}

func (x *Price) ProtoReflect() protoreflect.Message {
	mi := &file_proto_markets_v1_price_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Price.ProtoReflect.Descriptor instead.
func (*Price) Descriptor() ([]byte, []int) {
	return file_proto_markets_v1_price_proto_rawDescGZIP(), []int{0}
}

func (x *Price) GetAssetId() string {
	if x != nil && x.AssetId != nil {
		return *x.AssetId
	}
	return ""
}

func (x *Price) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *Price) GetQuoteAssetId() string {
	if x != nil && x.QuoteAssetId != nil {
		return *x.QuoteAssetId
	}
	return ""
}

func (x *Price) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Price) GetVenueId() string {
	if x != nil && x.VenueId != nil {
		return *x.VenueId
	}
	return ""
}

func (x *Price) GetVenueSymbol() string {
	if x != nil && x.VenueSymbol != nil {
		return *x.VenueSymbol
	}
	return ""
}

func (x *Price) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *Price) GetVolume() float64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *Price) GetBid() float64 {
	if x != nil && x.Bid != nil {
		return *x.Bid
	}
	return 0
}

func (x *Price) GetAsk() float64 {
	if x != nil && x.Ask != nil {
		return *x.Ask
	}
	return 0
}

func (x *Price) GetConfidence() float64 {
	if x != nil && x.Confidence != nil {
		return *x.Confidence
	}
	return 0
}

// VWAP represents a Volume-Weighted Average Price over a time period.
// VWAP is calculated as the sum of (price * volume) divided by total volume.
type VWAP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Asset identifier for which this VWAP is calculated.
	AssetId *string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3,oneof" json:"asset_id,omitempty"`
	// Quote currency asset identifier.
	QuoteAssetId *string `protobuf:"bytes,2,opt,name=quote_asset_id,json=quoteAssetId,proto3,oneof" json:"quote_asset_id,omitempty"`
	// Volume-weighted average price value.
	Value *float64 `protobuf:"fixed64,3,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Start timestamp of the VWAP calculation period.
	PeriodStart *timestamp.Timestamp `protobuf:"bytes,4,opt,name=period_start,json=periodStart,proto3,oneof" json:"period_start,omitempty"`
	// End timestamp of the VWAP calculation period.
	PeriodEnd *timestamp.Timestamp `protobuf:"bytes,5,opt,name=period_end,json=periodEnd,proto3,oneof" json:"period_end,omitempty"`
	// Total volume traded during the period (in base currency).
	TotalVolume *float64 `protobuf:"fixed64,6,opt,name=total_volume,json=totalVolume,proto3,oneof" json:"total_volume,omitempty"`
	// Number of trades included in the calculation.
	TradeCount *int64 `protobuf:"varint,7,opt,name=trade_count,json=tradeCount,proto3,oneof" json:"trade_count,omitempty"`
	// Venue where trades occurred (NULL for cross-venue VWAP).
	VenueId *string `protobuf:"bytes,8,opt,name=venue_id,json=venueId,proto3,oneof" json:"venue_id,omitempty"`
	// Source of the VWAP calculation.
	Source *string `protobuf:"bytes,9,opt,name=source,proto3,oneof" json:"source,omitempty"`
	// Standard deviation of prices during the period.
	PriceStdDev *float64 `protobuf:"fixed64,10,opt,name=price_std_dev,json=priceStdDev,proto3,oneof" json:"price_std_dev,omitempty"`
	// Highest price during the period.
	High *float64 `protobuf:"fixed64,11,opt,name=high,proto3,oneof" json:"high,omitempty"`
	// Lowest price during the period.
	Low *float64 `protobuf:"fixed64,12,opt,name=low,proto3,oneof" json:"low,omitempty"`
}

func (x *VWAP) Reset() {
	*x = VWAP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_markets_v1_price_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VWAP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VWAP) ProtoMessage() {}

func (x *VWAP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_markets_v1_price_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VWAP.ProtoReflect.Descriptor instead.
func (*VWAP) Descriptor() ([]byte, []int) {
	return file_proto_markets_v1_price_proto_rawDescGZIP(), []int{1}
}

func (x *VWAP) GetAssetId() string {
	if x != nil && x.AssetId != nil {
		return *x.AssetId
	}
	return ""
}

func (x *VWAP) GetQuoteAssetId() string {
	if x != nil && x.QuoteAssetId != nil {
		return *x.QuoteAssetId
	}
	return ""
}

func (x *VWAP) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *VWAP) GetPeriodStart() *timestamp.Timestamp {
	if x != nil {
		return x.PeriodStart
	}
	return nil
}

func (x *VWAP) GetPeriodEnd() *timestamp.Timestamp {
	if x != nil {
		return x.PeriodEnd
	}
	return nil
}

func (x *VWAP) GetTotalVolume() float64 {
	if x != nil && x.TotalVolume != nil {
		return *x.TotalVolume
	}
	return 0
}

func (x *VWAP) GetTradeCount() int64 {
	if x != nil && x.TradeCount != nil {
		return *x.TradeCount
	}
	return 0
}

func (x *VWAP) GetVenueId() string {
	if x != nil && x.VenueId != nil {
		return *x.VenueId
	}
	return ""
}

func (x *VWAP) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *VWAP) GetPriceStdDev() float64 {
	if x != nil && x.PriceStdDev != nil {
		return *x.PriceStdDev
	}
	return 0
}

func (x *VWAP) GetHigh() float64 {
	if x != nil && x.High != nil {
		return *x.High
	}
	return 0
}

func (x *VWAP) GetLow() float64 {
	if x != nil && x.Low != nil {
		return *x.Low
	}
	return 0
}

var File_proto_markets_v1_price_proto protoreflect.FileDescriptor

var file_proto_markets_v1_price_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e,
	0x63, 0x71, 0x63, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x8c, 0x04, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x3d, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x07, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0b, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x07, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x48, 0x08, 0x52,
	0x03, 0x62, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x61, 0x73, 0x6b, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x09, 0x52, 0x03, 0x61, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x0a, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x62, 0x69, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x61, 0x73, 0x6b, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xfa,
	0x04, 0x0a, 0x04, 0x56, 0x57, 0x41, 0x50, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a,
	0x0c, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48,
	0x03, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x04, 0x52, 0x09, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x07, 0x52, 0x07, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x08, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x64, 0x44,
	0x65, 0x76, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x0a, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x88, 0x01, 0x01, 0x12, 0x15,
	0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0b, 0x52, 0x03, 0x6c,
	0x6f, 0x77, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x73, 0x74, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68,
	0x69, 0x67, 0x68, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x6f, 0x77, 0x42, 0x40, 0x5a, 0x3e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x65, 0x2d, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x2f, 0x63, 0x71, 0x63, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x71, 0x63, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73,
	0x2f, 0x76, 0x31, 0x3b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_markets_v1_price_proto_rawDescOnce sync.Once
	file_proto_markets_v1_price_proto_rawDescData = file_proto_markets_v1_price_proto_rawDesc
)

func file_proto_markets_v1_price_proto_rawDescGZIP() []byte {
	file_proto_markets_v1_price_proto_rawDescOnce.Do(func() {
		file_proto_markets_v1_price_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_markets_v1_price_proto_rawDescData)
	})
	return file_proto_markets_v1_price_proto_rawDescData
}

var file_proto_markets_v1_price_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_markets_v1_price_proto_goTypes = []interface{}{
	(*Price)(nil),               // 0: cqc.markets.v1.Price
	(*VWAP)(nil),                // 1: cqc.markets.v1.VWAP
	(*timestamp.Timestamp)(nil), // 2: google.protobuf.Timestamp
}
var file_proto_markets_v1_price_proto_depIdxs = []int32{
	2, // 0: cqc.markets.v1.Price.timestamp:type_name -> google.protobuf.Timestamp
	2, // 1: cqc.markets.v1.VWAP.period_start:type_name -> google.protobuf.Timestamp
	2, // 2: cqc.markets.v1.VWAP.period_end:type_name -> google.protobuf.Timestamp
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_proto_markets_v1_price_proto_init() }
func file_proto_markets_v1_price_proto_init() {
	if File_proto_markets_v1_price_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_markets_v1_price_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Price); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_markets_v1_price_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VWAP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_markets_v1_price_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_proto_markets_v1_price_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_markets_v1_price_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_markets_v1_price_proto_goTypes,
		DependencyIndexes: file_proto_markets_v1_price_proto_depIdxs,
		MessageInfos:      file_proto_markets_v1_price_proto_msgTypes,
	}.Build()
	File_proto_markets_v1_price_proto = out.File
	file_proto_markets_v1_price_proto_rawDesc = nil
	file_proto_markets_v1_price_proto_goTypes = nil
	file_proto_markets_v1_price_proto_depIdxs = nil
}

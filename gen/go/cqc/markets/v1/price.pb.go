// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v3.12.4
// source: proto/markets/v1/price.proto

package marketsv1

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Price represents a point-in-time price observation for a trading market.
// Prices can come from various venues (exchanges, AMMs, oracles) and sources.
type Price struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Market identifier (UUID) for which this price is reported.
	// References a specific market (instrument listed on a venue).
	MarketId *string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3,oneof" json:"market_id,omitempty"`
	// Numeric price value in the quote currency.
	// For symbols like BTC/USDT, this is the USDT price of 1 BTC.
	Value *float64 `protobuf:"fixed64,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Timestamp when this price was observed or generated.
	Timestamp *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
	// Venue where this price was observed (e.g., "binance", "uniswap-v3-eth").
	// NULL for aggregated/oracle prices.
	VenueId *string `protobuf:"bytes,4,opt,name=venue_id,json=venueId,proto3,oneof" json:"venue_id,omitempty"`
	// Venue-specific symbol representation (e.g., "BTCUSDT" on Binance, "BTC-USD" on Coinbase).
	// NULL for oracle or aggregated prices.
	VenueSymbol *string `protobuf:"bytes,5,opt,name=venue_symbol,json=venueSymbol,proto3,oneof" json:"venue_symbol,omitempty"`
	// Data source for this price (e.g., "exchange_api", "chainlink_oracle", "internal_calc").
	Source *string `protobuf:"bytes,6,opt,name=source,proto3,oneof" json:"source,omitempty"`
	// Volume traded at this price level (for trade prices).
	// NULL for non-trade price types.
	Volume *float64 `protobuf:"fixed64,7,opt,name=volume,proto3,oneof" json:"volume,omitempty"`
	// Bid price (highest buy order).
	// Only populated for bid-ask spread data.
	Bid *float64 `protobuf:"fixed64,8,opt,name=bid,proto3,oneof" json:"bid,omitempty"`
	// Ask price (lowest sell order).
	// Only populated for bid-ask spread data.
	Ask *float64 `protobuf:"fixed64,9,opt,name=ask,proto3,oneof" json:"ask,omitempty"`
	// Confidence or quality score for this price (0.0 to 1.0).
	// Higher values indicate more reliable prices.
	Confidence    *float64 `protobuf:"fixed64,10,opt,name=confidence,proto3,oneof" json:"confidence,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Price) Reset() {
	*x = Price{}
	mi := &file_proto_markets_v1_price_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Price) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Price) ProtoMessage() {}

func (x *Price) ProtoReflect() protoreflect.Message {
	mi := &file_proto_markets_v1_price_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Price.ProtoReflect.Descriptor instead.
func (*Price) Descriptor() ([]byte, []int) {
	return file_proto_markets_v1_price_proto_rawDescGZIP(), []int{0}
}

func (x *Price) GetMarketId() string {
	if x != nil && x.MarketId != nil {
		return *x.MarketId
	}
	return ""
}

func (x *Price) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *Price) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Price) GetVenueId() string {
	if x != nil && x.VenueId != nil {
		return *x.VenueId
	}
	return ""
}

func (x *Price) GetVenueSymbol() string {
	if x != nil && x.VenueSymbol != nil {
		return *x.VenueSymbol
	}
	return ""
}

func (x *Price) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *Price) GetVolume() float64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *Price) GetBid() float64 {
	if x != nil && x.Bid != nil {
		return *x.Bid
	}
	return 0
}

func (x *Price) GetAsk() float64 {
	if x != nil && x.Ask != nil {
		return *x.Ask
	}
	return 0
}

func (x *Price) GetConfidence() float64 {
	if x != nil && x.Confidence != nil {
		return *x.Confidence
	}
	return 0
}

// VWAP represents a Volume-Weighted Average Price over a time period.
// VWAP is calculated as the sum of (price * volume) divided by total volume.
type VWAP struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Market identifier (UUID) for which this VWAP is calculated.
	// References a specific market (instrument listed on a venue).
	MarketId *string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3,oneof" json:"market_id,omitempty"`
	// Volume-weighted average price value.
	Value *float64 `protobuf:"fixed64,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Start timestamp of the VWAP calculation period.
	PeriodStart *timestamp.Timestamp `protobuf:"bytes,3,opt,name=period_start,json=periodStart,proto3,oneof" json:"period_start,omitempty"`
	// End timestamp of the VWAP calculation period.
	PeriodEnd *timestamp.Timestamp `protobuf:"bytes,4,opt,name=period_end,json=periodEnd,proto3,oneof" json:"period_end,omitempty"`
	// Total volume traded during the period (in base currency).
	TotalVolume *float64 `protobuf:"fixed64,5,opt,name=total_volume,json=totalVolume,proto3,oneof" json:"total_volume,omitempty"`
	// Number of trades included in the calculation.
	TradeCount *int64 `protobuf:"varint,6,opt,name=trade_count,json=tradeCount,proto3,oneof" json:"trade_count,omitempty"`
	// Venue where trades occurred (NULL for cross-venue VWAP).
	VenueId *string `protobuf:"bytes,7,opt,name=venue_id,json=venueId,proto3,oneof" json:"venue_id,omitempty"`
	// Source of the VWAP calculation.
	Source *string `protobuf:"bytes,8,opt,name=source,proto3,oneof" json:"source,omitempty"`
	// Standard deviation of prices during the period.
	PriceStdDev *float64 `protobuf:"fixed64,9,opt,name=price_std_dev,json=priceStdDev,proto3,oneof" json:"price_std_dev,omitempty"`
	// Highest price during the period.
	High *float64 `protobuf:"fixed64,10,opt,name=high,proto3,oneof" json:"high,omitempty"`
	// Lowest price during the period.
	Low           *float64 `protobuf:"fixed64,11,opt,name=low,proto3,oneof" json:"low,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VWAP) Reset() {
	*x = VWAP{}
	mi := &file_proto_markets_v1_price_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VWAP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VWAP) ProtoMessage() {}

func (x *VWAP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_markets_v1_price_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VWAP.ProtoReflect.Descriptor instead.
func (*VWAP) Descriptor() ([]byte, []int) {
	return file_proto_markets_v1_price_proto_rawDescGZIP(), []int{1}
}

func (x *VWAP) GetMarketId() string {
	if x != nil && x.MarketId != nil {
		return *x.MarketId
	}
	return ""
}

func (x *VWAP) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *VWAP) GetPeriodStart() *timestamp.Timestamp {
	if x != nil {
		return x.PeriodStart
	}
	return nil
}

func (x *VWAP) GetPeriodEnd() *timestamp.Timestamp {
	if x != nil {
		return x.PeriodEnd
	}
	return nil
}

func (x *VWAP) GetTotalVolume() float64 {
	if x != nil && x.TotalVolume != nil {
		return *x.TotalVolume
	}
	return 0
}

func (x *VWAP) GetTradeCount() int64 {
	if x != nil && x.TradeCount != nil {
		return *x.TradeCount
	}
	return 0
}

func (x *VWAP) GetVenueId() string {
	if x != nil && x.VenueId != nil {
		return *x.VenueId
	}
	return ""
}

func (x *VWAP) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *VWAP) GetPriceStdDev() float64 {
	if x != nil && x.PriceStdDev != nil {
		return *x.PriceStdDev
	}
	return 0
}

func (x *VWAP) GetHigh() float64 {
	if x != nil && x.High != nil {
		return *x.High
	}
	return 0
}

func (x *VWAP) GetLow() float64 {
	if x != nil && x.Low != nil {
		return *x.Low
	}
	return 0
}

var File_proto_markets_v1_price_proto protoreflect.FileDescriptor

const file_proto_markets_v1_price_proto_rawDesc = "" +
	"\n" +
	"\x1cproto/markets/v1/price.proto\x12\x0ecqc.markets.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"\xd1\x03\n" +
	"\x05Price\x12 \n" +
	"\tmarket_id\x18\x01 \x01(\tH\x00R\bmarketId\x88\x01\x01\x12\x19\n" +
	"\x05value\x18\x02 \x01(\x01H\x01R\x05value\x88\x01\x01\x12=\n" +
	"\ttimestamp\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampH\x02R\ttimestamp\x88\x01\x01\x12\x1e\n" +
	"\bvenue_id\x18\x04 \x01(\tH\x03R\avenueId\x88\x01\x01\x12&\n" +
	"\fvenue_symbol\x18\x05 \x01(\tH\x04R\vvenueSymbol\x88\x01\x01\x12\x1b\n" +
	"\x06source\x18\x06 \x01(\tH\x05R\x06source\x88\x01\x01\x12\x1b\n" +
	"\x06volume\x18\a \x01(\x01H\x06R\x06volume\x88\x01\x01\x12\x15\n" +
	"\x03bid\x18\b \x01(\x01H\aR\x03bid\x88\x01\x01\x12\x15\n" +
	"\x03ask\x18\t \x01(\x01H\bR\x03ask\x88\x01\x01\x12#\n" +
	"\n" +
	"confidence\x18\n" +
	" \x01(\x01H\tR\n" +
	"confidence\x88\x01\x01B\f\n" +
	"\n" +
	"_market_idB\b\n" +
	"\x06_valueB\f\n" +
	"\n" +
	"_timestampB\v\n" +
	"\t_venue_idB\x0f\n" +
	"\r_venue_symbolB\t\n" +
	"\a_sourceB\t\n" +
	"\a_volumeB\x06\n" +
	"\x04_bidB\x06\n" +
	"\x04_askB\r\n" +
	"\v_confidence\"\xbf\x04\n" +
	"\x04VWAP\x12 \n" +
	"\tmarket_id\x18\x01 \x01(\tH\x00R\bmarketId\x88\x01\x01\x12\x19\n" +
	"\x05value\x18\x02 \x01(\x01H\x01R\x05value\x88\x01\x01\x12B\n" +
	"\fperiod_start\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampH\x02R\vperiodStart\x88\x01\x01\x12>\n" +
	"\n" +
	"period_end\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampH\x03R\tperiodEnd\x88\x01\x01\x12&\n" +
	"\ftotal_volume\x18\x05 \x01(\x01H\x04R\vtotalVolume\x88\x01\x01\x12$\n" +
	"\vtrade_count\x18\x06 \x01(\x03H\x05R\n" +
	"tradeCount\x88\x01\x01\x12\x1e\n" +
	"\bvenue_id\x18\a \x01(\tH\x06R\avenueId\x88\x01\x01\x12\x1b\n" +
	"\x06source\x18\b \x01(\tH\aR\x06source\x88\x01\x01\x12'\n" +
	"\rprice_std_dev\x18\t \x01(\x01H\bR\vpriceStdDev\x88\x01\x01\x12\x17\n" +
	"\x04high\x18\n" +
	" \x01(\x01H\tR\x04high\x88\x01\x01\x12\x15\n" +
	"\x03low\x18\v \x01(\x01H\n" +
	"R\x03low\x88\x01\x01B\f\n" +
	"\n" +
	"_market_idB\b\n" +
	"\x06_valueB\x0f\n" +
	"\r_period_startB\r\n" +
	"\v_period_endB\x0f\n" +
	"\r_total_volumeB\x0e\n" +
	"\f_trade_countB\v\n" +
	"\t_venue_idB\t\n" +
	"\a_sourceB\x10\n" +
	"\x0e_price_std_devB\a\n" +
	"\x05_highB\x06\n" +
	"\x04_lowB@Z>github.com/Combine-Capital/cqc/gen/go/cqc/markets/v1;marketsv1b\x06proto3"

var (
	file_proto_markets_v1_price_proto_rawDescOnce sync.Once
	file_proto_markets_v1_price_proto_rawDescData []byte
)

func file_proto_markets_v1_price_proto_rawDescGZIP() []byte {
	file_proto_markets_v1_price_proto_rawDescOnce.Do(func() {
		file_proto_markets_v1_price_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_markets_v1_price_proto_rawDesc), len(file_proto_markets_v1_price_proto_rawDesc)))
	})
	return file_proto_markets_v1_price_proto_rawDescData
}

var file_proto_markets_v1_price_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_markets_v1_price_proto_goTypes = []any{
	(*Price)(nil),               // 0: cqc.markets.v1.Price
	(*VWAP)(nil),                // 1: cqc.markets.v1.VWAP
	(*timestamp.Timestamp)(nil), // 2: google.protobuf.Timestamp
}
var file_proto_markets_v1_price_proto_depIdxs = []int32{
	2, // 0: cqc.markets.v1.Price.timestamp:type_name -> google.protobuf.Timestamp
	2, // 1: cqc.markets.v1.VWAP.period_start:type_name -> google.protobuf.Timestamp
	2, // 2: cqc.markets.v1.VWAP.period_end:type_name -> google.protobuf.Timestamp
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_proto_markets_v1_price_proto_init() }
func file_proto_markets_v1_price_proto_init() {
	if File_proto_markets_v1_price_proto != nil {
		return
	}
	file_proto_markets_v1_price_proto_msgTypes[0].OneofWrappers = []any{}
	file_proto_markets_v1_price_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_markets_v1_price_proto_rawDesc), len(file_proto_markets_v1_price_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_markets_v1_price_proto_goTypes,
		DependencyIndexes: file_proto_markets_v1_price_proto_depIdxs,
		MessageInfos:      file_proto_markets_v1_price_proto_msgTypes,
	}.Build()
	File_proto_markets_v1_price_proto = out.File
	file_proto_markets_v1_price_proto_goTypes = nil
	file_proto_markets_v1_price_proto_depIdxs = nil
}

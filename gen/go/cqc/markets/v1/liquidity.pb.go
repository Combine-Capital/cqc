// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: proto/markets/v1/liquidity.proto

package marketsv1

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// LiquidityMetrics represents comprehensive liquidity measurements for a trading pair.
// These metrics help assess market quality, execution costs, and trading viability.
type LiquidityMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Asset identifier for the base currency.
	AssetId *string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3,oneof" json:"asset_id,omitempty"`
	// Asset identifier for the quote currency.
	QuoteAssetId *string `protobuf:"bytes,2,opt,name=quote_asset_id,json=quoteAssetId,proto3,oneof" json:"quote_asset_id,omitempty"`
	// Venue where these metrics are measured.
	VenueId *string `protobuf:"bytes,3,opt,name=venue_id,json=venueId,proto3,oneof" json:"venue_id,omitempty"`
	// Trading pair symbol on the venue.
	VenueSymbol *string `protobuf:"bytes,4,opt,name=venue_symbol,json=venueSymbol,proto3,oneof" json:"venue_symbol,omitempty"`
	// Timestamp of this liquidity measurement.
	Timestamp *timestamp.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
	// Current bid-ask spread in absolute terms (ask - bid).
	SpreadAbsolute *float64 `protobuf:"fixed64,6,opt,name=spread_absolute,json=spreadAbsolute,proto3,oneof" json:"spread_absolute,omitempty"`
	// Current bid-ask spread as a percentage of mid price.
	SpreadPercentage *float64 `protobuf:"fixed64,7,opt,name=spread_percentage,json=spreadPercentage,proto3,oneof" json:"spread_percentage,omitempty"`
	// 24-hour trading volume in base currency.
	Volume_24HBase *float64 `protobuf:"fixed64,8,opt,name=volume_24h_base,json=volume24hBase,proto3,oneof" json:"volume_24h_base,omitempty"`
	// 24-hour trading volume in quote currency.
	Volume_24HQuote *float64 `protobuf:"fixed64,9,opt,name=volume_24h_quote,json=volume24hQuote,proto3,oneof" json:"volume_24h_quote,omitempty"`
	// 24-hour trading volume in USD (if available).
	Volume_24HUsd *float64 `protobuf:"fixed64,10,opt,name=volume_24h_usd,json=volume24hUsd,proto3,oneof" json:"volume_24h_usd,omitempty"`
	// Number of trades in the last 24 hours.
	TradeCount_24H *int64 `protobuf:"varint,11,opt,name=trade_count_24h,json=tradeCount24h,proto3,oneof" json:"trade_count_24h,omitempty"`
	// Total available bid liquidity within 1% of mid price (quote currency).
	BidLiquidity_1Pct *float64 `protobuf:"fixed64,12,opt,name=bid_liquidity_1pct,json=bidLiquidity1pct,proto3,oneof" json:"bid_liquidity_1pct,omitempty"`
	// Total available ask liquidity within 1% of mid price (quote currency).
	AskLiquidity_1Pct *float64 `protobuf:"fixed64,13,opt,name=ask_liquidity_1pct,json=askLiquidity1pct,proto3,oneof" json:"ask_liquidity_1pct,omitempty"`
	// Total available bid liquidity within 5% of mid price (quote currency).
	BidLiquidity_5Pct *float64 `protobuf:"fixed64,14,opt,name=bid_liquidity_5pct,json=bidLiquidity5pct,proto3,oneof" json:"bid_liquidity_5pct,omitempty"`
	// Total available ask liquidity within 5% of mid price (quote currency).
	AskLiquidity_5Pct *float64 `protobuf:"fixed64,15,opt,name=ask_liquidity_5pct,json=askLiquidity5pct,proto3,oneof" json:"ask_liquidity_5pct,omitempty"`
	// Estimated slippage for a $10,000 buy order (in basis points).
	Slippage_10KBuyBps *float64 `protobuf:"fixed64,16,opt,name=slippage_10k_buy_bps,json=slippage10kBuyBps,proto3,oneof" json:"slippage_10k_buy_bps,omitempty"`
	// Estimated slippage for a $10,000 sell order (in basis points).
	Slippage_10KSellBps *float64 `protobuf:"fixed64,17,opt,name=slippage_10k_sell_bps,json=slippage10kSellBps,proto3,oneof" json:"slippage_10k_sell_bps,omitempty"`
	// Estimated slippage for a $100,000 buy order (in basis points).
	Slippage_100KBuyBps *float64 `protobuf:"fixed64,18,opt,name=slippage_100k_buy_bps,json=slippage100kBuyBps,proto3,oneof" json:"slippage_100k_buy_bps,omitempty"`
	// Estimated slippage for a $100,000 sell order (in basis points).
	Slippage_100KSellBps *float64 `protobuf:"fixed64,19,opt,name=slippage_100k_sell_bps,json=slippage100kSellBps,proto3,oneof" json:"slippage_100k_sell_bps,omitempty"`
	// Order book imbalance: (bid_volume - ask_volume) / (bid_volume + ask_volume).
	// Ranges from -1.0 (all asks) to +1.0 (all bids).
	OrderBookImbalance *float64 `protobuf:"fixed64,20,opt,name=order_book_imbalance,json=orderBookImbalance,proto3,oneof" json:"order_book_imbalance,omitempty"`
	// Current mid price for reference.
	MidPrice *float64 `protobuf:"fixed64,21,opt,name=mid_price,json=midPrice,proto3,oneof" json:"mid_price,omitempty"`
	// Best bid price.
	BestBid *float64 `protobuf:"fixed64,22,opt,name=best_bid,json=bestBid,proto3,oneof" json:"best_bid,omitempty"`
	// Best ask price.
	BestAsk *float64 `protobuf:"fixed64,23,opt,name=best_ask,json=bestAsk,proto3,oneof" json:"best_ask,omitempty"`
	// Average daily volume over the last 7 days (quote currency).
	AvgDailyVolume_7D *float64 `protobuf:"fixed64,24,opt,name=avg_daily_volume_7d,json=avgDailyVolume7d,proto3,oneof" json:"avg_daily_volume_7d,omitempty"`
	// Average daily volume over the last 30 days (quote currency).
	AvgDailyVolume_30D *float64 `protobuf:"fixed64,25,opt,name=avg_daily_volume_30d,json=avgDailyVolume30d,proto3,oneof" json:"avg_daily_volume_30d,omitempty"`
	// Turnover ratio: 24h volume / total market cap (for tokens).
	TurnoverRatio *float64 `protobuf:"fixed64,26,opt,name=turnover_ratio,json=turnoverRatio,proto3,oneof" json:"turnover_ratio,omitempty"`
	// Number of active market makers (if available from venue).
	ActiveMarketMakers *int32 `protobuf:"varint,27,opt,name=active_market_makers,json=activeMarketMakers,proto3,oneof" json:"active_market_makers,omitempty"`
	// Liquidity score (0.0 to 1.0, venue-specific calculation).
	// Higher values indicate better liquidity.
	LiquidityScore *float64 `protobuf:"fixed64,28,opt,name=liquidity_score,json=liquidityScore,proto3,oneof" json:"liquidity_score,omitempty"`
	// Time since last trade in seconds.
	SecondsSinceLastTrade *int64 `protobuf:"varint,29,opt,name=seconds_since_last_trade,json=secondsSinceLastTrade,proto3,oneof" json:"seconds_since_last_trade,omitempty"`
	// Whether this market is currently considered liquid.
	// Typically based on minimum volume and spread thresholds.
	IsLiquid *bool `protobuf:"varint,30,opt,name=is_liquid,json=isLiquid,proto3,oneof" json:"is_liquid,omitempty"`
	// Effective spread: actual execution cost vs mid price (in basis points).
	// Based on recent trade analysis.
	EffectiveSpreadBps *float64 `protobuf:"fixed64,31,opt,name=effective_spread_bps,json=effectiveSpreadBps,proto3,oneof" json:"effective_spread_bps,omitempty"`
	// Price impact of a 1% of ADV (Average Daily Volume) order (in basis points).
	PriceImpact_1PctAdv *float64 `protobuf:"fixed64,32,opt,name=price_impact_1pct_adv,json=priceImpact1pctAdv,proto3,oneof" json:"price_impact_1pct_adv,omitempty"`
}

func (x *LiquidityMetrics) Reset() {
	*x = LiquidityMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_markets_v1_liquidity_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityMetrics) ProtoMessage() {}

func (x *LiquidityMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_markets_v1_liquidity_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityMetrics.ProtoReflect.Descriptor instead.
func (*LiquidityMetrics) Descriptor() ([]byte, []int) {
	return file_proto_markets_v1_liquidity_proto_rawDescGZIP(), []int{0}
}

func (x *LiquidityMetrics) GetAssetId() string {
	if x != nil && x.AssetId != nil {
		return *x.AssetId
	}
	return ""
}

func (x *LiquidityMetrics) GetQuoteAssetId() string {
	if x != nil && x.QuoteAssetId != nil {
		return *x.QuoteAssetId
	}
	return ""
}

func (x *LiquidityMetrics) GetVenueId() string {
	if x != nil && x.VenueId != nil {
		return *x.VenueId
	}
	return ""
}

func (x *LiquidityMetrics) GetVenueSymbol() string {
	if x != nil && x.VenueSymbol != nil {
		return *x.VenueSymbol
	}
	return ""
}

func (x *LiquidityMetrics) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *LiquidityMetrics) GetSpreadAbsolute() float64 {
	if x != nil && x.SpreadAbsolute != nil {
		return *x.SpreadAbsolute
	}
	return 0
}

func (x *LiquidityMetrics) GetSpreadPercentage() float64 {
	if x != nil && x.SpreadPercentage != nil {
		return *x.SpreadPercentage
	}
	return 0
}

func (x *LiquidityMetrics) GetVolume_24HBase() float64 {
	if x != nil && x.Volume_24HBase != nil {
		return *x.Volume_24HBase
	}
	return 0
}

func (x *LiquidityMetrics) GetVolume_24HQuote() float64 {
	if x != nil && x.Volume_24HQuote != nil {
		return *x.Volume_24HQuote
	}
	return 0
}

func (x *LiquidityMetrics) GetVolume_24HUsd() float64 {
	if x != nil && x.Volume_24HUsd != nil {
		return *x.Volume_24HUsd
	}
	return 0
}

func (x *LiquidityMetrics) GetTradeCount_24H() int64 {
	if x != nil && x.TradeCount_24H != nil {
		return *x.TradeCount_24H
	}
	return 0
}

func (x *LiquidityMetrics) GetBidLiquidity_1Pct() float64 {
	if x != nil && x.BidLiquidity_1Pct != nil {
		return *x.BidLiquidity_1Pct
	}
	return 0
}

func (x *LiquidityMetrics) GetAskLiquidity_1Pct() float64 {
	if x != nil && x.AskLiquidity_1Pct != nil {
		return *x.AskLiquidity_1Pct
	}
	return 0
}

func (x *LiquidityMetrics) GetBidLiquidity_5Pct() float64 {
	if x != nil && x.BidLiquidity_5Pct != nil {
		return *x.BidLiquidity_5Pct
	}
	return 0
}

func (x *LiquidityMetrics) GetAskLiquidity_5Pct() float64 {
	if x != nil && x.AskLiquidity_5Pct != nil {
		return *x.AskLiquidity_5Pct
	}
	return 0
}

func (x *LiquidityMetrics) GetSlippage_10KBuyBps() float64 {
	if x != nil && x.Slippage_10KBuyBps != nil {
		return *x.Slippage_10KBuyBps
	}
	return 0
}

func (x *LiquidityMetrics) GetSlippage_10KSellBps() float64 {
	if x != nil && x.Slippage_10KSellBps != nil {
		return *x.Slippage_10KSellBps
	}
	return 0
}

func (x *LiquidityMetrics) GetSlippage_100KBuyBps() float64 {
	if x != nil && x.Slippage_100KBuyBps != nil {
		return *x.Slippage_100KBuyBps
	}
	return 0
}

func (x *LiquidityMetrics) GetSlippage_100KSellBps() float64 {
	if x != nil && x.Slippage_100KSellBps != nil {
		return *x.Slippage_100KSellBps
	}
	return 0
}

func (x *LiquidityMetrics) GetOrderBookImbalance() float64 {
	if x != nil && x.OrderBookImbalance != nil {
		return *x.OrderBookImbalance
	}
	return 0
}

func (x *LiquidityMetrics) GetMidPrice() float64 {
	if x != nil && x.MidPrice != nil {
		return *x.MidPrice
	}
	return 0
}

func (x *LiquidityMetrics) GetBestBid() float64 {
	if x != nil && x.BestBid != nil {
		return *x.BestBid
	}
	return 0
}

func (x *LiquidityMetrics) GetBestAsk() float64 {
	if x != nil && x.BestAsk != nil {
		return *x.BestAsk
	}
	return 0
}

func (x *LiquidityMetrics) GetAvgDailyVolume_7D() float64 {
	if x != nil && x.AvgDailyVolume_7D != nil {
		return *x.AvgDailyVolume_7D
	}
	return 0
}

func (x *LiquidityMetrics) GetAvgDailyVolume_30D() float64 {
	if x != nil && x.AvgDailyVolume_30D != nil {
		return *x.AvgDailyVolume_30D
	}
	return 0
}

func (x *LiquidityMetrics) GetTurnoverRatio() float64 {
	if x != nil && x.TurnoverRatio != nil {
		return *x.TurnoverRatio
	}
	return 0
}

func (x *LiquidityMetrics) GetActiveMarketMakers() int32 {
	if x != nil && x.ActiveMarketMakers != nil {
		return *x.ActiveMarketMakers
	}
	return 0
}

func (x *LiquidityMetrics) GetLiquidityScore() float64 {
	if x != nil && x.LiquidityScore != nil {
		return *x.LiquidityScore
	}
	return 0
}

func (x *LiquidityMetrics) GetSecondsSinceLastTrade() int64 {
	if x != nil && x.SecondsSinceLastTrade != nil {
		return *x.SecondsSinceLastTrade
	}
	return 0
}

func (x *LiquidityMetrics) GetIsLiquid() bool {
	if x != nil && x.IsLiquid != nil {
		return *x.IsLiquid
	}
	return false
}

func (x *LiquidityMetrics) GetEffectiveSpreadBps() float64 {
	if x != nil && x.EffectiveSpreadBps != nil {
		return *x.EffectiveSpreadBps
	}
	return 0
}

func (x *LiquidityMetrics) GetPriceImpact_1PctAdv() float64 {
	if x != nil && x.PriceImpact_1PctAdv != nil {
		return *x.PriceImpact_1PctAdv
	}
	return 0
}

var File_proto_markets_v1_liquidity_proto protoreflect.FileDescriptor

var file_proto_markets_v1_liquidity_proto_rawDesc = []byte{
	0x0a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0e, 0x63, 0x71, 0x63, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xa1, 0x11, 0x0a, 0x10, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x04, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x70,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x05, 0x52, 0x0e, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x41, 0x62, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x73, 0x70, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x10, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x32, 0x34, 0x68, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x07, 0x52, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x34, 0x68,
	0x42, 0x61, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x5f, 0x32, 0x34, 0x68, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x08, 0x52, 0x0e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x34, 0x68, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x5f, 0x32, 0x34, 0x68, 0x5f, 0x75, 0x73, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x09,
	0x52, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x34, 0x68, 0x55, 0x73, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x32, 0x34, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0a, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x34, 0x68, 0x88, 0x01, 0x01, 0x12, 0x31,
	0x0a, 0x12, 0x62, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f,
	0x31, 0x70, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0b, 0x52, 0x10, 0x62, 0x69,
	0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x31, 0x70, 0x63, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x5f, 0x31, 0x70, 0x63, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0c, 0x52,
	0x10, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x31, 0x70, 0x63,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x62, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x35, 0x70, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x0d, 0x52, 0x10, 0x62, 0x69, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x35, 0x70, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x73, 0x6b, 0x5f, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x35, 0x70, 0x63, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x0e, 0x52, 0x10, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x35, 0x70, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x73, 0x6c,
	0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x31, 0x30, 0x6b, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x62,
	0x70, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0f, 0x52, 0x11, 0x73, 0x6c, 0x69, 0x70,
	0x70, 0x61, 0x67, 0x65, 0x31, 0x30, 0x6b, 0x42, 0x75, 0x79, 0x42, 0x70, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x36, 0x0a, 0x15, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x31, 0x30, 0x6b,
	0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x10, 0x52, 0x12, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x31, 0x30, 0x6b, 0x53, 0x65,
	0x6c, 0x6c, 0x42, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x15, 0x73, 0x6c, 0x69, 0x70,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x31, 0x30, 0x30, 0x6b, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x62, 0x70,
	0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x48, 0x11, 0x52, 0x12, 0x73, 0x6c, 0x69, 0x70, 0x70,
	0x61, 0x67, 0x65, 0x31, 0x30, 0x30, 0x6b, 0x42, 0x75, 0x79, 0x42, 0x70, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x38, 0x0a, 0x16, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x31, 0x30, 0x30,
	0x6b, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x12, 0x52, 0x13, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x31, 0x30, 0x30, 0x6b,
	0x53, 0x65, 0x6c, 0x6c, 0x42, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x48, 0x13, 0x52, 0x12, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x49, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x6d, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x14, 0x52, 0x08, 0x6d, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x69, 0x64, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x01, 0x48, 0x15, 0x52, 0x07, 0x62, 0x65, 0x73, 0x74, 0x42, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x73, 0x6b, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x01, 0x48, 0x16, 0x52, 0x07, 0x62, 0x65, 0x73, 0x74, 0x41, 0x73, 0x6b,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x61, 0x76, 0x67, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x37, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x17, 0x52, 0x10, 0x61, 0x76, 0x67, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x37, 0x64, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x61, 0x76, 0x67, 0x5f, 0x64,
	0x61, 0x69, 0x6c, 0x79, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x33, 0x30, 0x64, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x01, 0x48, 0x18, 0x52, 0x11, 0x61, 0x76, 0x67, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x33, 0x30, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x19, 0x52, 0x0d, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65,
	0x72, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1a, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x2c, 0x0a, 0x0f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1b, 0x52, 0x0e, 0x6c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c,
	0x0a, 0x18, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x1c, 0x52, 0x15, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65,
	0x4c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x1d, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35,
	0x0a, 0x14, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1e, 0x52, 0x12,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x42,
	0x70, 0x73, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x15, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x31, 0x70, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x76, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x1f, 0x52, 0x12, 0x70, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x31, 0x70, 0x63, 0x74, 0x41, 0x64, 0x76, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x70,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x32,
	0x34, 0x68, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x5f, 0x32, 0x34, 0x68, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x32, 0x34, 0x68, 0x5f, 0x75, 0x73, 0x64, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x32, 0x34, 0x68, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x31, 0x70, 0x63, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61,
	0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x31, 0x70, 0x63,
	0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x5f, 0x35, 0x70, 0x63, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x73, 0x6b,
	0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x35, 0x70, 0x63, 0x74, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x31, 0x30, 0x6b,
	0x5f, 0x62, 0x75, 0x79, 0x5f, 0x62, 0x70, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x73, 0x6c, 0x69,
	0x70, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x31, 0x30, 0x6b, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x62,
	0x70, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x31, 0x30, 0x30, 0x6b, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x62, 0x70, 0x73, 0x42, 0x19, 0x0a, 0x17,
	0x5f, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x31, 0x30, 0x30, 0x6b, 0x5f, 0x73,
	0x65, 0x6c, 0x6c, 0x5f, 0x62, 0x70, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x62, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x73, 0x6b, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x76, 0x67,
	0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x37, 0x64,
	0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x33, 0x30, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x75,
	0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x73, 0x5f, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x70, 0x73, 0x42, 0x18, 0x0a,
	0x16, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x31,
	0x70, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x76, 0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x2d, 0x43, 0x61,
	0x70, 0x69, 0x74, 0x61, 0x6c, 0x2f, 0x63, 0x71, 0x63, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f,
	0x2f, 0x63, 0x71, 0x63, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x3b,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_proto_markets_v1_liquidity_proto_rawDescOnce sync.Once
	file_proto_markets_v1_liquidity_proto_rawDescData = file_proto_markets_v1_liquidity_proto_rawDesc
)

func file_proto_markets_v1_liquidity_proto_rawDescGZIP() []byte {
	file_proto_markets_v1_liquidity_proto_rawDescOnce.Do(func() {
		file_proto_markets_v1_liquidity_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_markets_v1_liquidity_proto_rawDescData)
	})
	return file_proto_markets_v1_liquidity_proto_rawDescData
}

var file_proto_markets_v1_liquidity_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_proto_markets_v1_liquidity_proto_goTypes = []interface{}{
	(*LiquidityMetrics)(nil),    // 0: cqc.markets.v1.LiquidityMetrics
	(*timestamp.Timestamp)(nil), // 1: google.protobuf.Timestamp
}
var file_proto_markets_v1_liquidity_proto_depIdxs = []int32{
	1, // 0: cqc.markets.v1.LiquidityMetrics.timestamp:type_name -> google.protobuf.Timestamp
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_proto_markets_v1_liquidity_proto_init() }
func file_proto_markets_v1_liquidity_proto_init() {
	if File_proto_markets_v1_liquidity_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_markets_v1_liquidity_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_markets_v1_liquidity_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_markets_v1_liquidity_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_markets_v1_liquidity_proto_goTypes,
		DependencyIndexes: file_proto_markets_v1_liquidity_proto_depIdxs,
		MessageInfos:      file_proto_markets_v1_liquidity_proto_msgTypes,
	}.Build()
	File_proto_markets_v1_liquidity_proto = out.File
	file_proto_markets_v1_liquidity_proto_rawDesc = nil
	file_proto_markets_v1_liquidity_proto_goTypes = nil
	file_proto_markets_v1_liquidity_proto_depIdxs = nil
}

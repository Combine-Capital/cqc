// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v3.12.4
// source: proto/markets/v1/market.proto

package marketsv1

import (
	_struct "github.com/golang/protobuf/ptypes/struct"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Market represents a specific listing of an Instrument on a Venue.
// This is the venue-specific representation with trading rules and fees.
type Market struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique market identifier (UUID).
	Id *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	// Foreign key to Instrument.id - the product being traded.
	InstrumentId *string `protobuf:"bytes,2,opt,name=instrument_id,json=instrumentId,proto3,oneof" json:"instrument_id,omitempty"`
	// Foreign key to Venue.id - where this instrument is listed.
	VenueId *string `protobuf:"bytes,3,opt,name=venue_id,json=venueId,proto3,oneof" json:"venue_id,omitempty"`
	// Venue-specific symbol name (e.g., "BTCUSDT" on Binance, "BTC-PERP" on Hyperliquid).
	VenueSymbol *string `protobuf:"bytes,4,opt,name=venue_symbol,json=venueSymbol,proto3,oneof" json:"venue_symbol,omitempty"`
	// Settlement asset identifier (UUID) - asset used for contract settlement.
	// For perpetuals/futures, this is what profits/losses are paid in.
	// May be null for spot markets (settlement is in base/quote assets directly).
	SettlementAssetId *string `protobuf:"bytes,5,opt,name=settlement_asset_id,json=settlementAssetId,proto3,oneof" json:"settlement_asset_id,omitempty"`
	// Price currency asset identifier (UUID) - the asset prices are quoted in.
	// For BTC/USDT, this is USDT. For BTC-PERP quoted in USD, this is USD.
	PriceCurrencyAssetId *string `protobuf:"bytes,6,opt,name=price_currency_asset_id,json=priceCurrencyAssetId,proto3,oneof" json:"price_currency_asset_id,omitempty"`
	// Minimum price increment (tick size) as string decimal.
	// Example: "0.01" means price can move in increments of 0.01
	TickSize *string `protobuf:"bytes,7,opt,name=tick_size,json=tickSize,proto3,oneof" json:"tick_size,omitempty"`
	// Minimum order size increment (lot size) in base asset units as string decimal.
	// Example: "0.001" means you can trade in increments of 0.001 BTC
	LotSize *string `protobuf:"bytes,8,opt,name=lot_size,json=lotSize,proto3,oneof" json:"lot_size,omitempty"`
	// Minimum order size in base asset units as string decimal.
	// Example: "0.001" BTC minimum per order
	MinOrderSize *string `protobuf:"bytes,9,opt,name=min_order_size,json=minOrderSize,proto3,oneof" json:"min_order_size,omitempty"`
	// Maximum order size in base asset units as string decimal.
	// Null if no maximum limit.
	MaxOrderSize *string `protobuf:"bytes,10,opt,name=max_order_size,json=maxOrderSize,proto3,oneof" json:"max_order_size,omitempty"`
	// Minimum notional value (price * quantity) in quote currency as string decimal.
	// Example: "10.0" USDT minimum notional for an order
	MinNotional *string `protobuf:"bytes,11,opt,name=min_notional,json=minNotional,proto3,oneof" json:"min_notional,omitempty"`
	// Maker fee as string decimal (e.g., "0.0002" for 0.02%).
	// Negative values indicate rebates.
	MakerFee *string `protobuf:"bytes,12,opt,name=maker_fee,json=makerFee,proto3,oneof" json:"maker_fee,omitempty"`
	// Taker fee as string decimal (e.g., "0.0005" for 0.05%).
	TakerFee *string `protobuf:"bytes,13,opt,name=taker_fee,json=takerFee,proto3,oneof" json:"taker_fee,omitempty"`
	// Funding interval in seconds (for perpetuals).
	// Example: 28800 for 8-hour funding on most perp exchanges.
	// Zero or null for non-perpetual instruments.
	FundingIntervalSecs *int32 `protobuf:"varint,14,opt,name=funding_interval_secs,json=fundingIntervalSecs,proto3,oneof" json:"funding_interval_secs,omitempty"`
	// Market status (string, not enum).
	// Examples: "active", "suspended", "delisted"
	Status *string `protobuf:"bytes,15,opt,name=status,proto3,oneof" json:"status,omitempty"`
	// Timestamp when this market was listed on the venue.
	ListedAt *timestamp.Timestamp `protobuf:"bytes,16,opt,name=listed_at,json=listedAt,proto3,oneof" json:"listed_at,omitempty"`
	// Timestamp when this market was delisted from the venue.
	// Null if still listed.
	DelistedAt *timestamp.Timestamp `protobuf:"bytes,17,opt,name=delisted_at,json=delistedAt,proto3,oneof" json:"delisted_at,omitempty"`
	// Additional market-specific metadata.
	//
	// For AMM markets (Uniswap, etc.):
	//   - pool_address: contract address
	//   - fee_tier_bps: fee tier in basis points
	//   - tick_spacing: tick spacing parameter
	//   - token0: address of token0
	//   - token1: address of token1
	//
	// For lending markets (Aave, Compound, etc.):
	//   - reserve_address: reserve/market contract address
	//   - aToken_address: aToken/cToken address for deposits
	//   - debtToken_address: debt token address for borrows
	//   - ltv: loan-to-value ratio
	//   - liq_threshold: liquidation threshold
	//
	// For perp markets (Hyperliquid, dYdX, etc.):
	//   - product_id: venue-specific product identifier
	//   - index_oracle: oracle address/identifier for index price
	//   - risk_tiers: JSON array of risk tier configurations
	Metadata *_struct.Struct `protobuf:"bytes,18,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	// Timestamp when this market was created in our system.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,19,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	// Timestamp when this market was last updated in our system.
	UpdatedAt     *timestamp.Timestamp `protobuf:"bytes,20,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Market) Reset() {
	*x = Market{}
	mi := &file_proto_markets_v1_market_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Market) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Market) ProtoMessage() {}

func (x *Market) ProtoReflect() protoreflect.Message {
	mi := &file_proto_markets_v1_market_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Market.ProtoReflect.Descriptor instead.
func (*Market) Descriptor() ([]byte, []int) {
	return file_proto_markets_v1_market_proto_rawDescGZIP(), []int{0}
}

func (x *Market) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Market) GetInstrumentId() string {
	if x != nil && x.InstrumentId != nil {
		return *x.InstrumentId
	}
	return ""
}

func (x *Market) GetVenueId() string {
	if x != nil && x.VenueId != nil {
		return *x.VenueId
	}
	return ""
}

func (x *Market) GetVenueSymbol() string {
	if x != nil && x.VenueSymbol != nil {
		return *x.VenueSymbol
	}
	return ""
}

func (x *Market) GetSettlementAssetId() string {
	if x != nil && x.SettlementAssetId != nil {
		return *x.SettlementAssetId
	}
	return ""
}

func (x *Market) GetPriceCurrencyAssetId() string {
	if x != nil && x.PriceCurrencyAssetId != nil {
		return *x.PriceCurrencyAssetId
	}
	return ""
}

func (x *Market) GetTickSize() string {
	if x != nil && x.TickSize != nil {
		return *x.TickSize
	}
	return ""
}

func (x *Market) GetLotSize() string {
	if x != nil && x.LotSize != nil {
		return *x.LotSize
	}
	return ""
}

func (x *Market) GetMinOrderSize() string {
	if x != nil && x.MinOrderSize != nil {
		return *x.MinOrderSize
	}
	return ""
}

func (x *Market) GetMaxOrderSize() string {
	if x != nil && x.MaxOrderSize != nil {
		return *x.MaxOrderSize
	}
	return ""
}

func (x *Market) GetMinNotional() string {
	if x != nil && x.MinNotional != nil {
		return *x.MinNotional
	}
	return ""
}

func (x *Market) GetMakerFee() string {
	if x != nil && x.MakerFee != nil {
		return *x.MakerFee
	}
	return ""
}

func (x *Market) GetTakerFee() string {
	if x != nil && x.TakerFee != nil {
		return *x.TakerFee
	}
	return ""
}

func (x *Market) GetFundingIntervalSecs() int32 {
	if x != nil && x.FundingIntervalSecs != nil {
		return *x.FundingIntervalSecs
	}
	return 0
}

func (x *Market) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *Market) GetListedAt() *timestamp.Timestamp {
	if x != nil {
		return x.ListedAt
	}
	return nil
}

func (x *Market) GetDelistedAt() *timestamp.Timestamp {
	if x != nil {
		return x.DelistedAt
	}
	return nil
}

func (x *Market) GetMetadata() *_struct.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Market) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Market) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

var File_proto_markets_v1_market_proto protoreflect.FileDescriptor

const file_proto_markets_v1_market_proto_rawDesc = "" +
	"\n" +
	"\x1dproto/markets/v1/market.proto\x12\x0ecqc.markets.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1cgoogle/protobuf/struct.proto\"\xdb\t\n" +
	"\x06Market\x12\x13\n" +
	"\x02id\x18\x01 \x01(\tH\x00R\x02id\x88\x01\x01\x12(\n" +
	"\rinstrument_id\x18\x02 \x01(\tH\x01R\finstrumentId\x88\x01\x01\x12\x1e\n" +
	"\bvenue_id\x18\x03 \x01(\tH\x02R\avenueId\x88\x01\x01\x12&\n" +
	"\fvenue_symbol\x18\x04 \x01(\tH\x03R\vvenueSymbol\x88\x01\x01\x123\n" +
	"\x13settlement_asset_id\x18\x05 \x01(\tH\x04R\x11settlementAssetId\x88\x01\x01\x12:\n" +
	"\x17price_currency_asset_id\x18\x06 \x01(\tH\x05R\x14priceCurrencyAssetId\x88\x01\x01\x12 \n" +
	"\ttick_size\x18\a \x01(\tH\x06R\btickSize\x88\x01\x01\x12\x1e\n" +
	"\blot_size\x18\b \x01(\tH\aR\alotSize\x88\x01\x01\x12)\n" +
	"\x0emin_order_size\x18\t \x01(\tH\bR\fminOrderSize\x88\x01\x01\x12)\n" +
	"\x0emax_order_size\x18\n" +
	" \x01(\tH\tR\fmaxOrderSize\x88\x01\x01\x12&\n" +
	"\fmin_notional\x18\v \x01(\tH\n" +
	"R\vminNotional\x88\x01\x01\x12 \n" +
	"\tmaker_fee\x18\f \x01(\tH\vR\bmakerFee\x88\x01\x01\x12 \n" +
	"\ttaker_fee\x18\r \x01(\tH\fR\btakerFee\x88\x01\x01\x127\n" +
	"\x15funding_interval_secs\x18\x0e \x01(\x05H\rR\x13fundingIntervalSecs\x88\x01\x01\x12\x1b\n" +
	"\x06status\x18\x0f \x01(\tH\x0eR\x06status\x88\x01\x01\x12<\n" +
	"\tlisted_at\x18\x10 \x01(\v2\x1a.google.protobuf.TimestampH\x0fR\blistedAt\x88\x01\x01\x12@\n" +
	"\vdelisted_at\x18\x11 \x01(\v2\x1a.google.protobuf.TimestampH\x10R\n" +
	"delistedAt\x88\x01\x01\x128\n" +
	"\bmetadata\x18\x12 \x01(\v2\x17.google.protobuf.StructH\x11R\bmetadata\x88\x01\x01\x12>\n" +
	"\n" +
	"created_at\x18\x13 \x01(\v2\x1a.google.protobuf.TimestampH\x12R\tcreatedAt\x88\x01\x01\x12>\n" +
	"\n" +
	"updated_at\x18\x14 \x01(\v2\x1a.google.protobuf.TimestampH\x13R\tupdatedAt\x88\x01\x01B\x05\n" +
	"\x03_idB\x10\n" +
	"\x0e_instrument_idB\v\n" +
	"\t_venue_idB\x0f\n" +
	"\r_venue_symbolB\x16\n" +
	"\x14_settlement_asset_idB\x1a\n" +
	"\x18_price_currency_asset_idB\f\n" +
	"\n" +
	"_tick_sizeB\v\n" +
	"\t_lot_sizeB\x11\n" +
	"\x0f_min_order_sizeB\x11\n" +
	"\x0f_max_order_sizeB\x0f\n" +
	"\r_min_notionalB\f\n" +
	"\n" +
	"_maker_feeB\f\n" +
	"\n" +
	"_taker_feeB\x18\n" +
	"\x16_funding_interval_secsB\t\n" +
	"\a_statusB\f\n" +
	"\n" +
	"_listed_atB\x0e\n" +
	"\f_delisted_atB\v\n" +
	"\t_metadataB\r\n" +
	"\v_created_atB\r\n" +
	"\v_updated_atB@Z>github.com/Combine-Capital/cqc/gen/go/cqc/markets/v1;marketsv1b\x06proto3"

var (
	file_proto_markets_v1_market_proto_rawDescOnce sync.Once
	file_proto_markets_v1_market_proto_rawDescData []byte
)

func file_proto_markets_v1_market_proto_rawDescGZIP() []byte {
	file_proto_markets_v1_market_proto_rawDescOnce.Do(func() {
		file_proto_markets_v1_market_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_markets_v1_market_proto_rawDesc), len(file_proto_markets_v1_market_proto_rawDesc)))
	})
	return file_proto_markets_v1_market_proto_rawDescData
}

var file_proto_markets_v1_market_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_proto_markets_v1_market_proto_goTypes = []any{
	(*Market)(nil),              // 0: cqc.markets.v1.Market
	(*timestamp.Timestamp)(nil), // 1: google.protobuf.Timestamp
	(*_struct.Struct)(nil),      // 2: google.protobuf.Struct
}
var file_proto_markets_v1_market_proto_depIdxs = []int32{
	1, // 0: cqc.markets.v1.Market.listed_at:type_name -> google.protobuf.Timestamp
	1, // 1: cqc.markets.v1.Market.delisted_at:type_name -> google.protobuf.Timestamp
	2, // 2: cqc.markets.v1.Market.metadata:type_name -> google.protobuf.Struct
	1, // 3: cqc.markets.v1.Market.created_at:type_name -> google.protobuf.Timestamp
	1, // 4: cqc.markets.v1.Market.updated_at:type_name -> google.protobuf.Timestamp
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_proto_markets_v1_market_proto_init() }
func file_proto_markets_v1_market_proto_init() {
	if File_proto_markets_v1_market_proto != nil {
		return
	}
	file_proto_markets_v1_market_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_markets_v1_market_proto_rawDesc), len(file_proto_markets_v1_market_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_markets_v1_market_proto_goTypes,
		DependencyIndexes: file_proto_markets_v1_market_proto_depIdxs,
		MessageInfos:      file_proto_markets_v1_market_proto_msgTypes,
	}.Build()
	File_proto_markets_v1_market_proto = out.File
	file_proto_markets_v1_market_proto_goTypes = nil
	file_proto_markets_v1_market_proto_depIdxs = nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: proto/markets/v1/trade.proto

package marketsv1

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TradeSide represents the side of a trade from the taker's perspective.
type TradeSide int32

const (
	TradeSide_TRADE_SIDE_UNSPECIFIED TradeSide = 0
	TradeSide_TRADE_SIDE_BUY         TradeSide = 1 // Taker bought (aggressor removed liquidity from asks)
	TradeSide_TRADE_SIDE_SELL        TradeSide = 2 // Taker sold (aggressor removed liquidity from bids)
)

// Enum value maps for TradeSide.
var (
	TradeSide_name = map[int32]string{
		0: "TRADE_SIDE_UNSPECIFIED",
		1: "TRADE_SIDE_BUY",
		2: "TRADE_SIDE_SELL",
	}
	TradeSide_value = map[string]int32{
		"TRADE_SIDE_UNSPECIFIED": 0,
		"TRADE_SIDE_BUY":         1,
		"TRADE_SIDE_SELL":        2,
	}
)

func (x TradeSide) Enum() *TradeSide {
	p := new(TradeSide)
	*p = x
	return p
}

func (x TradeSide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeSide) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_markets_v1_trade_proto_enumTypes[0].Descriptor()
}

func (TradeSide) Type() protoreflect.EnumType {
	return &file_proto_markets_v1_trade_proto_enumTypes[0]
}

func (x TradeSide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeSide.Descriptor instead.
func (TradeSide) EnumDescriptor() ([]byte, []int) {
	return file_proto_markets_v1_trade_proto_rawDescGZIP(), []int{0}
}

// CandleInterval represents the time period for a candle/OHLCV bar.
type CandleInterval int32

const (
	CandleInterval_CANDLE_INTERVAL_UNSPECIFIED CandleInterval = 0
	CandleInterval_CANDLE_INTERVAL_1MIN        CandleInterval = 1
	CandleInterval_CANDLE_INTERVAL_5MIN        CandleInterval = 2
	CandleInterval_CANDLE_INTERVAL_15MIN       CandleInterval = 3
	CandleInterval_CANDLE_INTERVAL_30MIN       CandleInterval = 4
	CandleInterval_CANDLE_INTERVAL_1HOUR       CandleInterval = 5
	CandleInterval_CANDLE_INTERVAL_4HOUR       CandleInterval = 6
	CandleInterval_CANDLE_INTERVAL_1DAY        CandleInterval = 7
	CandleInterval_CANDLE_INTERVAL_1WEEK       CandleInterval = 8
	CandleInterval_CANDLE_INTERVAL_1MONTH      CandleInterval = 9
)

// Enum value maps for CandleInterval.
var (
	CandleInterval_name = map[int32]string{
		0: "CANDLE_INTERVAL_UNSPECIFIED",
		1: "CANDLE_INTERVAL_1MIN",
		2: "CANDLE_INTERVAL_5MIN",
		3: "CANDLE_INTERVAL_15MIN",
		4: "CANDLE_INTERVAL_30MIN",
		5: "CANDLE_INTERVAL_1HOUR",
		6: "CANDLE_INTERVAL_4HOUR",
		7: "CANDLE_INTERVAL_1DAY",
		8: "CANDLE_INTERVAL_1WEEK",
		9: "CANDLE_INTERVAL_1MONTH",
	}
	CandleInterval_value = map[string]int32{
		"CANDLE_INTERVAL_UNSPECIFIED": 0,
		"CANDLE_INTERVAL_1MIN":        1,
		"CANDLE_INTERVAL_5MIN":        2,
		"CANDLE_INTERVAL_15MIN":       3,
		"CANDLE_INTERVAL_30MIN":       4,
		"CANDLE_INTERVAL_1HOUR":       5,
		"CANDLE_INTERVAL_4HOUR":       6,
		"CANDLE_INTERVAL_1DAY":        7,
		"CANDLE_INTERVAL_1WEEK":       8,
		"CANDLE_INTERVAL_1MONTH":      9,
	}
)

func (x CandleInterval) Enum() *CandleInterval {
	p := new(CandleInterval)
	*p = x
	return p
}

func (x CandleInterval) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CandleInterval) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_markets_v1_trade_proto_enumTypes[1].Descriptor()
}

func (CandleInterval) Type() protoreflect.EnumType {
	return &file_proto_markets_v1_trade_proto_enumTypes[1]
}

func (x CandleInterval) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CandleInterval.Descriptor instead.
func (CandleInterval) EnumDescriptor() ([]byte, []int) {
	return file_proto_markets_v1_trade_proto_rawDescGZIP(), []int{1}
}

// Trade represents a single executed trade on a venue.
type Trade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique trade identifier from the venue (if available).
	TradeId *string `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3,oneof" json:"trade_id,omitempty"`
	// Asset identifier for the base currency.
	AssetId *string `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3,oneof" json:"asset_id,omitempty"`
	// Asset identifier for the quote currency.
	QuoteAssetId *string `protobuf:"bytes,3,opt,name=quote_asset_id,json=quoteAssetId,proto3,oneof" json:"quote_asset_id,omitempty"`
	// Venue where this trade occurred.
	VenueId *string `protobuf:"bytes,4,opt,name=venue_id,json=venueId,proto3,oneof" json:"venue_id,omitempty"`
	// Trading pair symbol on the venue (e.g., "BTCUSDT").
	VenueSymbol *string `protobuf:"bytes,5,opt,name=venue_symbol,json=venueSymbol,proto3,oneof" json:"venue_symbol,omitempty"`
	// Timestamp when the trade was executed.
	Timestamp *timestamp.Timestamp `protobuf:"bytes,6,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
	// Execution price of the trade.
	Price *float64 `protobuf:"fixed64,7,opt,name=price,proto3,oneof" json:"price,omitempty"`
	// Quantity traded in base currency.
	Quantity *float64 `protobuf:"fixed64,8,opt,name=quantity,proto3,oneof" json:"quantity,omitempty"`
	// Side of the trade (buy or sell from taker's perspective).
	Side *TradeSide `protobuf:"varint,9,opt,name=side,proto3,enum=cqc.markets.v1.TradeSide,oneof" json:"side,omitempty"`
	// Total value of the trade in quote currency (price * quantity).
	Value *float64 `protobuf:"fixed64,10,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Transaction hash (for on-chain DEX trades).
	TxHash *string `protobuf:"bytes,11,opt,name=tx_hash,json=txHash,proto3,oneof" json:"tx_hash,omitempty"`
	// Block number (for on-chain trades).
	BlockNumber *int64 `protobuf:"varint,12,opt,name=block_number,json=blockNumber,proto3,oneof" json:"block_number,omitempty"`
	// Whether this trade was a liquidation.
	IsLiquidation *bool `protobuf:"varint,13,opt,name=is_liquidation,json=isLiquidation,proto3,oneof" json:"is_liquidation,omitempty"`
	// Maker order ID (if available).
	MakerOrderId *string `protobuf:"bytes,14,opt,name=maker_order_id,json=makerOrderId,proto3,oneof" json:"maker_order_id,omitempty"`
	// Taker order ID (if available).
	TakerOrderId *string `protobuf:"bytes,15,opt,name=taker_order_id,json=takerOrderId,proto3,oneof" json:"taker_order_id,omitempty"`
}

func (x *Trade) Reset() {
	*x = Trade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_markets_v1_trade_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_proto_markets_v1_trade_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_proto_markets_v1_trade_proto_rawDescGZIP(), []int{0}
}

func (x *Trade) GetTradeId() string {
	if x != nil && x.TradeId != nil {
		return *x.TradeId
	}
	return ""
}

func (x *Trade) GetAssetId() string {
	if x != nil && x.AssetId != nil {
		return *x.AssetId
	}
	return ""
}

func (x *Trade) GetQuoteAssetId() string {
	if x != nil && x.QuoteAssetId != nil {
		return *x.QuoteAssetId
	}
	return ""
}

func (x *Trade) GetVenueId() string {
	if x != nil && x.VenueId != nil {
		return *x.VenueId
	}
	return ""
}

func (x *Trade) GetVenueSymbol() string {
	if x != nil && x.VenueSymbol != nil {
		return *x.VenueSymbol
	}
	return ""
}

func (x *Trade) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Trade) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *Trade) GetQuantity() float64 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

func (x *Trade) GetSide() TradeSide {
	if x != nil && x.Side != nil {
		return *x.Side
	}
	return TradeSide_TRADE_SIDE_UNSPECIFIED
}

func (x *Trade) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *Trade) GetTxHash() string {
	if x != nil && x.TxHash != nil {
		return *x.TxHash
	}
	return ""
}

func (x *Trade) GetBlockNumber() int64 {
	if x != nil && x.BlockNumber != nil {
		return *x.BlockNumber
	}
	return 0
}

func (x *Trade) GetIsLiquidation() bool {
	if x != nil && x.IsLiquidation != nil {
		return *x.IsLiquidation
	}
	return false
}

func (x *Trade) GetMakerOrderId() string {
	if x != nil && x.MakerOrderId != nil {
		return *x.MakerOrderId
	}
	return ""
}

func (x *Trade) GetTakerOrderId() string {
	if x != nil && x.TakerOrderId != nil {
		return *x.TakerOrderId
	}
	return ""
}

// Candle represents OHLCV (Open, High, Low, Close, Volume) data for a time period.
// Candles are used for charting and technical analysis.
type Candle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Asset identifier for the base currency.
	AssetId *string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3,oneof" json:"asset_id,omitempty"`
	// Asset identifier for the quote currency.
	QuoteAssetId *string `protobuf:"bytes,2,opt,name=quote_asset_id,json=quoteAssetId,proto3,oneof" json:"quote_asset_id,omitempty"`
	// Venue where this candle data is from.
	VenueId *string `protobuf:"bytes,3,opt,name=venue_id,json=venueId,proto3,oneof" json:"venue_id,omitempty"`
	// Trading pair symbol on the venue.
	VenueSymbol *string `protobuf:"bytes,4,opt,name=venue_symbol,json=venueSymbol,proto3,oneof" json:"venue_symbol,omitempty"`
	// Start timestamp of the candle period.
	Timestamp *timestamp.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
	// Candle interval/timeframe.
	Interval *CandleInterval `protobuf:"varint,6,opt,name=interval,proto3,enum=cqc.markets.v1.CandleInterval,oneof" json:"interval,omitempty"`
	// Opening price (first trade in the period).
	Open *float64 `protobuf:"fixed64,7,opt,name=open,proto3,oneof" json:"open,omitempty"`
	// Highest price during the period.
	High *float64 `protobuf:"fixed64,8,opt,name=high,proto3,oneof" json:"high,omitempty"`
	// Lowest price during the period.
	Low *float64 `protobuf:"fixed64,9,opt,name=low,proto3,oneof" json:"low,omitempty"`
	// Closing price (last trade in the period).
	Close *float64 `protobuf:"fixed64,10,opt,name=close,proto3,oneof" json:"close,omitempty"`
	// Total volume traded during the period (base currency).
	Volume *float64 `protobuf:"fixed64,11,opt,name=volume,proto3,oneof" json:"volume,omitempty"`
	// Total value traded during the period (quote currency).
	QuoteVolume *float64 `protobuf:"fixed64,12,opt,name=quote_volume,json=quoteVolume,proto3,oneof" json:"quote_volume,omitempty"`
	// Number of trades during the period.
	TradeCount *int64 `protobuf:"varint,13,opt,name=trade_count,json=tradeCount,proto3,oneof" json:"trade_count,omitempty"`
	// Volume-weighted average price for this period.
	Vwap *float64 `protobuf:"fixed64,14,opt,name=vwap,proto3,oneof" json:"vwap,omitempty"`
	// Whether this candle is closed/complete.
	// False indicates the candle is still accumulating (real-time data).
	IsClosed *bool `protobuf:"varint,15,opt,name=is_closed,json=isClosed,proto3,oneof" json:"is_closed,omitempty"`
	// Buy volume (volume from buy-side trades).
	BuyVolume *float64 `protobuf:"fixed64,16,opt,name=buy_volume,json=buyVolume,proto3,oneof" json:"buy_volume,omitempty"`
	// Sell volume (volume from sell-side trades).
	SellVolume *float64 `protobuf:"fixed64,17,opt,name=sell_volume,json=sellVolume,proto3,oneof" json:"sell_volume,omitempty"`
}

func (x *Candle) Reset() {
	*x = Candle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_markets_v1_trade_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Candle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Candle) ProtoMessage() {}

func (x *Candle) ProtoReflect() protoreflect.Message {
	mi := &file_proto_markets_v1_trade_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Candle.ProtoReflect.Descriptor instead.
func (*Candle) Descriptor() ([]byte, []int) {
	return file_proto_markets_v1_trade_proto_rawDescGZIP(), []int{1}
}

func (x *Candle) GetAssetId() string {
	if x != nil && x.AssetId != nil {
		return *x.AssetId
	}
	return ""
}

func (x *Candle) GetQuoteAssetId() string {
	if x != nil && x.QuoteAssetId != nil {
		return *x.QuoteAssetId
	}
	return ""
}

func (x *Candle) GetVenueId() string {
	if x != nil && x.VenueId != nil {
		return *x.VenueId
	}
	return ""
}

func (x *Candle) GetVenueSymbol() string {
	if x != nil && x.VenueSymbol != nil {
		return *x.VenueSymbol
	}
	return ""
}

func (x *Candle) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Candle) GetInterval() CandleInterval {
	if x != nil && x.Interval != nil {
		return *x.Interval
	}
	return CandleInterval_CANDLE_INTERVAL_UNSPECIFIED
}

func (x *Candle) GetOpen() float64 {
	if x != nil && x.Open != nil {
		return *x.Open
	}
	return 0
}

func (x *Candle) GetHigh() float64 {
	if x != nil && x.High != nil {
		return *x.High
	}
	return 0
}

func (x *Candle) GetLow() float64 {
	if x != nil && x.Low != nil {
		return *x.Low
	}
	return 0
}

func (x *Candle) GetClose() float64 {
	if x != nil && x.Close != nil {
		return *x.Close
	}
	return 0
}

func (x *Candle) GetVolume() float64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *Candle) GetQuoteVolume() float64 {
	if x != nil && x.QuoteVolume != nil {
		return *x.QuoteVolume
	}
	return 0
}

func (x *Candle) GetTradeCount() int64 {
	if x != nil && x.TradeCount != nil {
		return *x.TradeCount
	}
	return 0
}

func (x *Candle) GetVwap() float64 {
	if x != nil && x.Vwap != nil {
		return *x.Vwap
	}
	return 0
}

func (x *Candle) GetIsClosed() bool {
	if x != nil && x.IsClosed != nil {
		return *x.IsClosed
	}
	return false
}

func (x *Candle) GetBuyVolume() float64 {
	if x != nil && x.BuyVolume != nil {
		return *x.BuyVolume
	}
	return 0
}

func (x *Candle) GetSellVolume() float64 {
	if x != nil && x.SellVolume != nil {
		return *x.SellVolume
	}
	return 0
}

var File_proto_markets_v1_trade_proto protoreflect.FileDescriptor

var file_proto_markets_v1_trade_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e,
	0x63, 0x71, 0x63, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xa5, 0x06, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x05, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x07, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x64, 0x65,
	0x48, 0x08, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0b, 0x52, 0x0b, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e,
	0x69, 0x73, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x0c, 0x52, 0x0d, 0x69, 0x73, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x6d, 0x61, 0x6b, 0x65,
	0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0c, 0x74,
	0x61, 0x6b, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0xce, 0x06, 0x0a, 0x06, 0x43, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x07, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x07, 0x52, 0x04,
	0x68, 0x69, 0x67, 0x68, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x08, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x09, 0x52,
	0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0a, 0x52, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0b, 0x52, 0x0b,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x0c, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x76, 0x77, 0x61, 0x70, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x0d, 0x52, 0x04, 0x76, 0x77, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x0e, 0x52, 0x08, 0x69, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x0f, 0x52, 0x09, 0x62, 0x75, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x48, 0x10, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x68, 0x69, 0x67, 0x68, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x6f, 0x77, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x76, 0x77, 0x61, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x69, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x75,
	0x79, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x6c,
	0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2a, 0x50, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x69, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x53,
	0x49, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f,
	0x42, 0x55, 0x59, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x53,
	0x49, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x02, 0x2a, 0xa2, 0x02, 0x0a, 0x0e, 0x43,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1f, 0x0a,
	0x1b, 0x43, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18,
	0x0a, 0x14, 0x43, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41,
	0x4c, 0x5f, 0x31, 0x4d, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x41, 0x4e, 0x44,
	0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x35, 0x4d, 0x49, 0x4e,
	0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x31, 0x35, 0x4d, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x19, 0x0a,
	0x15, 0x43, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c,
	0x5f, 0x33, 0x30, 0x4d, 0x49, 0x4e, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x41, 0x4e, 0x44,
	0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x31, 0x48, 0x4f, 0x55,
	0x52, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x34, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x06, 0x12, 0x18,
	0x0a, 0x14, 0x43, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41,
	0x4c, 0x5f, 0x31, 0x44, 0x41, 0x59, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x41, 0x4e, 0x44,
	0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x31, 0x57, 0x45, 0x45,
	0x4b, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x31, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x09, 0x42,
	0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6f,
	0x6d, 0x62, 0x69, 0x6e, 0x65, 0x2d, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x2f, 0x63, 0x71,
	0x63, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x71, 0x63, 0x2f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_markets_v1_trade_proto_rawDescOnce sync.Once
	file_proto_markets_v1_trade_proto_rawDescData = file_proto_markets_v1_trade_proto_rawDesc
)

func file_proto_markets_v1_trade_proto_rawDescGZIP() []byte {
	file_proto_markets_v1_trade_proto_rawDescOnce.Do(func() {
		file_proto_markets_v1_trade_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_markets_v1_trade_proto_rawDescData)
	})
	return file_proto_markets_v1_trade_proto_rawDescData
}

var file_proto_markets_v1_trade_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_markets_v1_trade_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_markets_v1_trade_proto_goTypes = []interface{}{
	(TradeSide)(0),              // 0: cqc.markets.v1.TradeSide
	(CandleInterval)(0),         // 1: cqc.markets.v1.CandleInterval
	(*Trade)(nil),               // 2: cqc.markets.v1.Trade
	(*Candle)(nil),              // 3: cqc.markets.v1.Candle
	(*timestamp.Timestamp)(nil), // 4: google.protobuf.Timestamp
}
var file_proto_markets_v1_trade_proto_depIdxs = []int32{
	4, // 0: cqc.markets.v1.Trade.timestamp:type_name -> google.protobuf.Timestamp
	0, // 1: cqc.markets.v1.Trade.side:type_name -> cqc.markets.v1.TradeSide
	4, // 2: cqc.markets.v1.Candle.timestamp:type_name -> google.protobuf.Timestamp
	1, // 3: cqc.markets.v1.Candle.interval:type_name -> cqc.markets.v1.CandleInterval
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_proto_markets_v1_trade_proto_init() }
func file_proto_markets_v1_trade_proto_init() {
	if File_proto_markets_v1_trade_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_markets_v1_trade_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_markets_v1_trade_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Candle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_markets_v1_trade_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_proto_markets_v1_trade_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_markets_v1_trade_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_markets_v1_trade_proto_goTypes,
		DependencyIndexes: file_proto_markets_v1_trade_proto_depIdxs,
		EnumInfos:         file_proto_markets_v1_trade_proto_enumTypes,
		MessageInfos:      file_proto_markets_v1_trade_proto_msgTypes,
	}.Build()
	File_proto_markets_v1_trade_proto = out.File
	file_proto_markets_v1_trade_proto_rawDesc = nil
	file_proto_markets_v1_trade_proto_goTypes = nil
	file_proto_markets_v1_trade_proto_depIdxs = nil
}

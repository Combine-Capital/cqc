// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v3.12.4
// source: proto/markets/v1/symbol.proto

package marketsv1

import (
	_struct "github.com/golang/protobuf/ptypes/struct"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SymbolType represents the type of trading symbol/market.
type SymbolType int32

const (
	SymbolType_SYMBOL_TYPE_UNSPECIFIED SymbolType = 0
	SymbolType_SYMBOL_TYPE_SPOT        SymbolType = 1 // Spot market (immediate settlement)
	SymbolType_SYMBOL_TYPE_PERPETUAL   SymbolType = 2 // Perpetual futures (no expiry)
	SymbolType_SYMBOL_TYPE_FUTURE      SymbolType = 3 // Dated futures contract
	SymbolType_SYMBOL_TYPE_OPTION      SymbolType = 4 // Options contract
	SymbolType_SYMBOL_TYPE_MARGIN      SymbolType = 5 // Margin trading market
)

// Enum value maps for SymbolType.
var (
	SymbolType_name = map[int32]string{
		0: "SYMBOL_TYPE_UNSPECIFIED",
		1: "SYMBOL_TYPE_SPOT",
		2: "SYMBOL_TYPE_PERPETUAL",
		3: "SYMBOL_TYPE_FUTURE",
		4: "SYMBOL_TYPE_OPTION",
		5: "SYMBOL_TYPE_MARGIN",
	}
	SymbolType_value = map[string]int32{
		"SYMBOL_TYPE_UNSPECIFIED": 0,
		"SYMBOL_TYPE_SPOT":        1,
		"SYMBOL_TYPE_PERPETUAL":   2,
		"SYMBOL_TYPE_FUTURE":      3,
		"SYMBOL_TYPE_OPTION":      4,
		"SYMBOL_TYPE_MARGIN":      5,
	}
)

func (x SymbolType) Enum() *SymbolType {
	p := new(SymbolType)
	*p = x
	return p
}

func (x SymbolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SymbolType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_markets_v1_symbol_proto_enumTypes[0].Descriptor()
}

func (SymbolType) Type() protoreflect.EnumType {
	return &file_proto_markets_v1_symbol_proto_enumTypes[0]
}

func (x SymbolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SymbolType.Descriptor instead.
func (SymbolType) EnumDescriptor() ([]byte, []int) {
	return file_proto_markets_v1_symbol_proto_rawDescGZIP(), []int{0}
}

// OptionType represents whether an option is a call or put.
type OptionType int32

const (
	OptionType_OPTION_TYPE_UNSPECIFIED OptionType = 0
	OptionType_OPTION_TYPE_CALL        OptionType = 1 // Right to buy the underlying asset
	OptionType_OPTION_TYPE_PUT         OptionType = 2 // Right to sell the underlying asset
)

// Enum value maps for OptionType.
var (
	OptionType_name = map[int32]string{
		0: "OPTION_TYPE_UNSPECIFIED",
		1: "OPTION_TYPE_CALL",
		2: "OPTION_TYPE_PUT",
	}
	OptionType_value = map[string]int32{
		"OPTION_TYPE_UNSPECIFIED": 0,
		"OPTION_TYPE_CALL":        1,
		"OPTION_TYPE_PUT":         2,
	}
)

func (x OptionType) Enum() *OptionType {
	p := new(OptionType)
	*p = x
	return p
}

func (x OptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_markets_v1_symbol_proto_enumTypes[1].Descriptor()
}

func (OptionType) Type() protoreflect.EnumType {
	return &file_proto_markets_v1_symbol_proto_enumTypes[1]
}

func (x OptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OptionType.Descriptor instead.
func (OptionType) EnumDescriptor() ([]byte, []int) {
	return file_proto_markets_v1_symbol_proto_rawDescGZIP(), []int{1}
}

// Symbol represents a trading pair or market (e.g., BTC/USDT spot, ETH-PERP, BTC option).
// A Symbol combines a base asset, quote asset, and market type to define a tradeable instrument.
type Symbol struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique symbol identifier (UUID).
	// Example: "btc-usdt-spot", "eth-usd-perp", "btc-25oct24-30000-call"
	SymbolId *string `protobuf:"bytes,1,opt,name=symbol_id,json=symbolId,proto3,oneof" json:"symbol_id,omitempty"`
	// Human-readable symbol representation (e.g., "BTC/USDT", "ETH-PERP", "BTC-25OCT24-30000-C").
	Symbol *string `protobuf:"bytes,2,opt,name=symbol,proto3,oneof" json:"symbol,omitempty"`
	// Type of symbol/market.
	SymbolType *SymbolType `protobuf:"varint,3,opt,name=symbol_type,json=symbolType,proto3,enum=cqc.markets.v1.SymbolType,oneof" json:"symbol_type,omitempty"`
	// Base asset identifier (UUID) - the asset being traded.
	// For BTC/USDT, this is BTC. For ETH-PERP, this is ETH.
	BaseAssetId *string `protobuf:"bytes,4,opt,name=base_asset_id,json=baseAssetId,proto3,oneof" json:"base_asset_id,omitempty"`
	// Quote asset identifier (UUID) - the asset used for pricing.
	// For BTC/USDT, this is USDT. For BTC/USD, this is USD.
	QuoteAssetId *string `protobuf:"bytes,5,opt,name=quote_asset_id,json=quoteAssetId,proto3,oneof" json:"quote_asset_id,omitempty"`
	// Settlement asset identifier (UUID) - asset used for contract settlement.
	// For perpetuals/futures, may differ from quote asset.
	// NULL for spot markets (settlement is in base/quote assets directly).
	SettlementAssetId *string `protobuf:"bytes,6,opt,name=settlement_asset_id,json=settlementAssetId,proto3,oneof" json:"settlement_asset_id,omitempty"`
	// Minimum price increment (tick size).
	// Example: 0.01 means price can move in increments of 0.01
	TickSize *float64 `protobuf:"fixed64,7,opt,name=tick_size,json=tickSize,proto3,oneof" json:"tick_size,omitempty"`
	// Minimum order size increment (lot size) in base asset units.
	// Example: 0.001 means you can trade in increments of 0.001 BTC
	LotSize *float64 `protobuf:"fixed64,8,opt,name=lot_size,json=lotSize,proto3,oneof" json:"lot_size,omitempty"`
	// Minimum order value in quote currency.
	// Example: 10.0 means minimum order must be worth at least 10 USDT
	MinOrderSize *float64 `protobuf:"fixed64,9,opt,name=min_order_size,json=minOrderSize,proto3,oneof" json:"min_order_size,omitempty"`
	// Maximum order value in quote currency.
	// NULL if no maximum limit.
	MaxOrderSize *float64 `protobuf:"fixed64,10,opt,name=max_order_size,json=maxOrderSize,proto3,oneof" json:"max_order_size,omitempty"`
	// Minimum notional value (price * quantity) in quote currency.
	// Example: 10.0 USDT minimum notional for an order
	MinNotional *float64 `protobuf:"fixed64,11,opt,name=min_notional,json=minNotional,proto3,oneof" json:"min_notional,omitempty"`
	// Contract multiplier for futures/options.
	// Example: 1 contract = 1 BTC, multiplier = 1.0
	// NULL for spot markets.
	ContractSize *float64 `protobuf:"fixed64,12,opt,name=contract_size,json=contractSize,proto3,oneof" json:"contract_size,omitempty"`
	// Expiry timestamp for futures/options.
	// NULL for spot markets and perpetuals.
	Expiry *timestamp.Timestamp `protobuf:"bytes,13,opt,name=expiry,proto3,oneof" json:"expiry,omitempty"`
	// Strike price for options contracts.
	// NULL for non-option symbols.
	StrikePrice *float64 `protobuf:"fixed64,14,opt,name=strike_price,json=strikePrice,proto3,oneof" json:"strike_price,omitempty"`
	// Option type (CALL or PUT).
	// Only populated for option symbols.
	OptionType *OptionType `protobuf:"varint,15,opt,name=option_type,json=optionType,proto3,enum=cqc.markets.v1.OptionType,oneof" json:"option_type,omitempty"`
	// Whether this symbol is currently active and tradeable.
	IsActive *bool `protobuf:"varint,16,opt,name=is_active,json=isActive,proto3,oneof" json:"is_active,omitempty"`
	// Timestamp when this symbol was created/listed.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,17,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	// Timestamp when this symbol was last updated.
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,18,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	// Timestamp when this symbol was deactivated/delisted.
	// NULL if still active.
	DelistedAt *timestamp.Timestamp `protobuf:"bytes,19,opt,name=delisted_at,json=delistedAt,proto3,oneof" json:"delisted_at,omitempty"`
	// Additional symbol-specific metadata.
	Metadata      *_struct.Struct `protobuf:"bytes,20,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Symbol) Reset() {
	*x = Symbol{}
	mi := &file_proto_markets_v1_symbol_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Symbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Symbol) ProtoMessage() {}

func (x *Symbol) ProtoReflect() protoreflect.Message {
	mi := &file_proto_markets_v1_symbol_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Symbol.ProtoReflect.Descriptor instead.
func (*Symbol) Descriptor() ([]byte, []int) {
	return file_proto_markets_v1_symbol_proto_rawDescGZIP(), []int{0}
}

func (x *Symbol) GetSymbolId() string {
	if x != nil && x.SymbolId != nil {
		return *x.SymbolId
	}
	return ""
}

func (x *Symbol) GetSymbol() string {
	if x != nil && x.Symbol != nil {
		return *x.Symbol
	}
	return ""
}

func (x *Symbol) GetSymbolType() SymbolType {
	if x != nil && x.SymbolType != nil {
		return *x.SymbolType
	}
	return SymbolType_SYMBOL_TYPE_UNSPECIFIED
}

func (x *Symbol) GetBaseAssetId() string {
	if x != nil && x.BaseAssetId != nil {
		return *x.BaseAssetId
	}
	return ""
}

func (x *Symbol) GetQuoteAssetId() string {
	if x != nil && x.QuoteAssetId != nil {
		return *x.QuoteAssetId
	}
	return ""
}

func (x *Symbol) GetSettlementAssetId() string {
	if x != nil && x.SettlementAssetId != nil {
		return *x.SettlementAssetId
	}
	return ""
}

func (x *Symbol) GetTickSize() float64 {
	if x != nil && x.TickSize != nil {
		return *x.TickSize
	}
	return 0
}

func (x *Symbol) GetLotSize() float64 {
	if x != nil && x.LotSize != nil {
		return *x.LotSize
	}
	return 0
}

func (x *Symbol) GetMinOrderSize() float64 {
	if x != nil && x.MinOrderSize != nil {
		return *x.MinOrderSize
	}
	return 0
}

func (x *Symbol) GetMaxOrderSize() float64 {
	if x != nil && x.MaxOrderSize != nil {
		return *x.MaxOrderSize
	}
	return 0
}

func (x *Symbol) GetMinNotional() float64 {
	if x != nil && x.MinNotional != nil {
		return *x.MinNotional
	}
	return 0
}

func (x *Symbol) GetContractSize() float64 {
	if x != nil && x.ContractSize != nil {
		return *x.ContractSize
	}
	return 0
}

func (x *Symbol) GetExpiry() *timestamp.Timestamp {
	if x != nil {
		return x.Expiry
	}
	return nil
}

func (x *Symbol) GetStrikePrice() float64 {
	if x != nil && x.StrikePrice != nil {
		return *x.StrikePrice
	}
	return 0
}

func (x *Symbol) GetOptionType() OptionType {
	if x != nil && x.OptionType != nil {
		return *x.OptionType
	}
	return OptionType_OPTION_TYPE_UNSPECIFIED
}

func (x *Symbol) GetIsActive() bool {
	if x != nil && x.IsActive != nil {
		return *x.IsActive
	}
	return false
}

func (x *Symbol) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Symbol) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Symbol) GetDelistedAt() *timestamp.Timestamp {
	if x != nil {
		return x.DelistedAt
	}
	return nil
}

func (x *Symbol) GetMetadata() *_struct.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

var File_proto_markets_v1_symbol_proto protoreflect.FileDescriptor

const file_proto_markets_v1_symbol_proto_rawDesc = "" +
	"\n" +
	"\x1dproto/markets/v1/symbol.proto\x12\x0ecqc.markets.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1cgoogle/protobuf/struct.proto\"\xfc\t\n" +
	"\x06Symbol\x12 \n" +
	"\tsymbol_id\x18\x01 \x01(\tH\x00R\bsymbolId\x88\x01\x01\x12\x1b\n" +
	"\x06symbol\x18\x02 \x01(\tH\x01R\x06symbol\x88\x01\x01\x12@\n" +
	"\vsymbol_type\x18\x03 \x01(\x0e2\x1a.cqc.markets.v1.SymbolTypeH\x02R\n" +
	"symbolType\x88\x01\x01\x12'\n" +
	"\rbase_asset_id\x18\x04 \x01(\tH\x03R\vbaseAssetId\x88\x01\x01\x12)\n" +
	"\x0equote_asset_id\x18\x05 \x01(\tH\x04R\fquoteAssetId\x88\x01\x01\x123\n" +
	"\x13settlement_asset_id\x18\x06 \x01(\tH\x05R\x11settlementAssetId\x88\x01\x01\x12 \n" +
	"\ttick_size\x18\a \x01(\x01H\x06R\btickSize\x88\x01\x01\x12\x1e\n" +
	"\blot_size\x18\b \x01(\x01H\aR\alotSize\x88\x01\x01\x12)\n" +
	"\x0emin_order_size\x18\t \x01(\x01H\bR\fminOrderSize\x88\x01\x01\x12)\n" +
	"\x0emax_order_size\x18\n" +
	" \x01(\x01H\tR\fmaxOrderSize\x88\x01\x01\x12&\n" +
	"\fmin_notional\x18\v \x01(\x01H\n" +
	"R\vminNotional\x88\x01\x01\x12(\n" +
	"\rcontract_size\x18\f \x01(\x01H\vR\fcontractSize\x88\x01\x01\x127\n" +
	"\x06expiry\x18\r \x01(\v2\x1a.google.protobuf.TimestampH\fR\x06expiry\x88\x01\x01\x12&\n" +
	"\fstrike_price\x18\x0e \x01(\x01H\rR\vstrikePrice\x88\x01\x01\x12@\n" +
	"\voption_type\x18\x0f \x01(\x0e2\x1a.cqc.markets.v1.OptionTypeH\x0eR\n" +
	"optionType\x88\x01\x01\x12 \n" +
	"\tis_active\x18\x10 \x01(\bH\x0fR\bisActive\x88\x01\x01\x12>\n" +
	"\n" +
	"created_at\x18\x11 \x01(\v2\x1a.google.protobuf.TimestampH\x10R\tcreatedAt\x88\x01\x01\x12>\n" +
	"\n" +
	"updated_at\x18\x12 \x01(\v2\x1a.google.protobuf.TimestampH\x11R\tupdatedAt\x88\x01\x01\x12@\n" +
	"\vdelisted_at\x18\x13 \x01(\v2\x1a.google.protobuf.TimestampH\x12R\n" +
	"delistedAt\x88\x01\x01\x128\n" +
	"\bmetadata\x18\x14 \x01(\v2\x17.google.protobuf.StructH\x13R\bmetadata\x88\x01\x01B\f\n" +
	"\n" +
	"_symbol_idB\t\n" +
	"\a_symbolB\x0e\n" +
	"\f_symbol_typeB\x10\n" +
	"\x0e_base_asset_idB\x11\n" +
	"\x0f_quote_asset_idB\x16\n" +
	"\x14_settlement_asset_idB\f\n" +
	"\n" +
	"_tick_sizeB\v\n" +
	"\t_lot_sizeB\x11\n" +
	"\x0f_min_order_sizeB\x11\n" +
	"\x0f_max_order_sizeB\x0f\n" +
	"\r_min_notionalB\x10\n" +
	"\x0e_contract_sizeB\t\n" +
	"\a_expiryB\x0f\n" +
	"\r_strike_priceB\x0e\n" +
	"\f_option_typeB\f\n" +
	"\n" +
	"_is_activeB\r\n" +
	"\v_created_atB\r\n" +
	"\v_updated_atB\x0e\n" +
	"\f_delisted_atB\v\n" +
	"\t_metadata*\xa2\x01\n" +
	"\n" +
	"SymbolType\x12\x1b\n" +
	"\x17SYMBOL_TYPE_UNSPECIFIED\x10\x00\x12\x14\n" +
	"\x10SYMBOL_TYPE_SPOT\x10\x01\x12\x19\n" +
	"\x15SYMBOL_TYPE_PERPETUAL\x10\x02\x12\x16\n" +
	"\x12SYMBOL_TYPE_FUTURE\x10\x03\x12\x16\n" +
	"\x12SYMBOL_TYPE_OPTION\x10\x04\x12\x16\n" +
	"\x12SYMBOL_TYPE_MARGIN\x10\x05*T\n" +
	"\n" +
	"OptionType\x12\x1b\n" +
	"\x17OPTION_TYPE_UNSPECIFIED\x10\x00\x12\x14\n" +
	"\x10OPTION_TYPE_CALL\x10\x01\x12\x13\n" +
	"\x0fOPTION_TYPE_PUT\x10\x02B@Z>github.com/Combine-Capital/cqc/gen/go/cqc/markets/v1;marketsv1b\x06proto3"

var (
	file_proto_markets_v1_symbol_proto_rawDescOnce sync.Once
	file_proto_markets_v1_symbol_proto_rawDescData []byte
)

func file_proto_markets_v1_symbol_proto_rawDescGZIP() []byte {
	file_proto_markets_v1_symbol_proto_rawDescOnce.Do(func() {
		file_proto_markets_v1_symbol_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_markets_v1_symbol_proto_rawDesc), len(file_proto_markets_v1_symbol_proto_rawDesc)))
	})
	return file_proto_markets_v1_symbol_proto_rawDescData
}

var file_proto_markets_v1_symbol_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_markets_v1_symbol_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_proto_markets_v1_symbol_proto_goTypes = []any{
	(SymbolType)(0),             // 0: cqc.markets.v1.SymbolType
	(OptionType)(0),             // 1: cqc.markets.v1.OptionType
	(*Symbol)(nil),              // 2: cqc.markets.v1.Symbol
	(*timestamp.Timestamp)(nil), // 3: google.protobuf.Timestamp
	(*_struct.Struct)(nil),      // 4: google.protobuf.Struct
}
var file_proto_markets_v1_symbol_proto_depIdxs = []int32{
	0, // 0: cqc.markets.v1.Symbol.symbol_type:type_name -> cqc.markets.v1.SymbolType
	3, // 1: cqc.markets.v1.Symbol.expiry:type_name -> google.protobuf.Timestamp
	1, // 2: cqc.markets.v1.Symbol.option_type:type_name -> cqc.markets.v1.OptionType
	3, // 3: cqc.markets.v1.Symbol.created_at:type_name -> google.protobuf.Timestamp
	3, // 4: cqc.markets.v1.Symbol.updated_at:type_name -> google.protobuf.Timestamp
	3, // 5: cqc.markets.v1.Symbol.delisted_at:type_name -> google.protobuf.Timestamp
	4, // 6: cqc.markets.v1.Symbol.metadata:type_name -> google.protobuf.Struct
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_proto_markets_v1_symbol_proto_init() }
func file_proto_markets_v1_symbol_proto_init() {
	if File_proto_markets_v1_symbol_proto != nil {
		return
	}
	file_proto_markets_v1_symbol_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_markets_v1_symbol_proto_rawDesc), len(file_proto_markets_v1_symbol_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_markets_v1_symbol_proto_goTypes,
		DependencyIndexes: file_proto_markets_v1_symbol_proto_depIdxs,
		EnumInfos:         file_proto_markets_v1_symbol_proto_enumTypes,
		MessageInfos:      file_proto_markets_v1_symbol_proto_msgTypes,
	}.Build()
	File_proto_markets_v1_symbol_proto = out.File
	file_proto_markets_v1_symbol_proto_goTypes = nil
	file_proto_markets_v1_symbol_proto_depIdxs = nil
}

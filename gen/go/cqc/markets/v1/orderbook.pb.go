// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: proto/markets/v1/orderbook.proto

package marketsv1

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// OrderBookLevel represents a single price level in an order book.
type OrderBookLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Price at this level.
	Price *float64 `protobuf:"fixed64,1,opt,name=price,proto3,oneof" json:"price,omitempty"`
	// Total quantity available at this price level.
	Quantity *float64 `protobuf:"fixed64,2,opt,name=quantity,proto3,oneof" json:"quantity,omitempty"`
	// Number of individual orders at this level (if available).
	OrderCount *int32 `protobuf:"varint,3,opt,name=order_count,json=orderCount,proto3,oneof" json:"order_count,omitempty"`
}

func (x *OrderBookLevel) Reset() {
	*x = OrderBookLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_markets_v1_orderbook_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderBookLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBookLevel) ProtoMessage() {}

func (x *OrderBookLevel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_markets_v1_orderbook_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBookLevel.ProtoReflect.Descriptor instead.
func (*OrderBookLevel) Descriptor() ([]byte, []int) {
	return file_proto_markets_v1_orderbook_proto_rawDescGZIP(), []int{0}
}

func (x *OrderBookLevel) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *OrderBookLevel) GetQuantity() float64 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

func (x *OrderBookLevel) GetOrderCount() int32 {
	if x != nil && x.OrderCount != nil {
		return *x.OrderCount
	}
	return 0
}

// OrderBook represents a snapshot of the order book (bid/ask levels) for a trading pair.
// Order books show the current buy and sell orders at different price levels.
type OrderBook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Asset identifier for the base currency in the trading pair.
	AssetId *string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3,oneof" json:"asset_id,omitempty"`
	// Asset identifier for the quote currency in the trading pair.
	QuoteAssetId *string `protobuf:"bytes,2,opt,name=quote_asset_id,json=quoteAssetId,proto3,oneof" json:"quote_asset_id,omitempty"`
	// Venue where this order book is from.
	VenueId *string `protobuf:"bytes,3,opt,name=venue_id,json=venueId,proto3,oneof" json:"venue_id,omitempty"`
	// Trading pair symbol on the venue (e.g., "BTCUSDT").
	VenueSymbol *string `protobuf:"bytes,4,opt,name=venue_symbol,json=venueSymbol,proto3,oneof" json:"venue_symbol,omitempty"`
	// Timestamp of this order book snapshot.
	Timestamp *timestamp.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
	// Sequence number for ordering snapshots (if provided by venue).
	// Higher sequence numbers represent more recent snapshots.
	Sequence *int64 `protobuf:"varint,6,opt,name=sequence,proto3,oneof" json:"sequence,omitempty"`
	// Bid levels (buy orders), sorted by price descending (highest first).
	Bids []*OrderBookLevel `protobuf:"bytes,7,rep,name=bids,proto3" json:"bids,omitempty"`
	// Ask levels (sell orders), sorted by price ascending (lowest first).
	Asks []*OrderBookLevel `protobuf:"bytes,8,rep,name=asks,proto3" json:"asks,omitempty"`
	// Best bid price (highest buy order).
	BestBid *float64 `protobuf:"fixed64,9,opt,name=best_bid,json=bestBid,proto3,oneof" json:"best_bid,omitempty"`
	// Best ask price (lowest sell order).
	BestAsk *float64 `protobuf:"fixed64,10,opt,name=best_ask,json=bestAsk,proto3,oneof" json:"best_ask,omitempty"`
	// Bid-ask spread (ask - bid).
	Spread *float64 `protobuf:"fixed64,11,opt,name=spread,proto3,oneof" json:"spread,omitempty"`
	// Mid price ((best_bid + best_ask) / 2).
	MidPrice *float64 `protobuf:"fixed64,12,opt,name=mid_price,json=midPrice,proto3,oneof" json:"mid_price,omitempty"`
}

func (x *OrderBook) Reset() {
	*x = OrderBook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_markets_v1_orderbook_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBook) ProtoMessage() {}

func (x *OrderBook) ProtoReflect() protoreflect.Message {
	mi := &file_proto_markets_v1_orderbook_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBook.ProtoReflect.Descriptor instead.
func (*OrderBook) Descriptor() ([]byte, []int) {
	return file_proto_markets_v1_orderbook_proto_rawDescGZIP(), []int{1}
}

func (x *OrderBook) GetAssetId() string {
	if x != nil && x.AssetId != nil {
		return *x.AssetId
	}
	return ""
}

func (x *OrderBook) GetQuoteAssetId() string {
	if x != nil && x.QuoteAssetId != nil {
		return *x.QuoteAssetId
	}
	return ""
}

func (x *OrderBook) GetVenueId() string {
	if x != nil && x.VenueId != nil {
		return *x.VenueId
	}
	return ""
}

func (x *OrderBook) GetVenueSymbol() string {
	if x != nil && x.VenueSymbol != nil {
		return *x.VenueSymbol
	}
	return ""
}

func (x *OrderBook) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *OrderBook) GetSequence() int64 {
	if x != nil && x.Sequence != nil {
		return *x.Sequence
	}
	return 0
}

func (x *OrderBook) GetBids() []*OrderBookLevel {
	if x != nil {
		return x.Bids
	}
	return nil
}

func (x *OrderBook) GetAsks() []*OrderBookLevel {
	if x != nil {
		return x.Asks
	}
	return nil
}

func (x *OrderBook) GetBestBid() float64 {
	if x != nil && x.BestBid != nil {
		return *x.BestBid
	}
	return 0
}

func (x *OrderBook) GetBestAsk() float64 {
	if x != nil && x.BestAsk != nil {
		return *x.BestAsk
	}
	return 0
}

func (x *OrderBook) GetSpread() float64 {
	if x != nil && x.Spread != nil {
		return *x.Spread
	}
	return 0
}

func (x *OrderBook) GetMidPrice() float64 {
	if x != nil && x.MidPrice != nil {
		return *x.MidPrice
	}
	return 0
}

// MarketDepth represents aggregated liquidity depth at various price distances from mid-market.
// This provides a view of how much volume can be executed at different price levels.
type MarketDepth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Asset identifier for the base currency.
	AssetId *string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3,oneof" json:"asset_id,omitempty"`
	// Asset identifier for the quote currency.
	QuoteAssetId *string `protobuf:"bytes,2,opt,name=quote_asset_id,json=quoteAssetId,proto3,oneof" json:"quote_asset_id,omitempty"`
	// Venue where this depth data is from.
	VenueId *string `protobuf:"bytes,3,opt,name=venue_id,json=venueId,proto3,oneof" json:"venue_id,omitempty"`
	// Trading pair symbol on the venue.
	VenueSymbol *string `protobuf:"bytes,4,opt,name=venue_symbol,json=venueSymbol,proto3,oneof" json:"venue_symbol,omitempty"`
	// Timestamp of this market depth snapshot.
	Timestamp *timestamp.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
	// Current mid price (reference point for depth calculations).
	MidPrice *float64 `protobuf:"fixed64,6,opt,name=mid_price,json=midPrice,proto3,oneof" json:"mid_price,omitempty"`
	// Total bid liquidity within 1% of mid price (quote currency).
	BidDepth_1Pct *float64 `protobuf:"fixed64,7,opt,name=bid_depth_1pct,json=bidDepth1pct,proto3,oneof" json:"bid_depth_1pct,omitempty"`
	// Total ask liquidity within 1% of mid price (quote currency).
	AskDepth_1Pct *float64 `protobuf:"fixed64,8,opt,name=ask_depth_1pct,json=askDepth1pct,proto3,oneof" json:"ask_depth_1pct,omitempty"`
	// Total bid liquidity within 5% of mid price (quote currency).
	BidDepth_5Pct *float64 `protobuf:"fixed64,9,opt,name=bid_depth_5pct,json=bidDepth5pct,proto3,oneof" json:"bid_depth_5pct,omitempty"`
	// Total ask liquidity within 5% of mid price (quote currency).
	AskDepth_5Pct *float64 `protobuf:"fixed64,10,opt,name=ask_depth_5pct,json=askDepth5pct,proto3,oneof" json:"ask_depth_5pct,omitempty"`
	// Total bid liquidity within 10% of mid price (quote currency).
	BidDepth_10Pct *float64 `protobuf:"fixed64,11,opt,name=bid_depth_10pct,json=bidDepth10pct,proto3,oneof" json:"bid_depth_10pct,omitempty"`
	// Total ask liquidity within 10% of mid price (quote currency).
	AskDepth_10Pct *float64 `protobuf:"fixed64,12,opt,name=ask_depth_10pct,json=askDepth10pct,proto3,oneof" json:"ask_depth_10pct,omitempty"`
	// Cumulative bid volume in base currency.
	TotalBidVolume *float64 `protobuf:"fixed64,13,opt,name=total_bid_volume,json=totalBidVolume,proto3,oneof" json:"total_bid_volume,omitempty"`
	// Cumulative ask volume in base currency.
	TotalAskVolume *float64 `protobuf:"fixed64,14,opt,name=total_ask_volume,json=totalAskVolume,proto3,oneof" json:"total_ask_volume,omitempty"`
	// Number of bid levels in the order book.
	BidLevelCount *int32 `protobuf:"varint,15,opt,name=bid_level_count,json=bidLevelCount,proto3,oneof" json:"bid_level_count,omitempty"`
	// Number of ask levels in the order book.
	AskLevelCount *int32 `protobuf:"varint,16,opt,name=ask_level_count,json=askLevelCount,proto3,oneof" json:"ask_level_count,omitempty"`
	// Imbalance ratio: (bid_volume - ask_volume) / (bid_volume + ask_volume).
	// Ranges from -1.0 (all asks) to +1.0 (all bids).
	ImbalanceRatio *float64 `protobuf:"fixed64,17,opt,name=imbalance_ratio,json=imbalanceRatio,proto3,oneof" json:"imbalance_ratio,omitempty"`
}

func (x *MarketDepth) Reset() {
	*x = MarketDepth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_markets_v1_orderbook_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDepth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDepth) ProtoMessage() {}

func (x *MarketDepth) ProtoReflect() protoreflect.Message {
	mi := &file_proto_markets_v1_orderbook_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDepth.ProtoReflect.Descriptor instead.
func (*MarketDepth) Descriptor() ([]byte, []int) {
	return file_proto_markets_v1_orderbook_proto_rawDescGZIP(), []int{2}
}

func (x *MarketDepth) GetAssetId() string {
	if x != nil && x.AssetId != nil {
		return *x.AssetId
	}
	return ""
}

func (x *MarketDepth) GetQuoteAssetId() string {
	if x != nil && x.QuoteAssetId != nil {
		return *x.QuoteAssetId
	}
	return ""
}

func (x *MarketDepth) GetVenueId() string {
	if x != nil && x.VenueId != nil {
		return *x.VenueId
	}
	return ""
}

func (x *MarketDepth) GetVenueSymbol() string {
	if x != nil && x.VenueSymbol != nil {
		return *x.VenueSymbol
	}
	return ""
}

func (x *MarketDepth) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *MarketDepth) GetMidPrice() float64 {
	if x != nil && x.MidPrice != nil {
		return *x.MidPrice
	}
	return 0
}

func (x *MarketDepth) GetBidDepth_1Pct() float64 {
	if x != nil && x.BidDepth_1Pct != nil {
		return *x.BidDepth_1Pct
	}
	return 0
}

func (x *MarketDepth) GetAskDepth_1Pct() float64 {
	if x != nil && x.AskDepth_1Pct != nil {
		return *x.AskDepth_1Pct
	}
	return 0
}

func (x *MarketDepth) GetBidDepth_5Pct() float64 {
	if x != nil && x.BidDepth_5Pct != nil {
		return *x.BidDepth_5Pct
	}
	return 0
}

func (x *MarketDepth) GetAskDepth_5Pct() float64 {
	if x != nil && x.AskDepth_5Pct != nil {
		return *x.AskDepth_5Pct
	}
	return 0
}

func (x *MarketDepth) GetBidDepth_10Pct() float64 {
	if x != nil && x.BidDepth_10Pct != nil {
		return *x.BidDepth_10Pct
	}
	return 0
}

func (x *MarketDepth) GetAskDepth_10Pct() float64 {
	if x != nil && x.AskDepth_10Pct != nil {
		return *x.AskDepth_10Pct
	}
	return 0
}

func (x *MarketDepth) GetTotalBidVolume() float64 {
	if x != nil && x.TotalBidVolume != nil {
		return *x.TotalBidVolume
	}
	return 0
}

func (x *MarketDepth) GetTotalAskVolume() float64 {
	if x != nil && x.TotalAskVolume != nil {
		return *x.TotalAskVolume
	}
	return 0
}

func (x *MarketDepth) GetBidLevelCount() int32 {
	if x != nil && x.BidLevelCount != nil {
		return *x.BidLevelCount
	}
	return 0
}

func (x *MarketDepth) GetAskLevelCount() int32 {
	if x != nil && x.AskLevelCount != nil {
		return *x.AskLevelCount
	}
	return 0
}

func (x *MarketDepth) GetImbalanceRatio() float64 {
	if x != nil && x.ImbalanceRatio != nil {
		return *x.ImbalanceRatio
	}
	return 0
}

var File_proto_markets_v1_orderbook_proto protoreflect.FileDescriptor

var file_proto_markets_v1_orderbook_proto_rawDesc = []byte{
	0x0a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0e, 0x63, 0x71, 0x63, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x99, 0x01, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f,
	0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xf1, 0x04, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x1e, 0x0a,
	0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x0e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x0b, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x3d, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48,
	0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x05, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x32, 0x0a, 0x04, 0x62, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x71, 0x63, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x04,
	0x62, 0x69, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x04, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x65, 0x73, 0x74,
	0x5f, 0x62, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x07, 0x62, 0x65,
	0x73, 0x74, 0x42, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x65, 0x73, 0x74,
	0x5f, 0x61, 0x73, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x07, 0x52, 0x07, 0x62, 0x65,
	0x73, 0x74, 0x41, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x70, 0x72, 0x65,
	0x61, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x08, 0x52, 0x06, 0x73, 0x70, 0x72, 0x65,
	0x61, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6d, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x64, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x69, 0x64, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x73, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73,
	0x70, 0x72, 0x65, 0x61, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x69, 0x64, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x22, 0xa1, 0x08, 0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65,
	0x70, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x07, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6d, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05, 0x52, 0x08, 0x6d, 0x69, 0x64, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x62, 0x69, 0x64, 0x5f, 0x64,
	0x65, 0x70, 0x74, 0x68, 0x5f, 0x31, 0x70, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x06, 0x52, 0x0c, 0x62, 0x69, 0x64, 0x44, 0x65, 0x70, 0x74, 0x68, 0x31, 0x70, 0x63, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f,
	0x31, 0x70, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x07, 0x52, 0x0c, 0x61, 0x73,
	0x6b, 0x44, 0x65, 0x70, 0x74, 0x68, 0x31, 0x70, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x0e, 0x62, 0x69, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x35, 0x70, 0x63, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x48, 0x08, 0x52, 0x0c, 0x62, 0x69, 0x64, 0x44, 0x65, 0x70, 0x74,
	0x68, 0x35, 0x70, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x61, 0x73, 0x6b, 0x5f,
	0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x35, 0x70, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x09, 0x52, 0x0c, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x70, 0x74, 0x68, 0x35, 0x70, 0x63, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x62, 0x69, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68,
	0x5f, 0x31, 0x30, 0x70, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0a, 0x52, 0x0d,
	0x62, 0x69, 0x64, 0x44, 0x65, 0x70, 0x74, 0x68, 0x31, 0x30, 0x70, 0x63, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x31, 0x30,
	0x70, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0b, 0x52, 0x0d, 0x61, 0x73, 0x6b,
	0x44, 0x65, 0x70, 0x74, 0x68, 0x31, 0x30, 0x70, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0c, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41,
	0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x62,
	0x69, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x0d, 0x62, 0x69, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x73, 0x6b, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x0f, 0x52, 0x0d, 0x61, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x48, 0x10,
	0x52, 0x0e, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x69, 0x64,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x31, 0x70, 0x63, 0x74,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x31,
	0x70, 0x63, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x74,
	0x68, 0x5f, 0x35, 0x70, 0x63, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x73, 0x6b, 0x5f, 0x64,
	0x65, 0x70, 0x74, 0x68, 0x5f, 0x35, 0x70, 0x63, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x62, 0x69,
	0x64, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x31, 0x30, 0x70, 0x63, 0x74, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x31, 0x30, 0x70, 0x63,
	0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x69, 0x64, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x61, 0x73, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x62, 0x69, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x2d, 0x43, 0x61,
	0x70, 0x69, 0x74, 0x61, 0x6c, 0x2f, 0x63, 0x71, 0x63, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f,
	0x2f, 0x63, 0x71, 0x63, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x3b,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_proto_markets_v1_orderbook_proto_rawDescOnce sync.Once
	file_proto_markets_v1_orderbook_proto_rawDescData = file_proto_markets_v1_orderbook_proto_rawDesc
)

func file_proto_markets_v1_orderbook_proto_rawDescGZIP() []byte {
	file_proto_markets_v1_orderbook_proto_rawDescOnce.Do(func() {
		file_proto_markets_v1_orderbook_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_markets_v1_orderbook_proto_rawDescData)
	})
	return file_proto_markets_v1_orderbook_proto_rawDescData
}

var file_proto_markets_v1_orderbook_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_proto_markets_v1_orderbook_proto_goTypes = []interface{}{
	(*OrderBookLevel)(nil),      // 0: cqc.markets.v1.OrderBookLevel
	(*OrderBook)(nil),           // 1: cqc.markets.v1.OrderBook
	(*MarketDepth)(nil),         // 2: cqc.markets.v1.MarketDepth
	(*timestamp.Timestamp)(nil), // 3: google.protobuf.Timestamp
}
var file_proto_markets_v1_orderbook_proto_depIdxs = []int32{
	3, // 0: cqc.markets.v1.OrderBook.timestamp:type_name -> google.protobuf.Timestamp
	0, // 1: cqc.markets.v1.OrderBook.bids:type_name -> cqc.markets.v1.OrderBookLevel
	0, // 2: cqc.markets.v1.OrderBook.asks:type_name -> cqc.markets.v1.OrderBookLevel
	3, // 3: cqc.markets.v1.MarketDepth.timestamp:type_name -> google.protobuf.Timestamp
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_proto_markets_v1_orderbook_proto_init() }
func file_proto_markets_v1_orderbook_proto_init() {
	if File_proto_markets_v1_orderbook_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_markets_v1_orderbook_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderBookLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_markets_v1_orderbook_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderBook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_markets_v1_orderbook_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDepth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_markets_v1_orderbook_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_proto_markets_v1_orderbook_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_proto_markets_v1_orderbook_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_markets_v1_orderbook_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_markets_v1_orderbook_proto_goTypes,
		DependencyIndexes: file_proto_markets_v1_orderbook_proto_depIdxs,
		MessageInfos:      file_proto_markets_v1_orderbook_proto_msgTypes,
	}.Build()
	File_proto_markets_v1_orderbook_proto = out.File
	file_proto_markets_v1_orderbook_proto_rawDesc = nil
	file_proto_markets_v1_orderbook_proto_goTypes = nil
	file_proto_markets_v1_orderbook_proto_depIdxs = nil
}

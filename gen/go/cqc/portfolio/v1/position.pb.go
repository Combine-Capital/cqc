// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v3.12.4
// source: proto/portfolio/v1/position.proto

package portfoliov1

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Position represents a holding of a specific asset in a portfolio.
// Positions track quantity, cost basis, current value, and P&L.
type Position struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique position identifier.
	PositionId *string `protobuf:"bytes,1,opt,name=position_id,json=positionId,proto3,oneof" json:"position_id,omitempty"`
	// Portfolio identifier that owns this position.
	PortfolioId *string `protobuf:"bytes,2,opt,name=portfolio_id,json=portfolioId,proto3,oneof" json:"portfolio_id,omitempty"`
	// Asset identifier for the held asset.
	AssetId *string `protobuf:"bytes,3,opt,name=asset_id,json=assetId,proto3,oneof" json:"asset_id,omitempty"`
	// Venue where this position is held (e.g., "binance", "uniswap-v3-eth").
	// NULL for aggregated cross-venue positions.
	VenueId *string `protobuf:"bytes,4,opt,name=venue_id,json=venueId,proto3,oneof" json:"venue_id,omitempty"`
	// Quantity of the asset held (positive for long, negative for short).
	Quantity *float64 `protobuf:"fixed64,5,opt,name=quantity,proto3,oneof" json:"quantity,omitempty"`
	// Available quantity (not locked in orders).
	AvailableQuantity *float64 `protobuf:"fixed64,6,opt,name=available_quantity,json=availableQuantity,proto3,oneof" json:"available_quantity,omitempty"`
	// Locked quantity (in pending orders).
	LockedQuantity *float64 `protobuf:"fixed64,7,opt,name=locked_quantity,json=lockedQuantity,proto3,oneof" json:"locked_quantity,omitempty"`
	// Average entry price (cost basis per unit).
	EntryPrice *float64 `protobuf:"fixed64,8,opt,name=entry_price,json=entryPrice,proto3,oneof" json:"entry_price,omitempty"`
	// Quote currency for entry price and valuations.
	QuoteAssetId *string `protobuf:"bytes,9,opt,name=quote_asset_id,json=quoteAssetId,proto3,oneof" json:"quote_asset_id,omitempty"`
	// Current market price of the asset.
	CurrentPrice *float64 `protobuf:"fixed64,10,opt,name=current_price,json=currentPrice,proto3,oneof" json:"current_price,omitempty"`
	// Current market value (quantity * current_price).
	CurrentValue *float64 `protobuf:"fixed64,11,opt,name=current_value,json=currentValue,proto3,oneof" json:"current_value,omitempty"`
	// Total cost basis (quantity * entry_price).
	CostBasis *float64 `protobuf:"fixed64,12,opt,name=cost_basis,json=costBasis,proto3,oneof" json:"cost_basis,omitempty"`
	// Unrealized profit/loss (current_value - cost_basis).
	UnrealizedPnl *float64 `protobuf:"fixed64,13,opt,name=unrealized_pnl,json=unrealizedPnl,proto3,oneof" json:"unrealized_pnl,omitempty"`
	// Unrealized P&L as a percentage of cost basis.
	UnrealizedPnlPercent *float64 `protobuf:"fixed64,14,opt,name=unrealized_pnl_percent,json=unrealizedPnlPercent,proto3,oneof" json:"unrealized_pnl_percent,omitempty"`
	// Realized profit/loss from closed portions of this position.
	RealizedPnl *float64 `protobuf:"fixed64,15,opt,name=realized_pnl,json=realizedPnl,proto3,oneof" json:"realized_pnl,omitempty"`
	// Timestamp when the position was first opened.
	OpenedAt *timestamp.Timestamp `protobuf:"bytes,16,opt,name=opened_at,json=openedAt,proto3,oneof" json:"opened_at,omitempty"`
	// Timestamp of last position update (trade, price update).
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,17,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	// Timestamp when position was fully closed (NULL if still open).
	ClosedAt *timestamp.Timestamp `protobuf:"bytes,18,opt,name=closed_at,json=closedAt,proto3,oneof" json:"closed_at,omitempty"`
	// Whether this is a long position (true) or short position (false).
	IsLong *bool `protobuf:"varint,19,opt,name=is_long,json=isLong,proto3,oneof" json:"is_long,omitempty"`
	// Leverage ratio (1.0 for no leverage, 2.0 for 2x leverage).
	Leverage *float64 `protobuf:"fixed64,20,opt,name=leverage,proto3,oneof" json:"leverage,omitempty"`
	// Liquidation price (for leveraged positions).
	LiquidationPrice *float64 `protobuf:"fixed64,21,opt,name=liquidation_price,json=liquidationPrice,proto3,oneof" json:"liquidation_price,omitempty"`
	// Margin used for this position (for leveraged positions).
	Margin *float64 `protobuf:"fixed64,22,opt,name=margin,proto3,oneof" json:"margin,omitempty"`
	// Asset deployment identifier if position is on a specific chain.
	DeploymentId  *string `protobuf:"bytes,23,opt,name=deployment_id,json=deploymentId,proto3,oneof" json:"deployment_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Position) Reset() {
	*x = Position{}
	mi := &file_proto_portfolio_v1_position_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_proto_portfolio_v1_position_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_proto_portfolio_v1_position_proto_rawDescGZIP(), []int{0}
}

func (x *Position) GetPositionId() string {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return ""
}

func (x *Position) GetPortfolioId() string {
	if x != nil && x.PortfolioId != nil {
		return *x.PortfolioId
	}
	return ""
}

func (x *Position) GetAssetId() string {
	if x != nil && x.AssetId != nil {
		return *x.AssetId
	}
	return ""
}

func (x *Position) GetVenueId() string {
	if x != nil && x.VenueId != nil {
		return *x.VenueId
	}
	return ""
}

func (x *Position) GetQuantity() float64 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

func (x *Position) GetAvailableQuantity() float64 {
	if x != nil && x.AvailableQuantity != nil {
		return *x.AvailableQuantity
	}
	return 0
}

func (x *Position) GetLockedQuantity() float64 {
	if x != nil && x.LockedQuantity != nil {
		return *x.LockedQuantity
	}
	return 0
}

func (x *Position) GetEntryPrice() float64 {
	if x != nil && x.EntryPrice != nil {
		return *x.EntryPrice
	}
	return 0
}

func (x *Position) GetQuoteAssetId() string {
	if x != nil && x.QuoteAssetId != nil {
		return *x.QuoteAssetId
	}
	return ""
}

func (x *Position) GetCurrentPrice() float64 {
	if x != nil && x.CurrentPrice != nil {
		return *x.CurrentPrice
	}
	return 0
}

func (x *Position) GetCurrentValue() float64 {
	if x != nil && x.CurrentValue != nil {
		return *x.CurrentValue
	}
	return 0
}

func (x *Position) GetCostBasis() float64 {
	if x != nil && x.CostBasis != nil {
		return *x.CostBasis
	}
	return 0
}

func (x *Position) GetUnrealizedPnl() float64 {
	if x != nil && x.UnrealizedPnl != nil {
		return *x.UnrealizedPnl
	}
	return 0
}

func (x *Position) GetUnrealizedPnlPercent() float64 {
	if x != nil && x.UnrealizedPnlPercent != nil {
		return *x.UnrealizedPnlPercent
	}
	return 0
}

func (x *Position) GetRealizedPnl() float64 {
	if x != nil && x.RealizedPnl != nil {
		return *x.RealizedPnl
	}
	return 0
}

func (x *Position) GetOpenedAt() *timestamp.Timestamp {
	if x != nil {
		return x.OpenedAt
	}
	return nil
}

func (x *Position) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Position) GetClosedAt() *timestamp.Timestamp {
	if x != nil {
		return x.ClosedAt
	}
	return nil
}

func (x *Position) GetIsLong() bool {
	if x != nil && x.IsLong != nil {
		return *x.IsLong
	}
	return false
}

func (x *Position) GetLeverage() float64 {
	if x != nil && x.Leverage != nil {
		return *x.Leverage
	}
	return 0
}

func (x *Position) GetLiquidationPrice() float64 {
	if x != nil && x.LiquidationPrice != nil {
		return *x.LiquidationPrice
	}
	return 0
}

func (x *Position) GetMargin() float64 {
	if x != nil && x.Margin != nil {
		return *x.Margin
	}
	return 0
}

func (x *Position) GetDeploymentId() string {
	if x != nil && x.DeploymentId != nil {
		return *x.DeploymentId
	}
	return ""
}

// Exposure represents aggregate risk exposure across assets, venues, or dimensions.
// Used for risk management and portfolio analysis.
type Exposure struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique exposure identifier.
	ExposureId *string `protobuf:"bytes,1,opt,name=exposure_id,json=exposureId,proto3,oneof" json:"exposure_id,omitempty"`
	// Portfolio identifier.
	PortfolioId *string `protobuf:"bytes,2,opt,name=portfolio_id,json=portfolioId,proto3,oneof" json:"portfolio_id,omitempty"`
	// Dimension of exposure (e.g., "asset", "venue", "chain", "sector").
	Dimension *string `protobuf:"bytes,3,opt,name=dimension,proto3,oneof" json:"dimension,omitempty"`
	// Value within the dimension (e.g., "BTC", "binance", "ethereum").
	DimensionValue *string `protobuf:"bytes,4,opt,name=dimension_value,json=dimensionValue,proto3,oneof" json:"dimension_value,omitempty"`
	// Total gross exposure (sum of absolute values of all positions).
	GrossExposure *float64 `protobuf:"fixed64,5,opt,name=gross_exposure,json=grossExposure,proto3,oneof" json:"gross_exposure,omitempty"`
	// Total net exposure (sum of signed position values, accounts for longs/shorts).
	NetExposure *float64 `protobuf:"fixed64,6,opt,name=net_exposure,json=netExposure,proto3,oneof" json:"net_exposure,omitempty"`
	// Long exposure (sum of long position values).
	LongExposure *float64 `protobuf:"fixed64,7,opt,name=long_exposure,json=longExposure,proto3,oneof" json:"long_exposure,omitempty"`
	// Short exposure (absolute value of short position values).
	ShortExposure *float64 `protobuf:"fixed64,8,opt,name=short_exposure,json=shortExposure,proto3,oneof" json:"short_exposure,omitempty"`
	// Quote currency for exposure values.
	QuoteAssetId *string `protobuf:"bytes,9,opt,name=quote_asset_id,json=quoteAssetId,proto3,oneof" json:"quote_asset_id,omitempty"`
	// Percentage of total portfolio value.
	PortfolioWeight *float64 `protobuf:"fixed64,10,opt,name=portfolio_weight,json=portfolioWeight,proto3,oneof" json:"portfolio_weight,omitempty"`
	// Number of positions contributing to this exposure.
	PositionCount *int32 `protobuf:"varint,11,opt,name=position_count,json=positionCount,proto3,oneof" json:"position_count,omitempty"`
	// Timestamp of this exposure calculation.
	Timestamp *timestamp.Timestamp `protobuf:"bytes,12,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
	// Beta (systematic risk) relative to a benchmark (if applicable).
	Beta *float64 `protobuf:"fixed64,13,opt,name=beta,proto3,oneof" json:"beta,omitempty"`
	// Value at Risk (VaR) for this exposure at a confidence level.
	ValueAtRisk *float64 `protobuf:"fixed64,14,opt,name=value_at_risk,json=valueAtRisk,proto3,oneof" json:"value_at_risk,omitempty"`
	// VaR confidence level (e.g., 0.95 for 95%).
	VarConfidenceLevel *float64 `protobuf:"fixed64,15,opt,name=var_confidence_level,json=varConfidenceLevel,proto3,oneof" json:"var_confidence_level,omitempty"`
	// Expected shortfall (Conditional VaR) beyond the VaR threshold.
	ExpectedShortfall *float64 `protobuf:"fixed64,16,opt,name=expected_shortfall,json=expectedShortfall,proto3,oneof" json:"expected_shortfall,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Exposure) Reset() {
	*x = Exposure{}
	mi := &file_proto_portfolio_v1_position_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Exposure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exposure) ProtoMessage() {}

func (x *Exposure) ProtoReflect() protoreflect.Message {
	mi := &file_proto_portfolio_v1_position_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Exposure.ProtoReflect.Descriptor instead.
func (*Exposure) Descriptor() ([]byte, []int) {
	return file_proto_portfolio_v1_position_proto_rawDescGZIP(), []int{1}
}

func (x *Exposure) GetExposureId() string {
	if x != nil && x.ExposureId != nil {
		return *x.ExposureId
	}
	return ""
}

func (x *Exposure) GetPortfolioId() string {
	if x != nil && x.PortfolioId != nil {
		return *x.PortfolioId
	}
	return ""
}

func (x *Exposure) GetDimension() string {
	if x != nil && x.Dimension != nil {
		return *x.Dimension
	}
	return ""
}

func (x *Exposure) GetDimensionValue() string {
	if x != nil && x.DimensionValue != nil {
		return *x.DimensionValue
	}
	return ""
}

func (x *Exposure) GetGrossExposure() float64 {
	if x != nil && x.GrossExposure != nil {
		return *x.GrossExposure
	}
	return 0
}

func (x *Exposure) GetNetExposure() float64 {
	if x != nil && x.NetExposure != nil {
		return *x.NetExposure
	}
	return 0
}

func (x *Exposure) GetLongExposure() float64 {
	if x != nil && x.LongExposure != nil {
		return *x.LongExposure
	}
	return 0
}

func (x *Exposure) GetShortExposure() float64 {
	if x != nil && x.ShortExposure != nil {
		return *x.ShortExposure
	}
	return 0
}

func (x *Exposure) GetQuoteAssetId() string {
	if x != nil && x.QuoteAssetId != nil {
		return *x.QuoteAssetId
	}
	return ""
}

func (x *Exposure) GetPortfolioWeight() float64 {
	if x != nil && x.PortfolioWeight != nil {
		return *x.PortfolioWeight
	}
	return 0
}

func (x *Exposure) GetPositionCount() int32 {
	if x != nil && x.PositionCount != nil {
		return *x.PositionCount
	}
	return 0
}

func (x *Exposure) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Exposure) GetBeta() float64 {
	if x != nil && x.Beta != nil {
		return *x.Beta
	}
	return 0
}

func (x *Exposure) GetValueAtRisk() float64 {
	if x != nil && x.ValueAtRisk != nil {
		return *x.ValueAtRisk
	}
	return 0
}

func (x *Exposure) GetVarConfidenceLevel() float64 {
	if x != nil && x.VarConfidenceLevel != nil {
		return *x.VarConfidenceLevel
	}
	return 0
}

func (x *Exposure) GetExpectedShortfall() float64 {
	if x != nil && x.ExpectedShortfall != nil {
		return *x.ExpectedShortfall
	}
	return 0
}

var File_proto_portfolio_v1_position_proto protoreflect.FileDescriptor

const file_proto_portfolio_v1_position_proto_rawDesc = "" +
	"\n" +
	"!proto/portfolio/v1/position.proto\x12\x10cqc.portfolio.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"\xe6\n" +
	"\n" +
	"\bPosition\x12$\n" +
	"\vposition_id\x18\x01 \x01(\tH\x00R\n" +
	"positionId\x88\x01\x01\x12&\n" +
	"\fportfolio_id\x18\x02 \x01(\tH\x01R\vportfolioId\x88\x01\x01\x12\x1e\n" +
	"\basset_id\x18\x03 \x01(\tH\x02R\aassetId\x88\x01\x01\x12\x1e\n" +
	"\bvenue_id\x18\x04 \x01(\tH\x03R\avenueId\x88\x01\x01\x12\x1f\n" +
	"\bquantity\x18\x05 \x01(\x01H\x04R\bquantity\x88\x01\x01\x122\n" +
	"\x12available_quantity\x18\x06 \x01(\x01H\x05R\x11availableQuantity\x88\x01\x01\x12,\n" +
	"\x0flocked_quantity\x18\a \x01(\x01H\x06R\x0elockedQuantity\x88\x01\x01\x12$\n" +
	"\ventry_price\x18\b \x01(\x01H\aR\n" +
	"entryPrice\x88\x01\x01\x12)\n" +
	"\x0equote_asset_id\x18\t \x01(\tH\bR\fquoteAssetId\x88\x01\x01\x12(\n" +
	"\rcurrent_price\x18\n" +
	" \x01(\x01H\tR\fcurrentPrice\x88\x01\x01\x12(\n" +
	"\rcurrent_value\x18\v \x01(\x01H\n" +
	"R\fcurrentValue\x88\x01\x01\x12\"\n" +
	"\n" +
	"cost_basis\x18\f \x01(\x01H\vR\tcostBasis\x88\x01\x01\x12*\n" +
	"\x0eunrealized_pnl\x18\r \x01(\x01H\fR\runrealizedPnl\x88\x01\x01\x129\n" +
	"\x16unrealized_pnl_percent\x18\x0e \x01(\x01H\rR\x14unrealizedPnlPercent\x88\x01\x01\x12&\n" +
	"\frealized_pnl\x18\x0f \x01(\x01H\x0eR\vrealizedPnl\x88\x01\x01\x12<\n" +
	"\topened_at\x18\x10 \x01(\v2\x1a.google.protobuf.TimestampH\x0fR\bopenedAt\x88\x01\x01\x12>\n" +
	"\n" +
	"updated_at\x18\x11 \x01(\v2\x1a.google.protobuf.TimestampH\x10R\tupdatedAt\x88\x01\x01\x12<\n" +
	"\tclosed_at\x18\x12 \x01(\v2\x1a.google.protobuf.TimestampH\x11R\bclosedAt\x88\x01\x01\x12\x1c\n" +
	"\ais_long\x18\x13 \x01(\bH\x12R\x06isLong\x88\x01\x01\x12\x1f\n" +
	"\bleverage\x18\x14 \x01(\x01H\x13R\bleverage\x88\x01\x01\x120\n" +
	"\x11liquidation_price\x18\x15 \x01(\x01H\x14R\x10liquidationPrice\x88\x01\x01\x12\x1b\n" +
	"\x06margin\x18\x16 \x01(\x01H\x15R\x06margin\x88\x01\x01\x12(\n" +
	"\rdeployment_id\x18\x17 \x01(\tH\x16R\fdeploymentId\x88\x01\x01B\x0e\n" +
	"\f_position_idB\x0f\n" +
	"\r_portfolio_idB\v\n" +
	"\t_asset_idB\v\n" +
	"\t_venue_idB\v\n" +
	"\t_quantityB\x15\n" +
	"\x13_available_quantityB\x12\n" +
	"\x10_locked_quantityB\x0e\n" +
	"\f_entry_priceB\x11\n" +
	"\x0f_quote_asset_idB\x10\n" +
	"\x0e_current_priceB\x10\n" +
	"\x0e_current_valueB\r\n" +
	"\v_cost_basisB\x11\n" +
	"\x0f_unrealized_pnlB\x19\n" +
	"\x17_unrealized_pnl_percentB\x0f\n" +
	"\r_realized_pnlB\f\n" +
	"\n" +
	"_opened_atB\r\n" +
	"\v_updated_atB\f\n" +
	"\n" +
	"_closed_atB\n" +
	"\n" +
	"\b_is_longB\v\n" +
	"\t_leverageB\x14\n" +
	"\x12_liquidation_priceB\t\n" +
	"\a_marginB\x10\n" +
	"\x0e_deployment_id\"\xe6\a\n" +
	"\bExposure\x12$\n" +
	"\vexposure_id\x18\x01 \x01(\tH\x00R\n" +
	"exposureId\x88\x01\x01\x12&\n" +
	"\fportfolio_id\x18\x02 \x01(\tH\x01R\vportfolioId\x88\x01\x01\x12!\n" +
	"\tdimension\x18\x03 \x01(\tH\x02R\tdimension\x88\x01\x01\x12,\n" +
	"\x0fdimension_value\x18\x04 \x01(\tH\x03R\x0edimensionValue\x88\x01\x01\x12*\n" +
	"\x0egross_exposure\x18\x05 \x01(\x01H\x04R\rgrossExposure\x88\x01\x01\x12&\n" +
	"\fnet_exposure\x18\x06 \x01(\x01H\x05R\vnetExposure\x88\x01\x01\x12(\n" +
	"\rlong_exposure\x18\a \x01(\x01H\x06R\flongExposure\x88\x01\x01\x12*\n" +
	"\x0eshort_exposure\x18\b \x01(\x01H\aR\rshortExposure\x88\x01\x01\x12)\n" +
	"\x0equote_asset_id\x18\t \x01(\tH\bR\fquoteAssetId\x88\x01\x01\x12.\n" +
	"\x10portfolio_weight\x18\n" +
	" \x01(\x01H\tR\x0fportfolioWeight\x88\x01\x01\x12*\n" +
	"\x0eposition_count\x18\v \x01(\x05H\n" +
	"R\rpositionCount\x88\x01\x01\x12=\n" +
	"\ttimestamp\x18\f \x01(\v2\x1a.google.protobuf.TimestampH\vR\ttimestamp\x88\x01\x01\x12\x17\n" +
	"\x04beta\x18\r \x01(\x01H\fR\x04beta\x88\x01\x01\x12'\n" +
	"\rvalue_at_risk\x18\x0e \x01(\x01H\rR\vvalueAtRisk\x88\x01\x01\x125\n" +
	"\x14var_confidence_level\x18\x0f \x01(\x01H\x0eR\x12varConfidenceLevel\x88\x01\x01\x122\n" +
	"\x12expected_shortfall\x18\x10 \x01(\x01H\x0fR\x11expectedShortfall\x88\x01\x01B\x0e\n" +
	"\f_exposure_idB\x0f\n" +
	"\r_portfolio_idB\f\n" +
	"\n" +
	"_dimensionB\x12\n" +
	"\x10_dimension_valueB\x11\n" +
	"\x0f_gross_exposureB\x0f\n" +
	"\r_net_exposureB\x10\n" +
	"\x0e_long_exposureB\x11\n" +
	"\x0f_short_exposureB\x11\n" +
	"\x0f_quote_asset_idB\x13\n" +
	"\x11_portfolio_weightB\x11\n" +
	"\x0f_position_countB\f\n" +
	"\n" +
	"_timestampB\a\n" +
	"\x05_betaB\x10\n" +
	"\x0e_value_at_riskB\x17\n" +
	"\x15_var_confidence_levelB\x15\n" +
	"\x13_expected_shortfallBDZBgithub.com/Combine-Capital/cqc/gen/go/cqc/portfolio/v1;portfoliov1b\x06proto3"

var (
	file_proto_portfolio_v1_position_proto_rawDescOnce sync.Once
	file_proto_portfolio_v1_position_proto_rawDescData []byte
)

func file_proto_portfolio_v1_position_proto_rawDescGZIP() []byte {
	file_proto_portfolio_v1_position_proto_rawDescOnce.Do(func() {
		file_proto_portfolio_v1_position_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_portfolio_v1_position_proto_rawDesc), len(file_proto_portfolio_v1_position_proto_rawDesc)))
	})
	return file_proto_portfolio_v1_position_proto_rawDescData
}

var file_proto_portfolio_v1_position_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_portfolio_v1_position_proto_goTypes = []any{
	(*Position)(nil),            // 0: cqc.portfolio.v1.Position
	(*Exposure)(nil),            // 1: cqc.portfolio.v1.Exposure
	(*timestamp.Timestamp)(nil), // 2: google.protobuf.Timestamp
}
var file_proto_portfolio_v1_position_proto_depIdxs = []int32{
	2, // 0: cqc.portfolio.v1.Position.opened_at:type_name -> google.protobuf.Timestamp
	2, // 1: cqc.portfolio.v1.Position.updated_at:type_name -> google.protobuf.Timestamp
	2, // 2: cqc.portfolio.v1.Position.closed_at:type_name -> google.protobuf.Timestamp
	2, // 3: cqc.portfolio.v1.Exposure.timestamp:type_name -> google.protobuf.Timestamp
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_proto_portfolio_v1_position_proto_init() }
func file_proto_portfolio_v1_position_proto_init() {
	if File_proto_portfolio_v1_position_proto != nil {
		return
	}
	file_proto_portfolio_v1_position_proto_msgTypes[0].OneofWrappers = []any{}
	file_proto_portfolio_v1_position_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_portfolio_v1_position_proto_rawDesc), len(file_proto_portfolio_v1_position_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_portfolio_v1_position_proto_goTypes,
		DependencyIndexes: file_proto_portfolio_v1_position_proto_depIdxs,
		MessageInfos:      file_proto_portfolio_v1_position_proto_msgTypes,
	}.Build()
	File_proto_portfolio_v1_position_proto = out.File
	file_proto_portfolio_v1_position_proto_goTypes = nil
	file_proto_portfolio_v1_position_proto_depIdxs = nil
}

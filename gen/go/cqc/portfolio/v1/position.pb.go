// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: proto/portfolio/v1/position.proto

package portfoliov1

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Position represents a holding of a specific asset in a portfolio.
// Positions track quantity, cost basis, current value, and P&L.
type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique position identifier.
	PositionId *string `protobuf:"bytes,1,opt,name=position_id,json=positionId,proto3,oneof" json:"position_id,omitempty"`
	// Portfolio identifier that owns this position.
	PortfolioId *string `protobuf:"bytes,2,opt,name=portfolio_id,json=portfolioId,proto3,oneof" json:"portfolio_id,omitempty"`
	// Asset identifier for the held asset.
	AssetId *string `protobuf:"bytes,3,opt,name=asset_id,json=assetId,proto3,oneof" json:"asset_id,omitempty"`
	// Venue where this position is held (e.g., "binance", "uniswap-v3-eth").
	// NULL for aggregated cross-venue positions.
	VenueId *string `protobuf:"bytes,4,opt,name=venue_id,json=venueId,proto3,oneof" json:"venue_id,omitempty"`
	// Quantity of the asset held (positive for long, negative for short).
	Quantity *float64 `protobuf:"fixed64,5,opt,name=quantity,proto3,oneof" json:"quantity,omitempty"`
	// Available quantity (not locked in orders).
	AvailableQuantity *float64 `protobuf:"fixed64,6,opt,name=available_quantity,json=availableQuantity,proto3,oneof" json:"available_quantity,omitempty"`
	// Locked quantity (in pending orders).
	LockedQuantity *float64 `protobuf:"fixed64,7,opt,name=locked_quantity,json=lockedQuantity,proto3,oneof" json:"locked_quantity,omitempty"`
	// Average entry price (cost basis per unit).
	EntryPrice *float64 `protobuf:"fixed64,8,opt,name=entry_price,json=entryPrice,proto3,oneof" json:"entry_price,omitempty"`
	// Quote currency for entry price and valuations.
	QuoteAssetId *string `protobuf:"bytes,9,opt,name=quote_asset_id,json=quoteAssetId,proto3,oneof" json:"quote_asset_id,omitempty"`
	// Current market price of the asset.
	CurrentPrice *float64 `protobuf:"fixed64,10,opt,name=current_price,json=currentPrice,proto3,oneof" json:"current_price,omitempty"`
	// Current market value (quantity * current_price).
	CurrentValue *float64 `protobuf:"fixed64,11,opt,name=current_value,json=currentValue,proto3,oneof" json:"current_value,omitempty"`
	// Total cost basis (quantity * entry_price).
	CostBasis *float64 `protobuf:"fixed64,12,opt,name=cost_basis,json=costBasis,proto3,oneof" json:"cost_basis,omitempty"`
	// Unrealized profit/loss (current_value - cost_basis).
	UnrealizedPnl *float64 `protobuf:"fixed64,13,opt,name=unrealized_pnl,json=unrealizedPnl,proto3,oneof" json:"unrealized_pnl,omitempty"`
	// Unrealized P&L as a percentage of cost basis.
	UnrealizedPnlPercent *float64 `protobuf:"fixed64,14,opt,name=unrealized_pnl_percent,json=unrealizedPnlPercent,proto3,oneof" json:"unrealized_pnl_percent,omitempty"`
	// Realized profit/loss from closed portions of this position.
	RealizedPnl *float64 `protobuf:"fixed64,15,opt,name=realized_pnl,json=realizedPnl,proto3,oneof" json:"realized_pnl,omitempty"`
	// Timestamp when the position was first opened.
	OpenedAt *timestamp.Timestamp `protobuf:"bytes,16,opt,name=opened_at,json=openedAt,proto3,oneof" json:"opened_at,omitempty"`
	// Timestamp of last position update (trade, price update).
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,17,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	// Timestamp when position was fully closed (NULL if still open).
	ClosedAt *timestamp.Timestamp `protobuf:"bytes,18,opt,name=closed_at,json=closedAt,proto3,oneof" json:"closed_at,omitempty"`
	// Whether this is a long position (true) or short position (false).
	IsLong *bool `protobuf:"varint,19,opt,name=is_long,json=isLong,proto3,oneof" json:"is_long,omitempty"`
	// Leverage ratio (1.0 for no leverage, 2.0 for 2x leverage).
	Leverage *float64 `protobuf:"fixed64,20,opt,name=leverage,proto3,oneof" json:"leverage,omitempty"`
	// Liquidation price (for leveraged positions).
	LiquidationPrice *float64 `protobuf:"fixed64,21,opt,name=liquidation_price,json=liquidationPrice,proto3,oneof" json:"liquidation_price,omitempty"`
	// Margin used for this position (for leveraged positions).
	Margin *float64 `protobuf:"fixed64,22,opt,name=margin,proto3,oneof" json:"margin,omitempty"`
	// Asset deployment identifier if position is on a specific chain.
	DeploymentId *string `protobuf:"bytes,23,opt,name=deployment_id,json=deploymentId,proto3,oneof" json:"deployment_id,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_portfolio_v1_position_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_proto_portfolio_v1_position_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_proto_portfolio_v1_position_proto_rawDescGZIP(), []int{0}
}

func (x *Position) GetPositionId() string {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return ""
}

func (x *Position) GetPortfolioId() string {
	if x != nil && x.PortfolioId != nil {
		return *x.PortfolioId
	}
	return ""
}

func (x *Position) GetAssetId() string {
	if x != nil && x.AssetId != nil {
		return *x.AssetId
	}
	return ""
}

func (x *Position) GetVenueId() string {
	if x != nil && x.VenueId != nil {
		return *x.VenueId
	}
	return ""
}

func (x *Position) GetQuantity() float64 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

func (x *Position) GetAvailableQuantity() float64 {
	if x != nil && x.AvailableQuantity != nil {
		return *x.AvailableQuantity
	}
	return 0
}

func (x *Position) GetLockedQuantity() float64 {
	if x != nil && x.LockedQuantity != nil {
		return *x.LockedQuantity
	}
	return 0
}

func (x *Position) GetEntryPrice() float64 {
	if x != nil && x.EntryPrice != nil {
		return *x.EntryPrice
	}
	return 0
}

func (x *Position) GetQuoteAssetId() string {
	if x != nil && x.QuoteAssetId != nil {
		return *x.QuoteAssetId
	}
	return ""
}

func (x *Position) GetCurrentPrice() float64 {
	if x != nil && x.CurrentPrice != nil {
		return *x.CurrentPrice
	}
	return 0
}

func (x *Position) GetCurrentValue() float64 {
	if x != nil && x.CurrentValue != nil {
		return *x.CurrentValue
	}
	return 0
}

func (x *Position) GetCostBasis() float64 {
	if x != nil && x.CostBasis != nil {
		return *x.CostBasis
	}
	return 0
}

func (x *Position) GetUnrealizedPnl() float64 {
	if x != nil && x.UnrealizedPnl != nil {
		return *x.UnrealizedPnl
	}
	return 0
}

func (x *Position) GetUnrealizedPnlPercent() float64 {
	if x != nil && x.UnrealizedPnlPercent != nil {
		return *x.UnrealizedPnlPercent
	}
	return 0
}

func (x *Position) GetRealizedPnl() float64 {
	if x != nil && x.RealizedPnl != nil {
		return *x.RealizedPnl
	}
	return 0
}

func (x *Position) GetOpenedAt() *timestamp.Timestamp {
	if x != nil {
		return x.OpenedAt
	}
	return nil
}

func (x *Position) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Position) GetClosedAt() *timestamp.Timestamp {
	if x != nil {
		return x.ClosedAt
	}
	return nil
}

func (x *Position) GetIsLong() bool {
	if x != nil && x.IsLong != nil {
		return *x.IsLong
	}
	return false
}

func (x *Position) GetLeverage() float64 {
	if x != nil && x.Leverage != nil {
		return *x.Leverage
	}
	return 0
}

func (x *Position) GetLiquidationPrice() float64 {
	if x != nil && x.LiquidationPrice != nil {
		return *x.LiquidationPrice
	}
	return 0
}

func (x *Position) GetMargin() float64 {
	if x != nil && x.Margin != nil {
		return *x.Margin
	}
	return 0
}

func (x *Position) GetDeploymentId() string {
	if x != nil && x.DeploymentId != nil {
		return *x.DeploymentId
	}
	return ""
}

// Exposure represents aggregate risk exposure across assets, venues, or dimensions.
// Used for risk management and portfolio analysis.
type Exposure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique exposure identifier.
	ExposureId *string `protobuf:"bytes,1,opt,name=exposure_id,json=exposureId,proto3,oneof" json:"exposure_id,omitempty"`
	// Portfolio identifier.
	PortfolioId *string `protobuf:"bytes,2,opt,name=portfolio_id,json=portfolioId,proto3,oneof" json:"portfolio_id,omitempty"`
	// Dimension of exposure (e.g., "asset", "venue", "chain", "sector").
	Dimension *string `protobuf:"bytes,3,opt,name=dimension,proto3,oneof" json:"dimension,omitempty"`
	// Value within the dimension (e.g., "BTC", "binance", "ethereum").
	DimensionValue *string `protobuf:"bytes,4,opt,name=dimension_value,json=dimensionValue,proto3,oneof" json:"dimension_value,omitempty"`
	// Total gross exposure (sum of absolute values of all positions).
	GrossExposure *float64 `protobuf:"fixed64,5,opt,name=gross_exposure,json=grossExposure,proto3,oneof" json:"gross_exposure,omitempty"`
	// Total net exposure (sum of signed position values, accounts for longs/shorts).
	NetExposure *float64 `protobuf:"fixed64,6,opt,name=net_exposure,json=netExposure,proto3,oneof" json:"net_exposure,omitempty"`
	// Long exposure (sum of long position values).
	LongExposure *float64 `protobuf:"fixed64,7,opt,name=long_exposure,json=longExposure,proto3,oneof" json:"long_exposure,omitempty"`
	// Short exposure (absolute value of short position values).
	ShortExposure *float64 `protobuf:"fixed64,8,opt,name=short_exposure,json=shortExposure,proto3,oneof" json:"short_exposure,omitempty"`
	// Quote currency for exposure values.
	QuoteAssetId *string `protobuf:"bytes,9,opt,name=quote_asset_id,json=quoteAssetId,proto3,oneof" json:"quote_asset_id,omitempty"`
	// Percentage of total portfolio value.
	PortfolioWeight *float64 `protobuf:"fixed64,10,opt,name=portfolio_weight,json=portfolioWeight,proto3,oneof" json:"portfolio_weight,omitempty"`
	// Number of positions contributing to this exposure.
	PositionCount *int32 `protobuf:"varint,11,opt,name=position_count,json=positionCount,proto3,oneof" json:"position_count,omitempty"`
	// Timestamp of this exposure calculation.
	Timestamp *timestamp.Timestamp `protobuf:"bytes,12,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
	// Beta (systematic risk) relative to a benchmark (if applicable).
	Beta *float64 `protobuf:"fixed64,13,opt,name=beta,proto3,oneof" json:"beta,omitempty"`
	// Value at Risk (VaR) for this exposure at a confidence level.
	ValueAtRisk *float64 `protobuf:"fixed64,14,opt,name=value_at_risk,json=valueAtRisk,proto3,oneof" json:"value_at_risk,omitempty"`
	// VaR confidence level (e.g., 0.95 for 95%).
	VarConfidenceLevel *float64 `protobuf:"fixed64,15,opt,name=var_confidence_level,json=varConfidenceLevel,proto3,oneof" json:"var_confidence_level,omitempty"`
	// Expected shortfall (Conditional VaR) beyond the VaR threshold.
	ExpectedShortfall *float64 `protobuf:"fixed64,16,opt,name=expected_shortfall,json=expectedShortfall,proto3,oneof" json:"expected_shortfall,omitempty"`
}

func (x *Exposure) Reset() {
	*x = Exposure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_portfolio_v1_position_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Exposure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exposure) ProtoMessage() {}

func (x *Exposure) ProtoReflect() protoreflect.Message {
	mi := &file_proto_portfolio_v1_position_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Exposure.ProtoReflect.Descriptor instead.
func (*Exposure) Descriptor() ([]byte, []int) {
	return file_proto_portfolio_v1_position_proto_rawDescGZIP(), []int{1}
}

func (x *Exposure) GetExposureId() string {
	if x != nil && x.ExposureId != nil {
		return *x.ExposureId
	}
	return ""
}

func (x *Exposure) GetPortfolioId() string {
	if x != nil && x.PortfolioId != nil {
		return *x.PortfolioId
	}
	return ""
}

func (x *Exposure) GetDimension() string {
	if x != nil && x.Dimension != nil {
		return *x.Dimension
	}
	return ""
}

func (x *Exposure) GetDimensionValue() string {
	if x != nil && x.DimensionValue != nil {
		return *x.DimensionValue
	}
	return ""
}

func (x *Exposure) GetGrossExposure() float64 {
	if x != nil && x.GrossExposure != nil {
		return *x.GrossExposure
	}
	return 0
}

func (x *Exposure) GetNetExposure() float64 {
	if x != nil && x.NetExposure != nil {
		return *x.NetExposure
	}
	return 0
}

func (x *Exposure) GetLongExposure() float64 {
	if x != nil && x.LongExposure != nil {
		return *x.LongExposure
	}
	return 0
}

func (x *Exposure) GetShortExposure() float64 {
	if x != nil && x.ShortExposure != nil {
		return *x.ShortExposure
	}
	return 0
}

func (x *Exposure) GetQuoteAssetId() string {
	if x != nil && x.QuoteAssetId != nil {
		return *x.QuoteAssetId
	}
	return ""
}

func (x *Exposure) GetPortfolioWeight() float64 {
	if x != nil && x.PortfolioWeight != nil {
		return *x.PortfolioWeight
	}
	return 0
}

func (x *Exposure) GetPositionCount() int32 {
	if x != nil && x.PositionCount != nil {
		return *x.PositionCount
	}
	return 0
}

func (x *Exposure) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Exposure) GetBeta() float64 {
	if x != nil && x.Beta != nil {
		return *x.Beta
	}
	return 0
}

func (x *Exposure) GetValueAtRisk() float64 {
	if x != nil && x.ValueAtRisk != nil {
		return *x.ValueAtRisk
	}
	return 0
}

func (x *Exposure) GetVarConfidenceLevel() float64 {
	if x != nil && x.VarConfidenceLevel != nil {
		return *x.VarConfidenceLevel
	}
	return 0
}

func (x *Exposure) GetExpectedShortfall() float64 {
	if x != nil && x.ExpectedShortfall != nil {
		return *x.ExpectedShortfall
	}
	return 0
}

var File_proto_portfolio_v1_position_proto protoreflect.FileDescriptor

var file_proto_portfolio_v1_position_proto_rawDesc = []byte{
	0x0a, 0x21, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69,
	0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x10, 0x63, 0x71, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe6, 0x0a, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x6f, 0x72,
	0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05,
	0x52, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x06, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x07, 0x52, 0x0a, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x08, 0x52, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x09, 0x52, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0a, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x73,
	0x74, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0b, 0x52,
	0x09, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x61, 0x73, 0x69, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x6e, 0x6c, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0c, 0x52, 0x0d, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x50, 0x6e, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x75, 0x6e, 0x72,
	0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x6e, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0d, 0x52, 0x14, 0x75, 0x6e, 0x72,
	0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x6e, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x5f, 0x70, 0x6e, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0e, 0x52, 0x0b, 0x72, 0x65,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x6e, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x09,
	0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x0f, 0x52, 0x08, 0x6f,
	0x70, 0x65, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x10, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x11, 0x52, 0x08, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c,
	0x6f, 0x6e, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x48, 0x12, 0x52, 0x06, 0x69, 0x73, 0x4c,
	0x6f, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x48, 0x13, 0x52, 0x08, 0x6c, 0x65, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x14, 0x52, 0x10, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x48, 0x15, 0x52, 0x06, 0x6d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52,
	0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x69,
	0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x75, 0x6e,
	0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x6e, 0x6c, 0x42, 0x19, 0x0a, 0x17,
	0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x6e, 0x6c, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x6e, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x70, 0x65,
	0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22,
	0xe6, 0x07, 0x0a, 0x08, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0b,
	0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74,
	0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x64, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a,
	0x0f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0e, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x67,
	0x72, 0x6f, 0x73, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x45, 0x78, 0x70, 0x6f,
	0x73, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x5f, 0x65,
	0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05, 0x52,
	0x0b, 0x6e, 0x65, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x0c, 0x6c, 0x6f, 0x6e, 0x67, 0x45, 0x78,
	0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x07, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75,
	0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52,
	0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x2e, 0x0a, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x09, 0x52, 0x0f, 0x70, 0x6f,
	0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x0b, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x62,
	0x65, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0c, 0x52, 0x04, 0x62, 0x65, 0x74,
	0x61, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x74,
	0x5f, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0d, 0x52, 0x0b, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x41, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a,
	0x14, 0x76, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0e, 0x52, 0x12, 0x76,
	0x61, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x66, 0x61, 0x6c, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x0f, 0x52, 0x11, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x66, 0x61, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x70,
	0x6f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72,
	0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x6f,
	0x73, 0x75, 0x72, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x62, 0x65, 0x74, 0x61, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x61, 0x74, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x76, 0x61, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x66, 0x61, 0x6c, 0x6c, 0x42, 0x44, 0x5a, 0x42, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x2d, 0x43,
	0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x2f, 0x63, 0x71, 0x63, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67,
	0x6f, 0x2f, 0x63, 0x71, 0x63, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x2f,
	0x76, 0x31, 0x3b, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_portfolio_v1_position_proto_rawDescOnce sync.Once
	file_proto_portfolio_v1_position_proto_rawDescData = file_proto_portfolio_v1_position_proto_rawDesc
)

func file_proto_portfolio_v1_position_proto_rawDescGZIP() []byte {
	file_proto_portfolio_v1_position_proto_rawDescOnce.Do(func() {
		file_proto_portfolio_v1_position_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_portfolio_v1_position_proto_rawDescData)
	})
	return file_proto_portfolio_v1_position_proto_rawDescData
}

var file_proto_portfolio_v1_position_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_portfolio_v1_position_proto_goTypes = []interface{}{
	(*Position)(nil),            // 0: cqc.portfolio.v1.Position
	(*Exposure)(nil),            // 1: cqc.portfolio.v1.Exposure
	(*timestamp.Timestamp)(nil), // 2: google.protobuf.Timestamp
}
var file_proto_portfolio_v1_position_proto_depIdxs = []int32{
	2, // 0: cqc.portfolio.v1.Position.opened_at:type_name -> google.protobuf.Timestamp
	2, // 1: cqc.portfolio.v1.Position.updated_at:type_name -> google.protobuf.Timestamp
	2, // 2: cqc.portfolio.v1.Position.closed_at:type_name -> google.protobuf.Timestamp
	2, // 3: cqc.portfolio.v1.Exposure.timestamp:type_name -> google.protobuf.Timestamp
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_proto_portfolio_v1_position_proto_init() }
func file_proto_portfolio_v1_position_proto_init() {
	if File_proto_portfolio_v1_position_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_portfolio_v1_position_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_portfolio_v1_position_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Exposure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_portfolio_v1_position_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_proto_portfolio_v1_position_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_portfolio_v1_position_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_portfolio_v1_position_proto_goTypes,
		DependencyIndexes: file_proto_portfolio_v1_position_proto_depIdxs,
		MessageInfos:      file_proto_portfolio_v1_position_proto_msgTypes,
	}.Build()
	File_proto_portfolio_v1_position_proto = out.File
	file_proto_portfolio_v1_position_proto_rawDesc = nil
	file_proto_portfolio_v1_position_proto_goTypes = nil
	file_proto_portfolio_v1_position_proto_depIdxs = nil
}

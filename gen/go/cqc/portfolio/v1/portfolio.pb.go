// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: proto/portfolio/v1/portfolio.proto

package portfoliov1

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PortfolioStatus represents the current state of a portfolio.
type PortfolioStatus int32

const (
	PortfolioStatus_PORTFOLIO_STATUS_UNSPECIFIED PortfolioStatus = 0
	PortfolioStatus_PORTFOLIO_STATUS_ACTIVE      PortfolioStatus = 1 // Portfolio is active and trading
	PortfolioStatus_PORTFOLIO_STATUS_INACTIVE    PortfolioStatus = 2 // Portfolio exists but not actively managed
	PortfolioStatus_PORTFOLIO_STATUS_LIQUIDATING PortfolioStatus = 3 // Portfolio is being closed out
	PortfolioStatus_PORTFOLIO_STATUS_CLOSED      PortfolioStatus = 4 // Portfolio has been fully closed
	PortfolioStatus_PORTFOLIO_STATUS_SUSPENDED   PortfolioStatus = 5 // Portfolio operations suspended
)

// Enum value maps for PortfolioStatus.
var (
	PortfolioStatus_name = map[int32]string{
		0: "PORTFOLIO_STATUS_UNSPECIFIED",
		1: "PORTFOLIO_STATUS_ACTIVE",
		2: "PORTFOLIO_STATUS_INACTIVE",
		3: "PORTFOLIO_STATUS_LIQUIDATING",
		4: "PORTFOLIO_STATUS_CLOSED",
		5: "PORTFOLIO_STATUS_SUSPENDED",
	}
	PortfolioStatus_value = map[string]int32{
		"PORTFOLIO_STATUS_UNSPECIFIED": 0,
		"PORTFOLIO_STATUS_ACTIVE":      1,
		"PORTFOLIO_STATUS_INACTIVE":    2,
		"PORTFOLIO_STATUS_LIQUIDATING": 3,
		"PORTFOLIO_STATUS_CLOSED":      4,
		"PORTFOLIO_STATUS_SUSPENDED":   5,
	}
)

func (x PortfolioStatus) Enum() *PortfolioStatus {
	p := new(PortfolioStatus)
	*p = x
	return p
}

func (x PortfolioStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortfolioStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_portfolio_v1_portfolio_proto_enumTypes[0].Descriptor()
}

func (PortfolioStatus) Type() protoreflect.EnumType {
	return &file_proto_portfolio_v1_portfolio_proto_enumTypes[0]
}

func (x PortfolioStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortfolioStatus.Descriptor instead.
func (PortfolioStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_portfolio_v1_portfolio_proto_rawDescGZIP(), []int{0}
}

// Portfolio represents a collection of positions and associated metadata.
// Portfolios aggregate holdings across multiple assets and venues.
type Portfolio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique portfolio identifier.
	PortfolioId *string `protobuf:"bytes,1,opt,name=portfolio_id,json=portfolioId,proto3,oneof" json:"portfolio_id,omitempty"`
	// Human-readable portfolio name.
	Name *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// Portfolio description or strategy.
	Description *string `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Owner/manager identifier (user ID, account ID).
	OwnerId *string `protobuf:"bytes,4,opt,name=owner_id,json=ownerId,proto3,oneof" json:"owner_id,omitempty"`
	// Current portfolio status.
	Status *PortfolioStatus `protobuf:"varint,5,opt,name=status,proto3,enum=cqc.portfolio.v1.PortfolioStatus,oneof" json:"status,omitempty"`
	// Quote currency for all portfolio valuations.
	QuoteAssetId *string `protobuf:"bytes,6,opt,name=quote_asset_id,json=quoteAssetId,proto3,oneof" json:"quote_asset_id,omitempty"`
	// Total current market value of all positions.
	TotalValue *float64 `protobuf:"fixed64,7,opt,name=total_value,json=totalValue,proto3,oneof" json:"total_value,omitempty"`
	// Total cost basis of all positions.
	TotalCostBasis *float64 `protobuf:"fixed64,8,opt,name=total_cost_basis,json=totalCostBasis,proto3,oneof" json:"total_cost_basis,omitempty"`
	// Total unrealized profit/loss across all positions.
	TotalUnrealizedPnl *float64 `protobuf:"fixed64,9,opt,name=total_unrealized_pnl,json=totalUnrealizedPnl,proto3,oneof" json:"total_unrealized_pnl,omitempty"`
	// Total realized profit/loss from closed positions.
	TotalRealizedPnl *float64 `protobuf:"fixed64,10,opt,name=total_realized_pnl,json=totalRealizedPnl,proto3,oneof" json:"total_realized_pnl,omitempty"`
	// Total P&L (realized + unrealized).
	TotalPnl *float64 `protobuf:"fixed64,11,opt,name=total_pnl,json=totalPnl,proto3,oneof" json:"total_pnl,omitempty"`
	// Total P&L as percentage of cost basis.
	TotalPnlPercent *float64 `protobuf:"fixed64,12,opt,name=total_pnl_percent,json=totalPnlPercent,proto3,oneof" json:"total_pnl_percent,omitempty"`
	// Cash/stablecoin balance available for trading.
	AvailableCash *float64 `protobuf:"fixed64,13,opt,name=available_cash,json=availableCash,proto3,oneof" json:"available_cash,omitempty"`
	// Initial portfolio value at creation.
	InitialValue *float64 `protobuf:"fixed64,14,opt,name=initial_value,json=initialValue,proto3,oneof" json:"initial_value,omitempty"`
	// Timestamp when portfolio was created.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,15,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	// Timestamp of last portfolio update.
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,16,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	// Number of open positions.
	PositionCount *int32 `protobuf:"varint,17,opt,name=position_count,json=positionCount,proto3,oneof" json:"position_count,omitempty"`
	// Number of assets held.
	AssetCount *int32 `protobuf:"varint,18,opt,name=asset_count,json=assetCount,proto3,oneof" json:"asset_count,omitempty"`
	// Number of venues used.
	VenueCount *int32 `protobuf:"varint,19,opt,name=venue_count,json=venueCount,proto3,oneof" json:"venue_count,omitempty"`
	// Average leverage across all positions.
	AvgLeverage *float64 `protobuf:"fixed64,20,opt,name=avg_leverage,json=avgLeverage,proto3,oneof" json:"avg_leverage,omitempty"`
	// Total margin used for leveraged positions.
	TotalMarginUsed *float64 `protobuf:"fixed64,21,opt,name=total_margin_used,json=totalMarginUsed,proto3,oneof" json:"total_margin_used,omitempty"`
	// Maximum drawdown from peak value (as percentage).
	MaxDrawdown *float64 `protobuf:"fixed64,22,opt,name=max_drawdown,json=maxDrawdown,proto3,oneof" json:"max_drawdown,omitempty"`
	// Sharpe ratio (risk-adjusted return metric).
	SharpeRatio *float64 `protobuf:"fixed64,23,opt,name=sharpe_ratio,json=sharpeRatio,proto3,oneof" json:"sharpe_ratio,omitempty"`
	// Portfolio beta relative to a benchmark.
	Beta *float64 `protobuf:"fixed64,24,opt,name=beta,proto3,oneof" json:"beta,omitempty"`
	// Benchmark identifier for performance comparison.
	BenchmarkId *string `protobuf:"bytes,25,opt,name=benchmark_id,json=benchmarkId,proto3,oneof" json:"benchmark_id,omitempty"`
	// Strategy type or category (e.g., "market_making", "arbitrage", "long_only").
	Strategy *string `protobuf:"bytes,26,opt,name=strategy,proto3,oneof" json:"strategy,omitempty"`
	// Risk tolerance level (e.g., "conservative", "moderate", "aggressive").
	RiskTolerance *string `protobuf:"bytes,27,opt,name=risk_tolerance,json=riskTolerance,proto3,oneof" json:"risk_tolerance,omitempty"`
}

func (x *Portfolio) Reset() {
	*x = Portfolio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_portfolio_v1_portfolio_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Portfolio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Portfolio) ProtoMessage() {}

func (x *Portfolio) ProtoReflect() protoreflect.Message {
	mi := &file_proto_portfolio_v1_portfolio_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Portfolio.ProtoReflect.Descriptor instead.
func (*Portfolio) Descriptor() ([]byte, []int) {
	return file_proto_portfolio_v1_portfolio_proto_rawDescGZIP(), []int{0}
}

func (x *Portfolio) GetPortfolioId() string {
	if x != nil && x.PortfolioId != nil {
		return *x.PortfolioId
	}
	return ""
}

func (x *Portfolio) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Portfolio) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Portfolio) GetOwnerId() string {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return ""
}

func (x *Portfolio) GetStatus() PortfolioStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return PortfolioStatus_PORTFOLIO_STATUS_UNSPECIFIED
}

func (x *Portfolio) GetQuoteAssetId() string {
	if x != nil && x.QuoteAssetId != nil {
		return *x.QuoteAssetId
	}
	return ""
}

func (x *Portfolio) GetTotalValue() float64 {
	if x != nil && x.TotalValue != nil {
		return *x.TotalValue
	}
	return 0
}

func (x *Portfolio) GetTotalCostBasis() float64 {
	if x != nil && x.TotalCostBasis != nil {
		return *x.TotalCostBasis
	}
	return 0
}

func (x *Portfolio) GetTotalUnrealizedPnl() float64 {
	if x != nil && x.TotalUnrealizedPnl != nil {
		return *x.TotalUnrealizedPnl
	}
	return 0
}

func (x *Portfolio) GetTotalRealizedPnl() float64 {
	if x != nil && x.TotalRealizedPnl != nil {
		return *x.TotalRealizedPnl
	}
	return 0
}

func (x *Portfolio) GetTotalPnl() float64 {
	if x != nil && x.TotalPnl != nil {
		return *x.TotalPnl
	}
	return 0
}

func (x *Portfolio) GetTotalPnlPercent() float64 {
	if x != nil && x.TotalPnlPercent != nil {
		return *x.TotalPnlPercent
	}
	return 0
}

func (x *Portfolio) GetAvailableCash() float64 {
	if x != nil && x.AvailableCash != nil {
		return *x.AvailableCash
	}
	return 0
}

func (x *Portfolio) GetInitialValue() float64 {
	if x != nil && x.InitialValue != nil {
		return *x.InitialValue
	}
	return 0
}

func (x *Portfolio) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Portfolio) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Portfolio) GetPositionCount() int32 {
	if x != nil && x.PositionCount != nil {
		return *x.PositionCount
	}
	return 0
}

func (x *Portfolio) GetAssetCount() int32 {
	if x != nil && x.AssetCount != nil {
		return *x.AssetCount
	}
	return 0
}

func (x *Portfolio) GetVenueCount() int32 {
	if x != nil && x.VenueCount != nil {
		return *x.VenueCount
	}
	return 0
}

func (x *Portfolio) GetAvgLeverage() float64 {
	if x != nil && x.AvgLeverage != nil {
		return *x.AvgLeverage
	}
	return 0
}

func (x *Portfolio) GetTotalMarginUsed() float64 {
	if x != nil && x.TotalMarginUsed != nil {
		return *x.TotalMarginUsed
	}
	return 0
}

func (x *Portfolio) GetMaxDrawdown() float64 {
	if x != nil && x.MaxDrawdown != nil {
		return *x.MaxDrawdown
	}
	return 0
}

func (x *Portfolio) GetSharpeRatio() float64 {
	if x != nil && x.SharpeRatio != nil {
		return *x.SharpeRatio
	}
	return 0
}

func (x *Portfolio) GetBeta() float64 {
	if x != nil && x.Beta != nil {
		return *x.Beta
	}
	return 0
}

func (x *Portfolio) GetBenchmarkId() string {
	if x != nil && x.BenchmarkId != nil {
		return *x.BenchmarkId
	}
	return ""
}

func (x *Portfolio) GetStrategy() string {
	if x != nil && x.Strategy != nil {
		return *x.Strategy
	}
	return ""
}

func (x *Portfolio) GetRiskTolerance() string {
	if x != nil && x.RiskTolerance != nil {
		return *x.RiskTolerance
	}
	return ""
}

// Allocation represents target and actual allocation for an asset or dimension.
// Used for rebalancing and maintaining desired portfolio composition.
type Allocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique allocation identifier.
	AllocationId *string `protobuf:"bytes,1,opt,name=allocation_id,json=allocationId,proto3,oneof" json:"allocation_id,omitempty"`
	// Portfolio identifier.
	PortfolioId *string `protobuf:"bytes,2,opt,name=portfolio_id,json=portfolioId,proto3,oneof" json:"portfolio_id,omitempty"`
	// Allocation dimension (e.g., "asset", "venue", "chain", "sector").
	Dimension *string `protobuf:"bytes,3,opt,name=dimension,proto3,oneof" json:"dimension,omitempty"`
	// Value within the dimension (e.g., "BTC", "ethereum", "defi").
	DimensionValue *string `protobuf:"bytes,4,opt,name=dimension_value,json=dimensionValue,proto3,oneof" json:"dimension_value,omitempty"`
	// Asset identifier (if dimension is "asset").
	AssetId *string `protobuf:"bytes,5,opt,name=asset_id,json=assetId,proto3,oneof" json:"asset_id,omitempty"`
	// Target allocation as percentage of total portfolio value.
	TargetPercent *float64 `protobuf:"fixed64,6,opt,name=target_percent,json=targetPercent,proto3,oneof" json:"target_percent,omitempty"`
	// Target allocation as absolute value in quote currency.
	TargetValue *float64 `protobuf:"fixed64,7,opt,name=target_value,json=targetValue,proto3,oneof" json:"target_value,omitempty"`
	// Current actual allocation as percentage.
	ActualPercent *float64 `protobuf:"fixed64,8,opt,name=actual_percent,json=actualPercent,proto3,oneof" json:"actual_percent,omitempty"`
	// Current actual allocation as absolute value.
	ActualValue *float64 `protobuf:"fixed64,9,opt,name=actual_value,json=actualValue,proto3,oneof" json:"actual_value,omitempty"`
	// Difference between target and actual (actual - target) in percentage points.
	DeviationPercent *float64 `protobuf:"fixed64,10,opt,name=deviation_percent,json=deviationPercent,proto3,oneof" json:"deviation_percent,omitempty"`
	// Difference between target and actual in absolute value.
	DeviationValue *float64 `protobuf:"fixed64,11,opt,name=deviation_value,json=deviationValue,proto3,oneof" json:"deviation_value,omitempty"`
	// Whether current allocation is within acceptable tolerance.
	WithinTolerance *bool `protobuf:"varint,12,opt,name=within_tolerance,json=withinTolerance,proto3,oneof" json:"within_tolerance,omitempty"`
	// Acceptable deviation tolerance (percentage points).
	TolerancePercent *float64 `protobuf:"fixed64,13,opt,name=tolerance_percent,json=tolerancePercent,proto3,oneof" json:"tolerance_percent,omitempty"`
	// Minimum allocation constraint (percentage).
	MinPercent *float64 `protobuf:"fixed64,14,opt,name=min_percent,json=minPercent,proto3,oneof" json:"min_percent,omitempty"`
	// Maximum allocation constraint (percentage).
	MaxPercent *float64 `protobuf:"fixed64,15,opt,name=max_percent,json=maxPercent,proto3,oneof" json:"max_percent,omitempty"`
	// Quote currency for values.
	QuoteAssetId *string `protobuf:"bytes,16,opt,name=quote_asset_id,json=quoteAssetId,proto3,oneof" json:"quote_asset_id,omitempty"`
	// Timestamp of this allocation snapshot.
	Timestamp *timestamp.Timestamp `protobuf:"bytes,17,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
	// Priority for rebalancing (higher = rebalance first).
	RebalancePriority *int32 `protobuf:"varint,18,opt,name=rebalance_priority,json=rebalancePriority,proto3,oneof" json:"rebalance_priority,omitempty"`
	// Whether this allocation is actively enforced.
	IsActive *bool `protobuf:"varint,19,opt,name=is_active,json=isActive,proto3,oneof" json:"is_active,omitempty"`
	// Notes or reasoning for this allocation target.
	Notes *string `protobuf:"bytes,20,opt,name=notes,proto3,oneof" json:"notes,omitempty"`
}

func (x *Allocation) Reset() {
	*x = Allocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_portfolio_v1_portfolio_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Allocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Allocation) ProtoMessage() {}

func (x *Allocation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_portfolio_v1_portfolio_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Allocation.ProtoReflect.Descriptor instead.
func (*Allocation) Descriptor() ([]byte, []int) {
	return file_proto_portfolio_v1_portfolio_proto_rawDescGZIP(), []int{1}
}

func (x *Allocation) GetAllocationId() string {
	if x != nil && x.AllocationId != nil {
		return *x.AllocationId
	}
	return ""
}

func (x *Allocation) GetPortfolioId() string {
	if x != nil && x.PortfolioId != nil {
		return *x.PortfolioId
	}
	return ""
}

func (x *Allocation) GetDimension() string {
	if x != nil && x.Dimension != nil {
		return *x.Dimension
	}
	return ""
}

func (x *Allocation) GetDimensionValue() string {
	if x != nil && x.DimensionValue != nil {
		return *x.DimensionValue
	}
	return ""
}

func (x *Allocation) GetAssetId() string {
	if x != nil && x.AssetId != nil {
		return *x.AssetId
	}
	return ""
}

func (x *Allocation) GetTargetPercent() float64 {
	if x != nil && x.TargetPercent != nil {
		return *x.TargetPercent
	}
	return 0
}

func (x *Allocation) GetTargetValue() float64 {
	if x != nil && x.TargetValue != nil {
		return *x.TargetValue
	}
	return 0
}

func (x *Allocation) GetActualPercent() float64 {
	if x != nil && x.ActualPercent != nil {
		return *x.ActualPercent
	}
	return 0
}

func (x *Allocation) GetActualValue() float64 {
	if x != nil && x.ActualValue != nil {
		return *x.ActualValue
	}
	return 0
}

func (x *Allocation) GetDeviationPercent() float64 {
	if x != nil && x.DeviationPercent != nil {
		return *x.DeviationPercent
	}
	return 0
}

func (x *Allocation) GetDeviationValue() float64 {
	if x != nil && x.DeviationValue != nil {
		return *x.DeviationValue
	}
	return 0
}

func (x *Allocation) GetWithinTolerance() bool {
	if x != nil && x.WithinTolerance != nil {
		return *x.WithinTolerance
	}
	return false
}

func (x *Allocation) GetTolerancePercent() float64 {
	if x != nil && x.TolerancePercent != nil {
		return *x.TolerancePercent
	}
	return 0
}

func (x *Allocation) GetMinPercent() float64 {
	if x != nil && x.MinPercent != nil {
		return *x.MinPercent
	}
	return 0
}

func (x *Allocation) GetMaxPercent() float64 {
	if x != nil && x.MaxPercent != nil {
		return *x.MaxPercent
	}
	return 0
}

func (x *Allocation) GetQuoteAssetId() string {
	if x != nil && x.QuoteAssetId != nil {
		return *x.QuoteAssetId
	}
	return ""
}

func (x *Allocation) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Allocation) GetRebalancePriority() int32 {
	if x != nil && x.RebalancePriority != nil {
		return *x.RebalancePriority
	}
	return 0
}

func (x *Allocation) GetIsActive() bool {
	if x != nil && x.IsActive != nil {
		return *x.IsActive
	}
	return false
}

func (x *Allocation) GetNotes() string {
	if x != nil && x.Notes != nil {
		return *x.Notes
	}
	return ""
}

var File_proto_portfolio_v1_portfolio_proto protoreflect.FileDescriptor

var file_proto_portfolio_v1_portfolio_proto_rawDesc = []byte{
	0x0a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69,
	0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x63, 0x71, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f,
	0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdc, 0x0c, 0x0a, 0x09, 0x50, 0x6f, 0x72, 0x74,
	0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c,
	0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x70,
	0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x63, 0x71, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x48, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x0e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48, 0x06, 0x52,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x73,
	0x69, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x07, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x73, 0x74, 0x42, 0x61, 0x73, 0x69, 0x73, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a,
	0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x5f, 0x70, 0x6e, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x48, 0x08, 0x52, 0x12, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x6e,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x6e, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x09, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x50, 0x6e, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x70, 0x6e, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0a, 0x52, 0x08, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x6e, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x70, 0x6e, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x0b, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6e, 0x6c,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x0c, 0x52, 0x0d, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0d, 0x52,
	0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x0e, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x3e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x0f, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x10, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x11, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x48, 0x12, 0x52, 0x0a, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x76, 0x67, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x48, 0x13,
	0x52, 0x0b, 0x61, 0x76, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x48, 0x14, 0x52, 0x0f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x64, 0x6f, 0x77,
	0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x48, 0x15, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x72,
	0x61, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x68, 0x61,
	0x72, 0x70, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x16, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x62, 0x65, 0x74, 0x61, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x17, 0x52, 0x04, 0x62, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x65,
	0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x18, 0x52, 0x0b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x6c, 0x65,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x0d, 0x72,
	0x69, 0x73, 0x6b, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x69, 0x64,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70,
	0x6e, 0x6c, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x6e, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6e, 0x6c, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x70, 0x6e, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x73, 0x68,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x70, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x62, 0x65, 0x74, 0x61, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d,
	0x61, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x6c,
	0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xbf, 0x09, 0x0a, 0x0a, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c,
	0x69, 0x6f, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x64, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x64, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0e, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x05, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x0b, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x07, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x48, 0x08,
	0x52, 0x0b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x30, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x09, 0x52, 0x10, 0x64,
	0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0a, 0x52, 0x0e, 0x64,
	0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2e, 0x0a, 0x10, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0b, 0x52, 0x0f, 0x77, 0x69,
	0x74, 0x68, 0x69, 0x6e, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x30, 0x0a, 0x11, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0c, 0x52, 0x10, 0x74,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0d, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0e, 0x52,
	0x0a, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x29,
	0x0a, 0x0e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x10, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x72, 0x65, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x11, 0x52, 0x11, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x12, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x69, 0x6e,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x2a, 0xce, 0x01, 0x0a, 0x0f, 0x50, 0x6f, 0x72,
	0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x1c,
	0x50, 0x4f, 0x52, 0x54, 0x46, 0x4f, 0x4c, 0x49, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b,
	0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54, 0x46, 0x4f, 0x4c, 0x49, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x50,
	0x4f, 0x52, 0x54, 0x46, 0x4f, 0x4c, 0x49, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4f,
	0x52, 0x54, 0x46, 0x4f, 0x4c, 0x49, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c,
	0x49, 0x51, 0x55, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17,
	0x50, 0x4f, 0x52, 0x54, 0x46, 0x4f, 0x4c, 0x49, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4f, 0x52,
	0x54, 0x46, 0x4f, 0x4c, 0x49, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55,
	0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x05, 0x42, 0x44, 0x5a, 0x42, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x2d,
	0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x2f, 0x63, 0x71, 0x63, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x67, 0x6f, 0x2f, 0x63, 0x71, 0x63, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f,
	0x2f, 0x76, 0x31, 0x3b, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_portfolio_v1_portfolio_proto_rawDescOnce sync.Once
	file_proto_portfolio_v1_portfolio_proto_rawDescData = file_proto_portfolio_v1_portfolio_proto_rawDesc
)

func file_proto_portfolio_v1_portfolio_proto_rawDescGZIP() []byte {
	file_proto_portfolio_v1_portfolio_proto_rawDescOnce.Do(func() {
		file_proto_portfolio_v1_portfolio_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_portfolio_v1_portfolio_proto_rawDescData)
	})
	return file_proto_portfolio_v1_portfolio_proto_rawDescData
}

var file_proto_portfolio_v1_portfolio_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_portfolio_v1_portfolio_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_portfolio_v1_portfolio_proto_goTypes = []interface{}{
	(PortfolioStatus)(0),        // 0: cqc.portfolio.v1.PortfolioStatus
	(*Portfolio)(nil),           // 1: cqc.portfolio.v1.Portfolio
	(*Allocation)(nil),          // 2: cqc.portfolio.v1.Allocation
	(*timestamp.Timestamp)(nil), // 3: google.protobuf.Timestamp
}
var file_proto_portfolio_v1_portfolio_proto_depIdxs = []int32{
	0, // 0: cqc.portfolio.v1.Portfolio.status:type_name -> cqc.portfolio.v1.PortfolioStatus
	3, // 1: cqc.portfolio.v1.Portfolio.created_at:type_name -> google.protobuf.Timestamp
	3, // 2: cqc.portfolio.v1.Portfolio.updated_at:type_name -> google.protobuf.Timestamp
	3, // 3: cqc.portfolio.v1.Allocation.timestamp:type_name -> google.protobuf.Timestamp
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_proto_portfolio_v1_portfolio_proto_init() }
func file_proto_portfolio_v1_portfolio_proto_init() {
	if File_proto_portfolio_v1_portfolio_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_portfolio_v1_portfolio_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Portfolio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_portfolio_v1_portfolio_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Allocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_portfolio_v1_portfolio_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_proto_portfolio_v1_portfolio_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_portfolio_v1_portfolio_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_portfolio_v1_portfolio_proto_goTypes,
		DependencyIndexes: file_proto_portfolio_v1_portfolio_proto_depIdxs,
		EnumInfos:         file_proto_portfolio_v1_portfolio_proto_enumTypes,
		MessageInfos:      file_proto_portfolio_v1_portfolio_proto_msgTypes,
	}.Build()
	File_proto_portfolio_v1_portfolio_proto = out.File
	file_proto_portfolio_v1_portfolio_proto_rawDesc = nil
	file_proto_portfolio_v1_portfolio_proto_goTypes = nil
	file_proto_portfolio_v1_portfolio_proto_depIdxs = nil
}

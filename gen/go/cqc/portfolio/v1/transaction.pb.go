// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: proto/portfolio/v1/transaction.proto

package portfoliov1

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TransactionType represents the type of portfolio transaction.
type TransactionType int32

const (
	TransactionType_TRANSACTION_TYPE_UNSPECIFIED  TransactionType = 0
	TransactionType_TRANSACTION_TYPE_BUY          TransactionType = 1  // Purchase of an asset
	TransactionType_TRANSACTION_TYPE_SELL         TransactionType = 2  // Sale of an asset
	TransactionType_TRANSACTION_TYPE_DEPOSIT      TransactionType = 3  // Deposit funds into portfolio
	TransactionType_TRANSACTION_TYPE_WITHDRAWAL   TransactionType = 4  // Withdraw funds from portfolio
	TransactionType_TRANSACTION_TYPE_TRANSFER_IN  TransactionType = 5  // Transfer in from another portfolio/account
	TransactionType_TRANSACTION_TYPE_TRANSFER_OUT TransactionType = 6  // Transfer out to another portfolio/account
	TransactionType_TRANSACTION_TYPE_FEE          TransactionType = 7  // Fee deduction
	TransactionType_TRANSACTION_TYPE_DIVIDEND     TransactionType = 8  // Dividend or interest received
	TransactionType_TRANSACTION_TYPE_LIQUIDATION  TransactionType = 9  // Liquidation event
	TransactionType_TRANSACTION_TYPE_AIRDROP      TransactionType = 10 // Airdrop received
	TransactionType_TRANSACTION_TYPE_STAKE        TransactionType = 11 // Staking deposit
	TransactionType_TRANSACTION_TYPE_UNSTAKE      TransactionType = 12 // Staking withdrawal
)

// Enum value maps for TransactionType.
var (
	TransactionType_name = map[int32]string{
		0:  "TRANSACTION_TYPE_UNSPECIFIED",
		1:  "TRANSACTION_TYPE_BUY",
		2:  "TRANSACTION_TYPE_SELL",
		3:  "TRANSACTION_TYPE_DEPOSIT",
		4:  "TRANSACTION_TYPE_WITHDRAWAL",
		5:  "TRANSACTION_TYPE_TRANSFER_IN",
		6:  "TRANSACTION_TYPE_TRANSFER_OUT",
		7:  "TRANSACTION_TYPE_FEE",
		8:  "TRANSACTION_TYPE_DIVIDEND",
		9:  "TRANSACTION_TYPE_LIQUIDATION",
		10: "TRANSACTION_TYPE_AIRDROP",
		11: "TRANSACTION_TYPE_STAKE",
		12: "TRANSACTION_TYPE_UNSTAKE",
	}
	TransactionType_value = map[string]int32{
		"TRANSACTION_TYPE_UNSPECIFIED":  0,
		"TRANSACTION_TYPE_BUY":          1,
		"TRANSACTION_TYPE_SELL":         2,
		"TRANSACTION_TYPE_DEPOSIT":      3,
		"TRANSACTION_TYPE_WITHDRAWAL":   4,
		"TRANSACTION_TYPE_TRANSFER_IN":  5,
		"TRANSACTION_TYPE_TRANSFER_OUT": 6,
		"TRANSACTION_TYPE_FEE":          7,
		"TRANSACTION_TYPE_DIVIDEND":     8,
		"TRANSACTION_TYPE_LIQUIDATION":  9,
		"TRANSACTION_TYPE_AIRDROP":      10,
		"TRANSACTION_TYPE_STAKE":        11,
		"TRANSACTION_TYPE_UNSTAKE":      12,
	}
)

func (x TransactionType) Enum() *TransactionType {
	p := new(TransactionType)
	*p = x
	return p
}

func (x TransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_portfolio_v1_transaction_proto_enumTypes[0].Descriptor()
}

func (TransactionType) Type() protoreflect.EnumType {
	return &file_proto_portfolio_v1_transaction_proto_enumTypes[0]
}

func (x TransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionType.Descriptor instead.
func (TransactionType) EnumDescriptor() ([]byte, []int) {
	return file_proto_portfolio_v1_transaction_proto_rawDescGZIP(), []int{0}
}

// TransactionStatus represents the current state of a transaction.
type TransactionStatus int32

const (
	TransactionStatus_TRANSACTION_STATUS_UNSPECIFIED TransactionStatus = 0
	TransactionStatus_TRANSACTION_STATUS_PENDING     TransactionStatus = 1 // Transaction initiated but not complete
	TransactionStatus_TRANSACTION_STATUS_CONFIRMED   TransactionStatus = 2 // Transaction completed successfully
	TransactionStatus_TRANSACTION_STATUS_FAILED      TransactionStatus = 3 // Transaction failed
	TransactionStatus_TRANSACTION_STATUS_CANCELLED   TransactionStatus = 4 // Transaction was cancelled
	TransactionStatus_TRANSACTION_STATUS_PROCESSING  TransactionStatus = 5 // Transaction is being processed
)

// Enum value maps for TransactionStatus.
var (
	TransactionStatus_name = map[int32]string{
		0: "TRANSACTION_STATUS_UNSPECIFIED",
		1: "TRANSACTION_STATUS_PENDING",
		2: "TRANSACTION_STATUS_CONFIRMED",
		3: "TRANSACTION_STATUS_FAILED",
		4: "TRANSACTION_STATUS_CANCELLED",
		5: "TRANSACTION_STATUS_PROCESSING",
	}
	TransactionStatus_value = map[string]int32{
		"TRANSACTION_STATUS_UNSPECIFIED": 0,
		"TRANSACTION_STATUS_PENDING":     1,
		"TRANSACTION_STATUS_CONFIRMED":   2,
		"TRANSACTION_STATUS_FAILED":      3,
		"TRANSACTION_STATUS_CANCELLED":   4,
		"TRANSACTION_STATUS_PROCESSING":  5,
	}
)

func (x TransactionStatus) Enum() *TransactionStatus {
	p := new(TransactionStatus)
	*p = x
	return p
}

func (x TransactionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_portfolio_v1_transaction_proto_enumTypes[1].Descriptor()
}

func (TransactionStatus) Type() protoreflect.EnumType {
	return &file_proto_portfolio_v1_transaction_proto_enumTypes[1]
}

func (x TransactionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionStatus.Descriptor instead.
func (TransactionStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_portfolio_v1_transaction_proto_rawDescGZIP(), []int{1}
}

// Transaction represents a change to portfolio holdings (buy, sell, deposit, etc).
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique transaction identifier.
	TransactionId *string `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3,oneof" json:"transaction_id,omitempty"`
	// Portfolio identifier.
	PortfolioId *string `protobuf:"bytes,2,opt,name=portfolio_id,json=portfolioId,proto3,oneof" json:"portfolio_id,omitempty"`
	// Position identifier affected by this transaction.
	PositionId *string `protobuf:"bytes,3,opt,name=position_id,json=positionId,proto3,oneof" json:"position_id,omitempty"`
	// Type of transaction.
	Type *TransactionType `protobuf:"varint,4,opt,name=type,proto3,enum=cqc.portfolio.v1.TransactionType,oneof" json:"type,omitempty"`
	// Current transaction status.
	Status *TransactionStatus `protobuf:"varint,5,opt,name=status,proto3,enum=cqc.portfolio.v1.TransactionStatus,oneof" json:"status,omitempty"`
	// Asset identifier being transacted.
	AssetId *string `protobuf:"bytes,6,opt,name=asset_id,json=assetId,proto3,oneof" json:"asset_id,omitempty"`
	// Venue where transaction occurred.
	VenueId *string `protobuf:"bytes,7,opt,name=venue_id,json=venueId,proto3,oneof" json:"venue_id,omitempty"`
	// Quantity of asset (positive for inflows, negative for outflows).
	Quantity *float64 `protobuf:"fixed64,8,opt,name=quantity,proto3,oneof" json:"quantity,omitempty"`
	// Price per unit at which transaction occurred.
	Price *float64 `protobuf:"fixed64,9,opt,name=price,proto3,oneof" json:"price,omitempty"`
	// Quote currency for price and values.
	QuoteAssetId *string `protobuf:"bytes,10,opt,name=quote_asset_id,json=quoteAssetId,proto3,oneof" json:"quote_asset_id,omitempty"`
	// Total value of transaction (quantity * price).
	Value *float64 `protobuf:"fixed64,11,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Transaction fee amount.
	Fee *float64 `protobuf:"fixed64,12,opt,name=fee,proto3,oneof" json:"fee,omitempty"`
	// Asset in which fee is denominated.
	FeeAssetId *string `protobuf:"bytes,13,opt,name=fee_asset_id,json=feeAssetId,proto3,oneof" json:"fee_asset_id,omitempty"`
	// Net amount after fees (value - fee).
	NetValue *float64 `protobuf:"fixed64,14,opt,name=net_value,json=netValue,proto3,oneof" json:"net_value,omitempty"`
	// Timestamp when transaction was initiated.
	Timestamp *timestamp.Timestamp `protobuf:"bytes,15,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
	// Timestamp when transaction was confirmed/completed.
	ConfirmedAt *timestamp.Timestamp `protobuf:"bytes,16,opt,name=confirmed_at,json=confirmedAt,proto3,oneof" json:"confirmed_at,omitempty"`
	// Order identifier that generated this transaction (if from an order).
	OrderId *string `protobuf:"bytes,17,opt,name=order_id,json=orderId,proto3,oneof" json:"order_id,omitempty"`
	// Trade identifier (if from a trade execution).
	TradeId *string `protobuf:"bytes,18,opt,name=trade_id,json=tradeId,proto3,oneof" json:"trade_id,omitempty"`
	// Transaction hash (for on-chain transactions).
	TxHash *string `protobuf:"bytes,19,opt,name=tx_hash,json=txHash,proto3,oneof" json:"tx_hash,omitempty"`
	// Block number (for on-chain transactions).
	BlockNumber *int64 `protobuf:"varint,20,opt,name=block_number,json=blockNumber,proto3,oneof" json:"block_number,omitempty"`
	// Related transaction ID (e.g., for transfers, the counterpart transaction).
	RelatedTransactionId *string `protobuf:"bytes,21,opt,name=related_transaction_id,json=relatedTransactionId,proto3,oneof" json:"related_transaction_id,omitempty"`
	// Notes or description for this transaction.
	Notes *string `protobuf:"bytes,22,opt,name=notes,proto3,oneof" json:"notes,omitempty"`
	// Source of the transaction (e.g., "manual", "api", "bot", "exchange").
	Source *string `protobuf:"bytes,23,opt,name=source,proto3,oneof" json:"source,omitempty"`
	// Whether this transaction affects realized P&L.
	AffectsRealizedPnl *bool `protobuf:"varint,24,opt,name=affects_realized_pnl,json=affectsRealizedPnl,proto3,oneof" json:"affects_realized_pnl,omitempty"`
	// Realized P&L from this transaction (for sells/closes).
	RealizedPnl *float64 `protobuf:"fixed64,25,opt,name=realized_pnl,json=realizedPnl,proto3,oneof" json:"realized_pnl,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_portfolio_v1_transaction_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_portfolio_v1_transaction_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_proto_portfolio_v1_transaction_proto_rawDescGZIP(), []int{0}
}

func (x *Transaction) GetTransactionId() string {
	if x != nil && x.TransactionId != nil {
		return *x.TransactionId
	}
	return ""
}

func (x *Transaction) GetPortfolioId() string {
	if x != nil && x.PortfolioId != nil {
		return *x.PortfolioId
	}
	return ""
}

func (x *Transaction) GetPositionId() string {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return ""
}

func (x *Transaction) GetType() TransactionType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return TransactionType_TRANSACTION_TYPE_UNSPECIFIED
}

func (x *Transaction) GetStatus() TransactionStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return TransactionStatus_TRANSACTION_STATUS_UNSPECIFIED
}

func (x *Transaction) GetAssetId() string {
	if x != nil && x.AssetId != nil {
		return *x.AssetId
	}
	return ""
}

func (x *Transaction) GetVenueId() string {
	if x != nil && x.VenueId != nil {
		return *x.VenueId
	}
	return ""
}

func (x *Transaction) GetQuantity() float64 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

func (x *Transaction) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *Transaction) GetQuoteAssetId() string {
	if x != nil && x.QuoteAssetId != nil {
		return *x.QuoteAssetId
	}
	return ""
}

func (x *Transaction) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *Transaction) GetFee() float64 {
	if x != nil && x.Fee != nil {
		return *x.Fee
	}
	return 0
}

func (x *Transaction) GetFeeAssetId() string {
	if x != nil && x.FeeAssetId != nil {
		return *x.FeeAssetId
	}
	return ""
}

func (x *Transaction) GetNetValue() float64 {
	if x != nil && x.NetValue != nil {
		return *x.NetValue
	}
	return 0
}

func (x *Transaction) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Transaction) GetConfirmedAt() *timestamp.Timestamp {
	if x != nil {
		return x.ConfirmedAt
	}
	return nil
}

func (x *Transaction) GetOrderId() string {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return ""
}

func (x *Transaction) GetTradeId() string {
	if x != nil && x.TradeId != nil {
		return *x.TradeId
	}
	return ""
}

func (x *Transaction) GetTxHash() string {
	if x != nil && x.TxHash != nil {
		return *x.TxHash
	}
	return ""
}

func (x *Transaction) GetBlockNumber() int64 {
	if x != nil && x.BlockNumber != nil {
		return *x.BlockNumber
	}
	return 0
}

func (x *Transaction) GetRelatedTransactionId() string {
	if x != nil && x.RelatedTransactionId != nil {
		return *x.RelatedTransactionId
	}
	return ""
}

func (x *Transaction) GetNotes() string {
	if x != nil && x.Notes != nil {
		return *x.Notes
	}
	return ""
}

func (x *Transaction) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *Transaction) GetAffectsRealizedPnl() bool {
	if x != nil && x.AffectsRealizedPnl != nil {
		return *x.AffectsRealizedPnl
	}
	return false
}

func (x *Transaction) GetRealizedPnl() float64 {
	if x != nil && x.RealizedPnl != nil {
		return *x.RealizedPnl
	}
	return 0
}

// PnL (Profit and Loss) represents performance metrics over a time period.
type PnL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique P&L record identifier.
	PnlId *string `protobuf:"bytes,1,opt,name=pnl_id,json=pnlId,proto3,oneof" json:"pnl_id,omitempty"`
	// Portfolio identifier.
	PortfolioId *string `protobuf:"bytes,2,opt,name=portfolio_id,json=portfolioId,proto3,oneof" json:"portfolio_id,omitempty"`
	// Position identifier (NULL for portfolio-level P&L).
	PositionId *string `protobuf:"bytes,3,opt,name=position_id,json=positionId,proto3,oneof" json:"position_id,omitempty"`
	// Asset identifier (NULL for portfolio-level P&L).
	AssetId *string `protobuf:"bytes,4,opt,name=asset_id,json=assetId,proto3,oneof" json:"asset_id,omitempty"`
	// Start timestamp of the P&L period.
	PeriodStart *timestamp.Timestamp `protobuf:"bytes,5,opt,name=period_start,json=periodStart,proto3,oneof" json:"period_start,omitempty"`
	// End timestamp of the P&L period.
	PeriodEnd *timestamp.Timestamp `protobuf:"bytes,6,opt,name=period_end,json=periodEnd,proto3,oneof" json:"period_end,omitempty"`
	// Quote currency for all P&L values.
	QuoteAssetId *string `protobuf:"bytes,7,opt,name=quote_asset_id,json=quoteAssetId,proto3,oneof" json:"quote_asset_id,omitempty"`
	// Value at start of period.
	StartingValue *float64 `protobuf:"fixed64,8,opt,name=starting_value,json=startingValue,proto3,oneof" json:"starting_value,omitempty"`
	// Value at end of period.
	EndingValue *float64 `protobuf:"fixed64,9,opt,name=ending_value,json=endingValue,proto3,oneof" json:"ending_value,omitempty"`
	// Net deposits during the period (positive = money in).
	NetDeposits *float64 `protobuf:"fixed64,10,opt,name=net_deposits,json=netDeposits,proto3,oneof" json:"net_deposits,omitempty"`
	// Net withdrawals during the period (positive = money out).
	NetWithdrawals *float64 `protobuf:"fixed64,11,opt,name=net_withdrawals,json=netWithdrawals,proto3,oneof" json:"net_withdrawals,omitempty"`
	// Realized profit/loss during the period (from closed positions).
	RealizedPnl *float64 `protobuf:"fixed64,12,opt,name=realized_pnl,json=realizedPnl,proto3,oneof" json:"realized_pnl,omitempty"`
	// Unrealized profit/loss at end of period (from open positions).
	UnrealizedPnl *float64 `protobuf:"fixed64,13,opt,name=unrealized_pnl,json=unrealizedPnl,proto3,oneof" json:"unrealized_pnl,omitempty"`
	// Total P&L (realized + unrealized).
	TotalPnl *float64 `protobuf:"fixed64,14,opt,name=total_pnl,json=totalPnl,proto3,oneof" json:"total_pnl,omitempty"`
	// Total return as percentage ((ending_value - starting_value - net_deposits + net_withdrawals) / starting_value).
	ReturnPercent *float64 `protobuf:"fixed64,15,opt,name=return_percent,json=returnPercent,proto3,oneof" json:"return_percent,omitempty"`
	// Time-weighted return (accounts for cash flows timing).
	TimeWeightedReturn *float64 `protobuf:"fixed64,16,opt,name=time_weighted_return,json=timeWeightedReturn,proto3,oneof" json:"time_weighted_return,omitempty"`
	// Money-weighted return (internal rate of return).
	MoneyWeightedReturn *float64 `protobuf:"fixed64,17,opt,name=money_weighted_return,json=moneyWeightedReturn,proto3,oneof" json:"money_weighted_return,omitempty"`
	// Fees paid during the period.
	TotalFees *float64 `protobuf:"fixed64,18,opt,name=total_fees,json=totalFees,proto3,oneof" json:"total_fees,omitempty"`
	// Number of transactions during the period.
	TransactionCount *int64 `protobuf:"varint,19,opt,name=transaction_count,json=transactionCount,proto3,oneof" json:"transaction_count,omitempty"`
	// Number of winning trades/positions closed.
	WinningTrades *int32 `protobuf:"varint,20,opt,name=winning_trades,json=winningTrades,proto3,oneof" json:"winning_trades,omitempty"`
	// Number of losing trades/positions closed.
	LosingTrades *int32 `protobuf:"varint,21,opt,name=losing_trades,json=losingTrades,proto3,oneof" json:"losing_trades,omitempty"`
	// Average profit per winning trade.
	AvgWin *float64 `protobuf:"fixed64,22,opt,name=avg_win,json=avgWin,proto3,oneof" json:"avg_win,omitempty"`
	// Average loss per losing trade.
	AvgLoss *float64 `protobuf:"fixed64,23,opt,name=avg_loss,json=avgLoss,proto3,oneof" json:"avg_loss,omitempty"`
	// Win rate (winning_trades / (winning_trades + losing_trades)).
	WinRate *float64 `protobuf:"fixed64,24,opt,name=win_rate,json=winRate,proto3,oneof" json:"win_rate,omitempty"`
	// Profit factor (gross_profit / gross_loss).
	ProfitFactor *float64 `protobuf:"fixed64,25,opt,name=profit_factor,json=profitFactor,proto3,oneof" json:"profit_factor,omitempty"`
	// Maximum drawdown during the period (as percentage).
	MaxDrawdown *float64 `protobuf:"fixed64,26,opt,name=max_drawdown,json=maxDrawdown,proto3,oneof" json:"max_drawdown,omitempty"`
	// Sharpe ratio for the period.
	SharpeRatio *float64 `protobuf:"fixed64,27,opt,name=sharpe_ratio,json=sharpeRatio,proto3,oneof" json:"sharpe_ratio,omitempty"`
	// Volatility (standard deviation of returns).
	Volatility *float64 `protobuf:"fixed64,28,opt,name=volatility,proto3,oneof" json:"volatility,omitempty"`
	// Benchmark return for comparison (if applicable).
	BenchmarkReturn *float64 `protobuf:"fixed64,29,opt,name=benchmark_return,json=benchmarkReturn,proto3,oneof" json:"benchmark_return,omitempty"`
	// Alpha (excess return vs benchmark).
	Alpha *float64 `protobuf:"fixed64,30,opt,name=alpha,proto3,oneof" json:"alpha,omitempty"`
	// Beta (correlation with benchmark).
	Beta *float64 `protobuf:"fixed64,31,opt,name=beta,proto3,oneof" json:"beta,omitempty"`
}

func (x *PnL) Reset() {
	*x = PnL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_portfolio_v1_transaction_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PnL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PnL) ProtoMessage() {}

func (x *PnL) ProtoReflect() protoreflect.Message {
	mi := &file_proto_portfolio_v1_transaction_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PnL.ProtoReflect.Descriptor instead.
func (*PnL) Descriptor() ([]byte, []int) {
	return file_proto_portfolio_v1_transaction_proto_rawDescGZIP(), []int{1}
}

func (x *PnL) GetPnlId() string {
	if x != nil && x.PnlId != nil {
		return *x.PnlId
	}
	return ""
}

func (x *PnL) GetPortfolioId() string {
	if x != nil && x.PortfolioId != nil {
		return *x.PortfolioId
	}
	return ""
}

func (x *PnL) GetPositionId() string {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return ""
}

func (x *PnL) GetAssetId() string {
	if x != nil && x.AssetId != nil {
		return *x.AssetId
	}
	return ""
}

func (x *PnL) GetPeriodStart() *timestamp.Timestamp {
	if x != nil {
		return x.PeriodStart
	}
	return nil
}

func (x *PnL) GetPeriodEnd() *timestamp.Timestamp {
	if x != nil {
		return x.PeriodEnd
	}
	return nil
}

func (x *PnL) GetQuoteAssetId() string {
	if x != nil && x.QuoteAssetId != nil {
		return *x.QuoteAssetId
	}
	return ""
}

func (x *PnL) GetStartingValue() float64 {
	if x != nil && x.StartingValue != nil {
		return *x.StartingValue
	}
	return 0
}

func (x *PnL) GetEndingValue() float64 {
	if x != nil && x.EndingValue != nil {
		return *x.EndingValue
	}
	return 0
}

func (x *PnL) GetNetDeposits() float64 {
	if x != nil && x.NetDeposits != nil {
		return *x.NetDeposits
	}
	return 0
}

func (x *PnL) GetNetWithdrawals() float64 {
	if x != nil && x.NetWithdrawals != nil {
		return *x.NetWithdrawals
	}
	return 0
}

func (x *PnL) GetRealizedPnl() float64 {
	if x != nil && x.RealizedPnl != nil {
		return *x.RealizedPnl
	}
	return 0
}

func (x *PnL) GetUnrealizedPnl() float64 {
	if x != nil && x.UnrealizedPnl != nil {
		return *x.UnrealizedPnl
	}
	return 0
}

func (x *PnL) GetTotalPnl() float64 {
	if x != nil && x.TotalPnl != nil {
		return *x.TotalPnl
	}
	return 0
}

func (x *PnL) GetReturnPercent() float64 {
	if x != nil && x.ReturnPercent != nil {
		return *x.ReturnPercent
	}
	return 0
}

func (x *PnL) GetTimeWeightedReturn() float64 {
	if x != nil && x.TimeWeightedReturn != nil {
		return *x.TimeWeightedReturn
	}
	return 0
}

func (x *PnL) GetMoneyWeightedReturn() float64 {
	if x != nil && x.MoneyWeightedReturn != nil {
		return *x.MoneyWeightedReturn
	}
	return 0
}

func (x *PnL) GetTotalFees() float64 {
	if x != nil && x.TotalFees != nil {
		return *x.TotalFees
	}
	return 0
}

func (x *PnL) GetTransactionCount() int64 {
	if x != nil && x.TransactionCount != nil {
		return *x.TransactionCount
	}
	return 0
}

func (x *PnL) GetWinningTrades() int32 {
	if x != nil && x.WinningTrades != nil {
		return *x.WinningTrades
	}
	return 0
}

func (x *PnL) GetLosingTrades() int32 {
	if x != nil && x.LosingTrades != nil {
		return *x.LosingTrades
	}
	return 0
}

func (x *PnL) GetAvgWin() float64 {
	if x != nil && x.AvgWin != nil {
		return *x.AvgWin
	}
	return 0
}

func (x *PnL) GetAvgLoss() float64 {
	if x != nil && x.AvgLoss != nil {
		return *x.AvgLoss
	}
	return 0
}

func (x *PnL) GetWinRate() float64 {
	if x != nil && x.WinRate != nil {
		return *x.WinRate
	}
	return 0
}

func (x *PnL) GetProfitFactor() float64 {
	if x != nil && x.ProfitFactor != nil {
		return *x.ProfitFactor
	}
	return 0
}

func (x *PnL) GetMaxDrawdown() float64 {
	if x != nil && x.MaxDrawdown != nil {
		return *x.MaxDrawdown
	}
	return 0
}

func (x *PnL) GetSharpeRatio() float64 {
	if x != nil && x.SharpeRatio != nil {
		return *x.SharpeRatio
	}
	return 0
}

func (x *PnL) GetVolatility() float64 {
	if x != nil && x.Volatility != nil {
		return *x.Volatility
	}
	return 0
}

func (x *PnL) GetBenchmarkReturn() float64 {
	if x != nil && x.BenchmarkReturn != nil {
		return *x.BenchmarkReturn
	}
	return 0
}

func (x *PnL) GetAlpha() float64 {
	if x != nil && x.Alpha != nil {
		return *x.Alpha
	}
	return 0
}

func (x *PnL) GetBeta() float64 {
	if x != nil && x.Beta != nil {
		return *x.Beta
	}
	return 0
}

var File_proto_portfolio_v1_transaction_proto protoreflect.FileDescriptor

var file_proto_portfolio_v1_transaction_proto_rawDesc = []byte{
	0x0a, 0x24, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69,
	0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x63, 0x71, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xef, 0x0a, 0x0a, 0x0b, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c,
	0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x70,
	0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x40, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x48, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x07, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x07, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x08, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x0e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0a, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x0b, 0x52, 0x03, 0x66, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x66, 0x65,
	0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0c, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x0d, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x0e, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x42, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x0f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65,
	0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x48, 0x13, 0x52, 0x0b, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x14,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x16, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x35, 0x0a, 0x14, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x5f, 0x70, 0x6e, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x48, 0x17, 0x52,
	0x12, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x50, 0x6e, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x5f, 0x70, 0x6e, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x48, 0x18, 0x52, 0x0b,
	0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x6e, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f,
	0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x69, 0x64,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x72, 0x65,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x6e, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72,
	0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x6e, 0x6c, 0x22, 0x8f, 0x0e, 0x0a, 0x03,
	0x50, 0x6e, 0x4c, 0x12, 0x1a, 0x0a, 0x06, 0x70, 0x6e, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x70, 0x6e, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c,
	0x69, 0x6f, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a,
	0x0c, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48,
	0x04, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x05, 0x52, 0x09, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x29, 0x0a, 0x0e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0c, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x07, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x48, 0x08,
	0x52, 0x0b, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x0a, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x5f, 0x70, 0x6e, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0b, 0x52, 0x0b,
	0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x6e, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x6e, 0x6c,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0c, 0x52, 0x0d, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x50, 0x6e, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6e, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0d, 0x52,
	0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6e, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x0e, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0f, 0x52, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x37, 0x0a, 0x15, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x48, 0x10,
	0x52, 0x13, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x48, 0x11, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x48, 0x12, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x13, 0x52, 0x0d, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6c, 0x6f,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x14, 0x52, 0x0c, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x61, 0x76, 0x67, 0x5f, 0x77, 0x69, 0x6e, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x01, 0x48, 0x15, 0x52, 0x06, 0x61, 0x76, 0x67, 0x57, 0x69, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x76, 0x67, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x16, 0x52, 0x07, 0x61, 0x76, 0x67, 0x4c, 0x6f, 0x73, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x17, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x48, 0x18, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x6d, 0x61, 0x78, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x19, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x72, 0x61, 0x77, 0x64, 0x6f, 0x77,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x70, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1a, 0x52, 0x0b, 0x73, 0x68,
	0x61, 0x72, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a,
	0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x1b, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x2e, 0x0a, 0x10, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1c, 0x52, 0x0f, 0x62,
	0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x1d, 0x52, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x62, 0x65, 0x74, 0x61, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1e, 0x52, 0x04, 0x62, 0x65,
	0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x6e, 0x6c, 0x5f, 0x69, 0x64,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x69,
	0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72,
	0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x6e, 0x6c, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x6e, 0x6c, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6e, 0x6c, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6d, 0x6f, 0x6e,
	0x65, 0x79, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x65,
	0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x69, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c,
	0x6f, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x61, 0x76, 0x67, 0x5f, 0x77, 0x69, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x76, 0x67,
	0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x72, 0x61,
	0x77, 0x64, 0x6f, 0x77, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x70, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x6f, 0x6c, 0x61, 0x74,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d,
	0x61, 0x72, 0x6b, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62, 0x65, 0x74, 0x61, 0x2a, 0x9f, 0x03,
	0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x55, 0x59, 0x10, 0x01, 0x12, 0x19, 0x0a,
	0x15, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44,
	0x52, 0x41, 0x57, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x46, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x45, 0x45, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x44,
	0x45, 0x4e, 0x44, 0x10, 0x08, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x51, 0x55, 0x49, 0x44,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x49, 0x52, 0x44,
	0x52, 0x4f, 0x50, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4b, 0x45, 0x10,
	0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x54, 0x41, 0x4b, 0x45, 0x10, 0x0c, 0x2a,
	0xdd, 0x01, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x42,
	0x44, 0x5a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6f,
	0x6d, 0x62, 0x69, 0x6e, 0x65, 0x2d, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x2f, 0x63, 0x71,
	0x63, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x71, 0x63, 0x2f, 0x70, 0x6f, 0x72,
	0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f,
	0x6c, 0x69, 0x6f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_portfolio_v1_transaction_proto_rawDescOnce sync.Once
	file_proto_portfolio_v1_transaction_proto_rawDescData = file_proto_portfolio_v1_transaction_proto_rawDesc
)

func file_proto_portfolio_v1_transaction_proto_rawDescGZIP() []byte {
	file_proto_portfolio_v1_transaction_proto_rawDescOnce.Do(func() {
		file_proto_portfolio_v1_transaction_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_portfolio_v1_transaction_proto_rawDescData)
	})
	return file_proto_portfolio_v1_transaction_proto_rawDescData
}

var file_proto_portfolio_v1_transaction_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_portfolio_v1_transaction_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_portfolio_v1_transaction_proto_goTypes = []interface{}{
	(TransactionType)(0),        // 0: cqc.portfolio.v1.TransactionType
	(TransactionStatus)(0),      // 1: cqc.portfolio.v1.TransactionStatus
	(*Transaction)(nil),         // 2: cqc.portfolio.v1.Transaction
	(*PnL)(nil),                 // 3: cqc.portfolio.v1.PnL
	(*timestamp.Timestamp)(nil), // 4: google.protobuf.Timestamp
}
var file_proto_portfolio_v1_transaction_proto_depIdxs = []int32{
	0, // 0: cqc.portfolio.v1.Transaction.type:type_name -> cqc.portfolio.v1.TransactionType
	1, // 1: cqc.portfolio.v1.Transaction.status:type_name -> cqc.portfolio.v1.TransactionStatus
	4, // 2: cqc.portfolio.v1.Transaction.timestamp:type_name -> google.protobuf.Timestamp
	4, // 3: cqc.portfolio.v1.Transaction.confirmed_at:type_name -> google.protobuf.Timestamp
	4, // 4: cqc.portfolio.v1.PnL.period_start:type_name -> google.protobuf.Timestamp
	4, // 5: cqc.portfolio.v1.PnL.period_end:type_name -> google.protobuf.Timestamp
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_proto_portfolio_v1_transaction_proto_init() }
func file_proto_portfolio_v1_transaction_proto_init() {
	if File_proto_portfolio_v1_transaction_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_portfolio_v1_transaction_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_portfolio_v1_transaction_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PnL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_portfolio_v1_transaction_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_proto_portfolio_v1_transaction_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_portfolio_v1_transaction_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_portfolio_v1_transaction_proto_goTypes,
		DependencyIndexes: file_proto_portfolio_v1_transaction_proto_depIdxs,
		EnumInfos:         file_proto_portfolio_v1_transaction_proto_enumTypes,
		MessageInfos:      file_proto_portfolio_v1_transaction_proto_msgTypes,
	}.Build()
	File_proto_portfolio_v1_transaction_proto = out.File
	file_proto_portfolio_v1_transaction_proto_rawDesc = nil
	file_proto_portfolio_v1_transaction_proto_goTypes = nil
	file_proto_portfolio_v1_transaction_proto_depIdxs = nil
}

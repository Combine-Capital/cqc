// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/services/v1/venue_gateway.proto

package servicesv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VenueGateway_CreateAccount_FullMethodName          = "/cqc.services.v1.VenueGateway/CreateAccount"
	VenueGateway_GetAccount_FullMethodName             = "/cqc.services.v1.VenueGateway/GetAccount"
	VenueGateway_UpdateAccount_FullMethodName          = "/cqc.services.v1.VenueGateway/UpdateAccount"
	VenueGateway_DeleteAccount_FullMethodName          = "/cqc.services.v1.VenueGateway/DeleteAccount"
	VenueGateway_ListAccounts_FullMethodName           = "/cqc.services.v1.VenueGateway/ListAccounts"
	VenueGateway_VerifyCredentials_FullMethodName      = "/cqc.services.v1.VenueGateway/VerifyCredentials"
	VenueGateway_GetBalance_FullMethodName             = "/cqc.services.v1.VenueGateway/GetBalance"
	VenueGateway_ListBalances_FullMethodName           = "/cqc.services.v1.VenueGateway/ListBalances"
	VenueGateway_StreamBalances_FullMethodName         = "/cqc.services.v1.VenueGateway/StreamBalances"
	VenueGateway_PlaceOrder_FullMethodName             = "/cqc.services.v1.VenueGateway/PlaceOrder"
	VenueGateway_CancelOrder_FullMethodName            = "/cqc.services.v1.VenueGateway/CancelOrder"
	VenueGateway_CancelAllOrders_FullMethodName        = "/cqc.services.v1.VenueGateway/CancelAllOrders"
	VenueGateway_ModifyOrder_FullMethodName            = "/cqc.services.v1.VenueGateway/ModifyOrder"
	VenueGateway_GetOrder_FullMethodName               = "/cqc.services.v1.VenueGateway/GetOrder"
	VenueGateway_ListOrders_FullMethodName             = "/cqc.services.v1.VenueGateway/ListOrders"
	VenueGateway_StreamOrders_FullMethodName           = "/cqc.services.v1.VenueGateway/StreamOrders"
	VenueGateway_GetExecutionReport_FullMethodName     = "/cqc.services.v1.VenueGateway/GetExecutionReport"
	VenueGateway_ListExecutionReports_FullMethodName   = "/cqc.services.v1.VenueGateway/ListExecutionReports"
	VenueGateway_StreamExecutionReports_FullMethodName = "/cqc.services.v1.VenueGateway/StreamExecutionReports"
	VenueGateway_Deposit_FullMethodName                = "/cqc.services.v1.VenueGateway/Deposit"
	VenueGateway_Withdraw_FullMethodName               = "/cqc.services.v1.VenueGateway/Withdraw"
	VenueGateway_GetDepositAddress_FullMethodName      = "/cqc.services.v1.VenueGateway/GetDepositAddress"
	VenueGateway_ListDeposits_FullMethodName           = "/cqc.services.v1.VenueGateway/ListDeposits"
	VenueGateway_ListWithdrawals_FullMethodName        = "/cqc.services.v1.VenueGateway/ListWithdrawals"
	VenueGateway_GetTradingLimits_FullMethodName       = "/cqc.services.v1.VenueGateway/GetTradingLimits"
	VenueGateway_GetAccountHealth_FullMethodName       = "/cqc.services.v1.VenueGateway/GetAccountHealth"
)

// VenueGatewayClient is the client API for VenueGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VenueGatewayClient interface {
	// CreateAccount registers a new venue account with credentials.
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	// GetAccount retrieves a specific venue account.
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error)
	// UpdateAccount updates account settings and credentials.
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error)
	// DeleteAccount removes a venue account.
	DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error)
	// ListAccounts retrieves all venue accounts for a portfolio or owner.
	ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error)
	// VerifyCredentials tests venue API credentials.
	VerifyCredentials(ctx context.Context, in *VerifyCredentialsRequest, opts ...grpc.CallOption) (*VerifyCredentialsResponse, error)
	// GetBalance retrieves the balance for a specific asset in an account.
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
	// ListBalances retrieves all balances for a venue account.
	ListBalances(ctx context.Context, in *ListBalancesRequest, opts ...grpc.CallOption) (*ListBalancesResponse, error)
	// StreamBalances streams real-time balance updates for an account.
	StreamBalances(ctx context.Context, in *StreamBalancesRequest, opts ...grpc.CallOption) (VenueGateway_StreamBalancesClient, error)
	// PlaceOrder submits a new order to a venue.
	PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...grpc.CallOption) (*PlaceOrderResponse, error)
	// CancelOrder cancels an existing order.
	CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error)
	// CancelAllOrders cancels all open orders for an account or trading pair.
	CancelAllOrders(ctx context.Context, in *CancelAllOrdersRequest, opts ...grpc.CallOption) (*CancelAllOrdersResponse, error)
	// ModifyOrder modifies an existing order (price, quantity, etc.).
	ModifyOrder(ctx context.Context, in *ModifyOrderRequest, opts ...grpc.CallOption) (*ModifyOrderResponse, error)
	// GetOrder retrieves a specific order by ID.
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error)
	// ListOrders retrieves orders for an account with filtering.
	ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error)
	// StreamOrders streams real-time order status updates.
	StreamOrders(ctx context.Context, in *StreamOrdersRequest, opts ...grpc.CallOption) (VenueGateway_StreamOrdersClient, error)
	// GetExecutionReport retrieves a specific execution report.
	GetExecutionReport(ctx context.Context, in *GetExecutionReportRequest, opts ...grpc.CallOption) (*GetExecutionReportResponse, error)
	// ListExecutionReports retrieves execution reports for orders.
	ListExecutionReports(ctx context.Context, in *ListExecutionReportsRequest, opts ...grpc.CallOption) (*ListExecutionReportsResponse, error)
	// StreamExecutionReports streams real-time execution reports.
	StreamExecutionReports(ctx context.Context, in *StreamExecutionReportsRequest, opts ...grpc.CallOption) (VenueGateway_StreamExecutionReportsClient, error)
	// Deposit initiates a deposit to a venue account.
	Deposit(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositResponse, error)
	// Withdraw initiates a withdrawal from a venue account.
	Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error)
	// GetDepositAddress retrieves the deposit address for an asset.
	GetDepositAddress(ctx context.Context, in *GetDepositAddressRequest, opts ...grpc.CallOption) (*GetDepositAddressResponse, error)
	// ListDeposits retrieves deposit history.
	ListDeposits(ctx context.Context, in *ListDepositsRequest, opts ...grpc.CallOption) (*ListDepositsResponse, error)
	// ListWithdrawals retrieves withdrawal history.
	ListWithdrawals(ctx context.Context, in *ListWithdrawalsRequest, opts ...grpc.CallOption) (*ListWithdrawalsResponse, error)
	// GetTradingLimits retrieves trading limits and restrictions for an account.
	GetTradingLimits(ctx context.Context, in *GetTradingLimitsRequest, opts ...grpc.CallOption) (*GetTradingLimitsResponse, error)
	// GetAccountHealth retrieves account health metrics (margin, liquidation risk).
	GetAccountHealth(ctx context.Context, in *GetAccountHealthRequest, opts ...grpc.CallOption) (*GetAccountHealthResponse, error)
}

type venueGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewVenueGatewayClient(cc grpc.ClientConnInterface) VenueGatewayClient {
	return &venueGatewayClient{cc}
}

func (c *venueGatewayClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, VenueGateway_CreateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *venueGatewayClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	out := new(GetAccountResponse)
	err := c.cc.Invoke(ctx, VenueGateway_GetAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *venueGatewayClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error) {
	out := new(UpdateAccountResponse)
	err := c.cc.Invoke(ctx, VenueGateway_UpdateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *venueGatewayClient) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error) {
	out := new(DeleteAccountResponse)
	err := c.cc.Invoke(ctx, VenueGateway_DeleteAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *venueGatewayClient) ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error) {
	out := new(ListAccountsResponse)
	err := c.cc.Invoke(ctx, VenueGateway_ListAccounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *venueGatewayClient) VerifyCredentials(ctx context.Context, in *VerifyCredentialsRequest, opts ...grpc.CallOption) (*VerifyCredentialsResponse, error) {
	out := new(VerifyCredentialsResponse)
	err := c.cc.Invoke(ctx, VenueGateway_VerifyCredentials_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *venueGatewayClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, VenueGateway_GetBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *venueGatewayClient) ListBalances(ctx context.Context, in *ListBalancesRequest, opts ...grpc.CallOption) (*ListBalancesResponse, error) {
	out := new(ListBalancesResponse)
	err := c.cc.Invoke(ctx, VenueGateway_ListBalances_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *venueGatewayClient) StreamBalances(ctx context.Context, in *StreamBalancesRequest, opts ...grpc.CallOption) (VenueGateway_StreamBalancesClient, error) {
	stream, err := c.cc.NewStream(ctx, &VenueGateway_ServiceDesc.Streams[0], VenueGateway_StreamBalances_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &venueGatewayStreamBalancesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VenueGateway_StreamBalancesClient interface {
	Recv() (*StreamBalancesResponse, error)
	grpc.ClientStream
}

type venueGatewayStreamBalancesClient struct {
	grpc.ClientStream
}

func (x *venueGatewayStreamBalancesClient) Recv() (*StreamBalancesResponse, error) {
	m := new(StreamBalancesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *venueGatewayClient) PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...grpc.CallOption) (*PlaceOrderResponse, error) {
	out := new(PlaceOrderResponse)
	err := c.cc.Invoke(ctx, VenueGateway_PlaceOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *venueGatewayClient) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error) {
	out := new(CancelOrderResponse)
	err := c.cc.Invoke(ctx, VenueGateway_CancelOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *venueGatewayClient) CancelAllOrders(ctx context.Context, in *CancelAllOrdersRequest, opts ...grpc.CallOption) (*CancelAllOrdersResponse, error) {
	out := new(CancelAllOrdersResponse)
	err := c.cc.Invoke(ctx, VenueGateway_CancelAllOrders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *venueGatewayClient) ModifyOrder(ctx context.Context, in *ModifyOrderRequest, opts ...grpc.CallOption) (*ModifyOrderResponse, error) {
	out := new(ModifyOrderResponse)
	err := c.cc.Invoke(ctx, VenueGateway_ModifyOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *venueGatewayClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error) {
	out := new(GetOrderResponse)
	err := c.cc.Invoke(ctx, VenueGateway_GetOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *venueGatewayClient) ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error) {
	out := new(ListOrdersResponse)
	err := c.cc.Invoke(ctx, VenueGateway_ListOrders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *venueGatewayClient) StreamOrders(ctx context.Context, in *StreamOrdersRequest, opts ...grpc.CallOption) (VenueGateway_StreamOrdersClient, error) {
	stream, err := c.cc.NewStream(ctx, &VenueGateway_ServiceDesc.Streams[1], VenueGateway_StreamOrders_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &venueGatewayStreamOrdersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VenueGateway_StreamOrdersClient interface {
	Recv() (*StreamOrdersResponse, error)
	grpc.ClientStream
}

type venueGatewayStreamOrdersClient struct {
	grpc.ClientStream
}

func (x *venueGatewayStreamOrdersClient) Recv() (*StreamOrdersResponse, error) {
	m := new(StreamOrdersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *venueGatewayClient) GetExecutionReport(ctx context.Context, in *GetExecutionReportRequest, opts ...grpc.CallOption) (*GetExecutionReportResponse, error) {
	out := new(GetExecutionReportResponse)
	err := c.cc.Invoke(ctx, VenueGateway_GetExecutionReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *venueGatewayClient) ListExecutionReports(ctx context.Context, in *ListExecutionReportsRequest, opts ...grpc.CallOption) (*ListExecutionReportsResponse, error) {
	out := new(ListExecutionReportsResponse)
	err := c.cc.Invoke(ctx, VenueGateway_ListExecutionReports_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *venueGatewayClient) StreamExecutionReports(ctx context.Context, in *StreamExecutionReportsRequest, opts ...grpc.CallOption) (VenueGateway_StreamExecutionReportsClient, error) {
	stream, err := c.cc.NewStream(ctx, &VenueGateway_ServiceDesc.Streams[2], VenueGateway_StreamExecutionReports_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &venueGatewayStreamExecutionReportsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VenueGateway_StreamExecutionReportsClient interface {
	Recv() (*StreamExecutionReportsResponse, error)
	grpc.ClientStream
}

type venueGatewayStreamExecutionReportsClient struct {
	grpc.ClientStream
}

func (x *venueGatewayStreamExecutionReportsClient) Recv() (*StreamExecutionReportsResponse, error) {
	m := new(StreamExecutionReportsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *venueGatewayClient) Deposit(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositResponse, error) {
	out := new(DepositResponse)
	err := c.cc.Invoke(ctx, VenueGateway_Deposit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *venueGatewayClient) Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error) {
	out := new(WithdrawResponse)
	err := c.cc.Invoke(ctx, VenueGateway_Withdraw_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *venueGatewayClient) GetDepositAddress(ctx context.Context, in *GetDepositAddressRequest, opts ...grpc.CallOption) (*GetDepositAddressResponse, error) {
	out := new(GetDepositAddressResponse)
	err := c.cc.Invoke(ctx, VenueGateway_GetDepositAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *venueGatewayClient) ListDeposits(ctx context.Context, in *ListDepositsRequest, opts ...grpc.CallOption) (*ListDepositsResponse, error) {
	out := new(ListDepositsResponse)
	err := c.cc.Invoke(ctx, VenueGateway_ListDeposits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *venueGatewayClient) ListWithdrawals(ctx context.Context, in *ListWithdrawalsRequest, opts ...grpc.CallOption) (*ListWithdrawalsResponse, error) {
	out := new(ListWithdrawalsResponse)
	err := c.cc.Invoke(ctx, VenueGateway_ListWithdrawals_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *venueGatewayClient) GetTradingLimits(ctx context.Context, in *GetTradingLimitsRequest, opts ...grpc.CallOption) (*GetTradingLimitsResponse, error) {
	out := new(GetTradingLimitsResponse)
	err := c.cc.Invoke(ctx, VenueGateway_GetTradingLimits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *venueGatewayClient) GetAccountHealth(ctx context.Context, in *GetAccountHealthRequest, opts ...grpc.CallOption) (*GetAccountHealthResponse, error) {
	out := new(GetAccountHealthResponse)
	err := c.cc.Invoke(ctx, VenueGateway_GetAccountHealth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VenueGatewayServer is the server API for VenueGateway service.
// All implementations must embed UnimplementedVenueGatewayServer
// for forward compatibility
type VenueGatewayServer interface {
	// CreateAccount registers a new venue account with credentials.
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	// GetAccount retrieves a specific venue account.
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error)
	// UpdateAccount updates account settings and credentials.
	UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error)
	// DeleteAccount removes a venue account.
	DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error)
	// ListAccounts retrieves all venue accounts for a portfolio or owner.
	ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error)
	// VerifyCredentials tests venue API credentials.
	VerifyCredentials(context.Context, *VerifyCredentialsRequest) (*VerifyCredentialsResponse, error)
	// GetBalance retrieves the balance for a specific asset in an account.
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error)
	// ListBalances retrieves all balances for a venue account.
	ListBalances(context.Context, *ListBalancesRequest) (*ListBalancesResponse, error)
	// StreamBalances streams real-time balance updates for an account.
	StreamBalances(*StreamBalancesRequest, VenueGateway_StreamBalancesServer) error
	// PlaceOrder submits a new order to a venue.
	PlaceOrder(context.Context, *PlaceOrderRequest) (*PlaceOrderResponse, error)
	// CancelOrder cancels an existing order.
	CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error)
	// CancelAllOrders cancels all open orders for an account or trading pair.
	CancelAllOrders(context.Context, *CancelAllOrdersRequest) (*CancelAllOrdersResponse, error)
	// ModifyOrder modifies an existing order (price, quantity, etc.).
	ModifyOrder(context.Context, *ModifyOrderRequest) (*ModifyOrderResponse, error)
	// GetOrder retrieves a specific order by ID.
	GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error)
	// ListOrders retrieves orders for an account with filtering.
	ListOrders(context.Context, *ListOrdersRequest) (*ListOrdersResponse, error)
	// StreamOrders streams real-time order status updates.
	StreamOrders(*StreamOrdersRequest, VenueGateway_StreamOrdersServer) error
	// GetExecutionReport retrieves a specific execution report.
	GetExecutionReport(context.Context, *GetExecutionReportRequest) (*GetExecutionReportResponse, error)
	// ListExecutionReports retrieves execution reports for orders.
	ListExecutionReports(context.Context, *ListExecutionReportsRequest) (*ListExecutionReportsResponse, error)
	// StreamExecutionReports streams real-time execution reports.
	StreamExecutionReports(*StreamExecutionReportsRequest, VenueGateway_StreamExecutionReportsServer) error
	// Deposit initiates a deposit to a venue account.
	Deposit(context.Context, *DepositRequest) (*DepositResponse, error)
	// Withdraw initiates a withdrawal from a venue account.
	Withdraw(context.Context, *WithdrawRequest) (*WithdrawResponse, error)
	// GetDepositAddress retrieves the deposit address for an asset.
	GetDepositAddress(context.Context, *GetDepositAddressRequest) (*GetDepositAddressResponse, error)
	// ListDeposits retrieves deposit history.
	ListDeposits(context.Context, *ListDepositsRequest) (*ListDepositsResponse, error)
	// ListWithdrawals retrieves withdrawal history.
	ListWithdrawals(context.Context, *ListWithdrawalsRequest) (*ListWithdrawalsResponse, error)
	// GetTradingLimits retrieves trading limits and restrictions for an account.
	GetTradingLimits(context.Context, *GetTradingLimitsRequest) (*GetTradingLimitsResponse, error)
	// GetAccountHealth retrieves account health metrics (margin, liquidation risk).
	GetAccountHealth(context.Context, *GetAccountHealthRequest) (*GetAccountHealthResponse, error)
	mustEmbedUnimplementedVenueGatewayServer()
}

// UnimplementedVenueGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedVenueGatewayServer struct {
}

func (UnimplementedVenueGatewayServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedVenueGatewayServer) GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedVenueGatewayServer) UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedVenueGatewayServer) DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedVenueGatewayServer) ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccounts not implemented")
}
func (UnimplementedVenueGatewayServer) VerifyCredentials(context.Context, *VerifyCredentialsRequest) (*VerifyCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyCredentials not implemented")
}
func (UnimplementedVenueGatewayServer) GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedVenueGatewayServer) ListBalances(context.Context, *ListBalancesRequest) (*ListBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBalances not implemented")
}
func (UnimplementedVenueGatewayServer) StreamBalances(*StreamBalancesRequest, VenueGateway_StreamBalancesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamBalances not implemented")
}
func (UnimplementedVenueGatewayServer) PlaceOrder(context.Context, *PlaceOrderRequest) (*PlaceOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceOrder not implemented")
}
func (UnimplementedVenueGatewayServer) CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedVenueGatewayServer) CancelAllOrders(context.Context, *CancelAllOrdersRequest) (*CancelAllOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelAllOrders not implemented")
}
func (UnimplementedVenueGatewayServer) ModifyOrder(context.Context, *ModifyOrderRequest) (*ModifyOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyOrder not implemented")
}
func (UnimplementedVenueGatewayServer) GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedVenueGatewayServer) ListOrders(context.Context, *ListOrdersRequest) (*ListOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrders not implemented")
}
func (UnimplementedVenueGatewayServer) StreamOrders(*StreamOrdersRequest, VenueGateway_StreamOrdersServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamOrders not implemented")
}
func (UnimplementedVenueGatewayServer) GetExecutionReport(context.Context, *GetExecutionReportRequest) (*GetExecutionReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExecutionReport not implemented")
}
func (UnimplementedVenueGatewayServer) ListExecutionReports(context.Context, *ListExecutionReportsRequest) (*ListExecutionReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExecutionReports not implemented")
}
func (UnimplementedVenueGatewayServer) StreamExecutionReports(*StreamExecutionReportsRequest, VenueGateway_StreamExecutionReportsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamExecutionReports not implemented")
}
func (UnimplementedVenueGatewayServer) Deposit(context.Context, *DepositRequest) (*DepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit not implemented")
}
func (UnimplementedVenueGatewayServer) Withdraw(context.Context, *WithdrawRequest) (*WithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (UnimplementedVenueGatewayServer) GetDepositAddress(context.Context, *GetDepositAddressRequest) (*GetDepositAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepositAddress not implemented")
}
func (UnimplementedVenueGatewayServer) ListDeposits(context.Context, *ListDepositsRequest) (*ListDepositsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeposits not implemented")
}
func (UnimplementedVenueGatewayServer) ListWithdrawals(context.Context, *ListWithdrawalsRequest) (*ListWithdrawalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWithdrawals not implemented")
}
func (UnimplementedVenueGatewayServer) GetTradingLimits(context.Context, *GetTradingLimitsRequest) (*GetTradingLimitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTradingLimits not implemented")
}
func (UnimplementedVenueGatewayServer) GetAccountHealth(context.Context, *GetAccountHealthRequest) (*GetAccountHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountHealth not implemented")
}
func (UnimplementedVenueGatewayServer) mustEmbedUnimplementedVenueGatewayServer() {}

// UnsafeVenueGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VenueGatewayServer will
// result in compilation errors.
type UnsafeVenueGatewayServer interface {
	mustEmbedUnimplementedVenueGatewayServer()
}

func RegisterVenueGatewayServer(s grpc.ServiceRegistrar, srv VenueGatewayServer) {
	s.RegisterService(&VenueGateway_ServiceDesc, srv)
}

func _VenueGateway_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VenueGatewayServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VenueGateway_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VenueGatewayServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VenueGateway_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VenueGatewayServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VenueGateway_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VenueGatewayServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VenueGateway_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VenueGatewayServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VenueGateway_UpdateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VenueGatewayServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VenueGateway_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VenueGatewayServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VenueGateway_DeleteAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VenueGatewayServer).DeleteAccount(ctx, req.(*DeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VenueGateway_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VenueGatewayServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VenueGateway_ListAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VenueGatewayServer).ListAccounts(ctx, req.(*ListAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VenueGateway_VerifyCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VenueGatewayServer).VerifyCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VenueGateway_VerifyCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VenueGatewayServer).VerifyCredentials(ctx, req.(*VerifyCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VenueGateway_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VenueGatewayServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VenueGateway_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VenueGatewayServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VenueGateway_ListBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VenueGatewayServer).ListBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VenueGateway_ListBalances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VenueGatewayServer).ListBalances(ctx, req.(*ListBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VenueGateway_StreamBalances_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamBalancesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VenueGatewayServer).StreamBalances(m, &venueGatewayStreamBalancesServer{stream})
}

type VenueGateway_StreamBalancesServer interface {
	Send(*StreamBalancesResponse) error
	grpc.ServerStream
}

type venueGatewayStreamBalancesServer struct {
	grpc.ServerStream
}

func (x *venueGatewayStreamBalancesServer) Send(m *StreamBalancesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _VenueGateway_PlaceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VenueGatewayServer).PlaceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VenueGateway_PlaceOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VenueGatewayServer).PlaceOrder(ctx, req.(*PlaceOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VenueGateway_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VenueGatewayServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VenueGateway_CancelOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VenueGatewayServer).CancelOrder(ctx, req.(*CancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VenueGateway_CancelAllOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelAllOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VenueGatewayServer).CancelAllOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VenueGateway_CancelAllOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VenueGatewayServer).CancelAllOrders(ctx, req.(*CancelAllOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VenueGateway_ModifyOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VenueGatewayServer).ModifyOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VenueGateway_ModifyOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VenueGatewayServer).ModifyOrder(ctx, req.(*ModifyOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VenueGateway_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VenueGatewayServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VenueGateway_GetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VenueGatewayServer).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VenueGateway_ListOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VenueGatewayServer).ListOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VenueGateway_ListOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VenueGatewayServer).ListOrders(ctx, req.(*ListOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VenueGateway_StreamOrders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamOrdersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VenueGatewayServer).StreamOrders(m, &venueGatewayStreamOrdersServer{stream})
}

type VenueGateway_StreamOrdersServer interface {
	Send(*StreamOrdersResponse) error
	grpc.ServerStream
}

type venueGatewayStreamOrdersServer struct {
	grpc.ServerStream
}

func (x *venueGatewayStreamOrdersServer) Send(m *StreamOrdersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _VenueGateway_GetExecutionReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExecutionReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VenueGatewayServer).GetExecutionReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VenueGateway_GetExecutionReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VenueGatewayServer).GetExecutionReport(ctx, req.(*GetExecutionReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VenueGateway_ListExecutionReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExecutionReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VenueGatewayServer).ListExecutionReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VenueGateway_ListExecutionReports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VenueGatewayServer).ListExecutionReports(ctx, req.(*ListExecutionReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VenueGateway_StreamExecutionReports_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamExecutionReportsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VenueGatewayServer).StreamExecutionReports(m, &venueGatewayStreamExecutionReportsServer{stream})
}

type VenueGateway_StreamExecutionReportsServer interface {
	Send(*StreamExecutionReportsResponse) error
	grpc.ServerStream
}

type venueGatewayStreamExecutionReportsServer struct {
	grpc.ServerStream
}

func (x *venueGatewayStreamExecutionReportsServer) Send(m *StreamExecutionReportsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _VenueGateway_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VenueGatewayServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VenueGateway_Deposit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VenueGatewayServer).Deposit(ctx, req.(*DepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VenueGateway_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VenueGatewayServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VenueGateway_Withdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VenueGatewayServer).Withdraw(ctx, req.(*WithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VenueGateway_GetDepositAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepositAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VenueGatewayServer).GetDepositAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VenueGateway_GetDepositAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VenueGatewayServer).GetDepositAddress(ctx, req.(*GetDepositAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VenueGateway_ListDeposits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDepositsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VenueGatewayServer).ListDeposits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VenueGateway_ListDeposits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VenueGatewayServer).ListDeposits(ctx, req.(*ListDepositsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VenueGateway_ListWithdrawals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWithdrawalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VenueGatewayServer).ListWithdrawals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VenueGateway_ListWithdrawals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VenueGatewayServer).ListWithdrawals(ctx, req.(*ListWithdrawalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VenueGateway_GetTradingLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTradingLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VenueGatewayServer).GetTradingLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VenueGateway_GetTradingLimits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VenueGatewayServer).GetTradingLimits(ctx, req.(*GetTradingLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VenueGateway_GetAccountHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VenueGatewayServer).GetAccountHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VenueGateway_GetAccountHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VenueGatewayServer).GetAccountHealth(ctx, req.(*GetAccountHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VenueGateway_ServiceDesc is the grpc.ServiceDesc for VenueGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VenueGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cqc.services.v1.VenueGateway",
	HandlerType: (*VenueGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _VenueGateway_CreateAccount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _VenueGateway_GetAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _VenueGateway_UpdateAccount_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _VenueGateway_DeleteAccount_Handler,
		},
		{
			MethodName: "ListAccounts",
			Handler:    _VenueGateway_ListAccounts_Handler,
		},
		{
			MethodName: "VerifyCredentials",
			Handler:    _VenueGateway_VerifyCredentials_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _VenueGateway_GetBalance_Handler,
		},
		{
			MethodName: "ListBalances",
			Handler:    _VenueGateway_ListBalances_Handler,
		},
		{
			MethodName: "PlaceOrder",
			Handler:    _VenueGateway_PlaceOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _VenueGateway_CancelOrder_Handler,
		},
		{
			MethodName: "CancelAllOrders",
			Handler:    _VenueGateway_CancelAllOrders_Handler,
		},
		{
			MethodName: "ModifyOrder",
			Handler:    _VenueGateway_ModifyOrder_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _VenueGateway_GetOrder_Handler,
		},
		{
			MethodName: "ListOrders",
			Handler:    _VenueGateway_ListOrders_Handler,
		},
		{
			MethodName: "GetExecutionReport",
			Handler:    _VenueGateway_GetExecutionReport_Handler,
		},
		{
			MethodName: "ListExecutionReports",
			Handler:    _VenueGateway_ListExecutionReports_Handler,
		},
		{
			MethodName: "Deposit",
			Handler:    _VenueGateway_Deposit_Handler,
		},
		{
			MethodName: "Withdraw",
			Handler:    _VenueGateway_Withdraw_Handler,
		},
		{
			MethodName: "GetDepositAddress",
			Handler:    _VenueGateway_GetDepositAddress_Handler,
		},
		{
			MethodName: "ListDeposits",
			Handler:    _VenueGateway_ListDeposits_Handler,
		},
		{
			MethodName: "ListWithdrawals",
			Handler:    _VenueGateway_ListWithdrawals_Handler,
		},
		{
			MethodName: "GetTradingLimits",
			Handler:    _VenueGateway_GetTradingLimits_Handler,
		},
		{
			MethodName: "GetAccountHealth",
			Handler:    _VenueGateway_GetAccountHealth_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamBalances",
			Handler:       _VenueGateway_StreamBalances_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamOrders",
			Handler:       _VenueGateway_StreamOrders_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamExecutionReports",
			Handler:       _VenueGateway_StreamExecutionReports_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/services/v1/venue_gateway.proto",
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: proto/services/v1/risk_engine.proto

package servicesv1

import (
	v1 "github.com/Combine-Capital/cqc/gen/go/cqc/events/v1"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// EvaluatePortfolioRiskRequest
type EvaluatePortfolioRiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortfolioId *string `protobuf:"bytes,1,opt,name=portfolio_id,json=portfolioId,proto3,oneof" json:"portfolio_id,omitempty"`
}

func (x *EvaluatePortfolioRiskRequest) Reset() {
	*x = EvaluatePortfolioRiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluatePortfolioRiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluatePortfolioRiskRequest) ProtoMessage() {}

func (x *EvaluatePortfolioRiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluatePortfolioRiskRequest.ProtoReflect.Descriptor instead.
func (*EvaluatePortfolioRiskRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{0}
}

func (x *EvaluatePortfolioRiskRequest) GetPortfolioId() string {
	if x != nil && x.PortfolioId != nil {
		return *x.PortfolioId
	}
	return ""
}

type EvaluatePortfolioRiskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OverallRiskScore *float64         `protobuf:"fixed64,1,opt,name=overall_risk_score,json=overallRiskScore,proto3,oneof" json:"overall_risk_score,omitempty"`
	Violations       []*RiskViolation `protobuf:"bytes,2,rep,name=violations,proto3" json:"violations,omitempty"`
	Warnings         []*RiskWarning   `protobuf:"bytes,3,rep,name=warnings,proto3" json:"warnings,omitempty"`
	Summary          *RiskSummary     `protobuf:"bytes,4,opt,name=summary,proto3,oneof" json:"summary,omitempty"`
}

func (x *EvaluatePortfolioRiskResponse) Reset() {
	*x = EvaluatePortfolioRiskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluatePortfolioRiskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluatePortfolioRiskResponse) ProtoMessage() {}

func (x *EvaluatePortfolioRiskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluatePortfolioRiskResponse.ProtoReflect.Descriptor instead.
func (*EvaluatePortfolioRiskResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{1}
}

func (x *EvaluatePortfolioRiskResponse) GetOverallRiskScore() float64 {
	if x != nil && x.OverallRiskScore != nil {
		return *x.OverallRiskScore
	}
	return 0
}

func (x *EvaluatePortfolioRiskResponse) GetViolations() []*RiskViolation {
	if x != nil {
		return x.Violations
	}
	return nil
}

func (x *EvaluatePortfolioRiskResponse) GetWarnings() []*RiskWarning {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *EvaluatePortfolioRiskResponse) GetSummary() *RiskSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

type RiskViolation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         *v1.RiskAlertType     `protobuf:"varint,1,opt,name=type,proto3,enum=cqc.events.v1.RiskAlertType,oneof" json:"type,omitempty"`
	Severity     *v1.RiskAlertSeverity `protobuf:"varint,2,opt,name=severity,proto3,enum=cqc.events.v1.RiskAlertSeverity,oneof" json:"severity,omitempty"`
	Message      *string               `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Threshold    *float64              `protobuf:"fixed64,4,opt,name=threshold,proto3,oneof" json:"threshold,omitempty"`
	CurrentValue *float64              `protobuf:"fixed64,5,opt,name=current_value,json=currentValue,proto3,oneof" json:"current_value,omitempty"`
}

func (x *RiskViolation) Reset() {
	*x = RiskViolation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskViolation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskViolation) ProtoMessage() {}

func (x *RiskViolation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskViolation.ProtoReflect.Descriptor instead.
func (*RiskViolation) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{2}
}

func (x *RiskViolation) GetType() v1.RiskAlertType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return v1.RiskAlertType(0)
}

func (x *RiskViolation) GetSeverity() v1.RiskAlertSeverity {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return v1.RiskAlertSeverity(0)
}

func (x *RiskViolation) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *RiskViolation) GetThreshold() float64 {
	if x != nil && x.Threshold != nil {
		return *x.Threshold
	}
	return 0
}

func (x *RiskViolation) GetCurrentValue() float64 {
	if x != nil && x.CurrentValue != nil {
		return *x.CurrentValue
	}
	return 0
}

type RiskWarning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message        *string `protobuf:"bytes,1,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Recommendation *string `protobuf:"bytes,2,opt,name=recommendation,proto3,oneof" json:"recommendation,omitempty"`
}

func (x *RiskWarning) Reset() {
	*x = RiskWarning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskWarning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskWarning) ProtoMessage() {}

func (x *RiskWarning) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskWarning.ProtoReflect.Descriptor instead.
func (*RiskWarning) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{3}
}

func (x *RiskWarning) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *RiskWarning) GetRecommendation() string {
	if x != nil && x.Recommendation != nil {
		return *x.Recommendation
	}
	return ""
}

type RiskSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalExposure     *float64 `protobuf:"fixed64,1,opt,name=total_exposure,json=totalExposure,proto3,oneof" json:"total_exposure,omitempty"`
	MaxSinglePosition *float64 `protobuf:"fixed64,2,opt,name=max_single_position,json=maxSinglePosition,proto3,oneof" json:"max_single_position,omitempty"`
	Leverage          *float64 `protobuf:"fixed64,3,opt,name=leverage,proto3,oneof" json:"leverage,omitempty"`
	Var_95            *float64 `protobuf:"fixed64,4,opt,name=var_95,json=var95,proto3,oneof" json:"var_95,omitempty"`
	MaxDrawdown       *float64 `protobuf:"fixed64,5,opt,name=max_drawdown,json=maxDrawdown,proto3,oneof" json:"max_drawdown,omitempty"`
}

func (x *RiskSummary) Reset() {
	*x = RiskSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskSummary) ProtoMessage() {}

func (x *RiskSummary) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskSummary.ProtoReflect.Descriptor instead.
func (*RiskSummary) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{4}
}

func (x *RiskSummary) GetTotalExposure() float64 {
	if x != nil && x.TotalExposure != nil {
		return *x.TotalExposure
	}
	return 0
}

func (x *RiskSummary) GetMaxSinglePosition() float64 {
	if x != nil && x.MaxSinglePosition != nil {
		return *x.MaxSinglePosition
	}
	return 0
}

func (x *RiskSummary) GetLeverage() float64 {
	if x != nil && x.Leverage != nil {
		return *x.Leverage
	}
	return 0
}

func (x *RiskSummary) GetVar_95() float64 {
	if x != nil && x.Var_95 != nil {
		return *x.Var_95
	}
	return 0
}

func (x *RiskSummary) GetMaxDrawdown() float64 {
	if x != nil && x.MaxDrawdown != nil {
		return *x.MaxDrawdown
	}
	return 0
}

// EvaluatePositionRiskRequest
type EvaluatePositionRiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositionId *string `protobuf:"bytes,1,opt,name=position_id,json=positionId,proto3,oneof" json:"position_id,omitempty"`
}

func (x *EvaluatePositionRiskRequest) Reset() {
	*x = EvaluatePositionRiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluatePositionRiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluatePositionRiskRequest) ProtoMessage() {}

func (x *EvaluatePositionRiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluatePositionRiskRequest.ProtoReflect.Descriptor instead.
func (*EvaluatePositionRiskRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{5}
}

func (x *EvaluatePositionRiskRequest) GetPositionId() string {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return ""
}

type EvaluatePositionRiskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositionRiskScore     *float64         `protobuf:"fixed64,1,opt,name=position_risk_score,json=positionRiskScore,proto3,oneof" json:"position_risk_score,omitempty"`
	LiquidationPrice      *float64         `protobuf:"fixed64,2,opt,name=liquidation_price,json=liquidationPrice,proto3,oneof" json:"liquidation_price,omitempty"`
	DistanceToLiquidation *float64         `protobuf:"fixed64,3,opt,name=distance_to_liquidation,json=distanceToLiquidation,proto3,oneof" json:"distance_to_liquidation,omitempty"`
	Violations            []*RiskViolation `protobuf:"bytes,4,rep,name=violations,proto3" json:"violations,omitempty"`
}

func (x *EvaluatePositionRiskResponse) Reset() {
	*x = EvaluatePositionRiskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluatePositionRiskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluatePositionRiskResponse) ProtoMessage() {}

func (x *EvaluatePositionRiskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluatePositionRiskResponse.ProtoReflect.Descriptor instead.
func (*EvaluatePositionRiskResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{6}
}

func (x *EvaluatePositionRiskResponse) GetPositionRiskScore() float64 {
	if x != nil && x.PositionRiskScore != nil {
		return *x.PositionRiskScore
	}
	return 0
}

func (x *EvaluatePositionRiskResponse) GetLiquidationPrice() float64 {
	if x != nil && x.LiquidationPrice != nil {
		return *x.LiquidationPrice
	}
	return 0
}

func (x *EvaluatePositionRiskResponse) GetDistanceToLiquidation() float64 {
	if x != nil && x.DistanceToLiquidation != nil {
		return *x.DistanceToLiquidation
	}
	return 0
}

func (x *EvaluatePositionRiskResponse) GetViolations() []*RiskViolation {
	if x != nil {
		return x.Violations
	}
	return nil
}

// CheckRiskLimitsRequest
type CheckRiskLimitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortfolioId *string  `protobuf:"bytes,1,opt,name=portfolio_id,json=portfolioId,proto3,oneof" json:"portfolio_id,omitempty"`
	AssetId     *string  `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3,oneof" json:"asset_id,omitempty"`
	Quantity    *float64 `protobuf:"fixed64,3,opt,name=quantity,proto3,oneof" json:"quantity,omitempty"`
	Price       *float64 `protobuf:"fixed64,4,opt,name=price,proto3,oneof" json:"price,omitempty"`
	Action      *string  `protobuf:"bytes,5,opt,name=action,proto3,oneof" json:"action,omitempty"`
}

func (x *CheckRiskLimitsRequest) Reset() {
	*x = CheckRiskLimitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRiskLimitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRiskLimitsRequest) ProtoMessage() {}

func (x *CheckRiskLimitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRiskLimitsRequest.ProtoReflect.Descriptor instead.
func (*CheckRiskLimitsRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{7}
}

func (x *CheckRiskLimitsRequest) GetPortfolioId() string {
	if x != nil && x.PortfolioId != nil {
		return *x.PortfolioId
	}
	return ""
}

func (x *CheckRiskLimitsRequest) GetAssetId() string {
	if x != nil && x.AssetId != nil {
		return *x.AssetId
	}
	return ""
}

func (x *CheckRiskLimitsRequest) GetQuantity() float64 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

func (x *CheckRiskLimitsRequest) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *CheckRiskLimitsRequest) GetAction() string {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return ""
}

type CheckRiskLimitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Allowed       *bool        `protobuf:"varint,1,opt,name=allowed,proto3,oneof" json:"allowed,omitempty"`
	Violations    []string     `protobuf:"bytes,2,rep,name=violations,proto3" json:"violations,omitempty"`
	DenialReason  *string      `protobuf:"bytes,3,opt,name=denial_reason,json=denialReason,proto3,oneof" json:"denial_reason,omitempty"`
	ProjectedRisk *RiskSummary `protobuf:"bytes,4,opt,name=projected_risk,json=projectedRisk,proto3,oneof" json:"projected_risk,omitempty"`
}

func (x *CheckRiskLimitsResponse) Reset() {
	*x = CheckRiskLimitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRiskLimitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRiskLimitsResponse) ProtoMessage() {}

func (x *CheckRiskLimitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRiskLimitsResponse.ProtoReflect.Descriptor instead.
func (*CheckRiskLimitsResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{8}
}

func (x *CheckRiskLimitsResponse) GetAllowed() bool {
	if x != nil && x.Allowed != nil {
		return *x.Allowed
	}
	return false
}

func (x *CheckRiskLimitsResponse) GetViolations() []string {
	if x != nil {
		return x.Violations
	}
	return nil
}

func (x *CheckRiskLimitsResponse) GetDenialReason() string {
	if x != nil && x.DenialReason != nil {
		return *x.DenialReason
	}
	return ""
}

func (x *CheckRiskLimitsResponse) GetProjectedRisk() *RiskSummary {
	if x != nil {
		return x.ProjectedRisk
	}
	return nil
}

// GetRiskMetricsRequest
type GetRiskMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortfolioId *string `protobuf:"bytes,1,opt,name=portfolio_id,json=portfolioId,proto3,oneof" json:"portfolio_id,omitempty"`
}

func (x *GetRiskMetricsRequest) Reset() {
	*x = GetRiskMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRiskMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRiskMetricsRequest) ProtoMessage() {}

func (x *GetRiskMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRiskMetricsRequest.ProtoReflect.Descriptor instead.
func (*GetRiskMetricsRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{9}
}

func (x *GetRiskMetricsRequest) GetPortfolioId() string {
	if x != nil && x.PortfolioId != nil {
		return *x.PortfolioId
	}
	return ""
}

type GetRiskMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueAtRisk_95    *float64             `protobuf:"fixed64,1,opt,name=value_at_risk_95,json=valueAtRisk95,proto3,oneof" json:"value_at_risk_95,omitempty"`
	ValueAtRisk_99    *float64             `protobuf:"fixed64,2,opt,name=value_at_risk_99,json=valueAtRisk99,proto3,oneof" json:"value_at_risk_99,omitempty"`
	ConditionalVar    *float64             `protobuf:"fixed64,3,opt,name=conditional_var,json=conditionalVar,proto3,oneof" json:"conditional_var,omitempty"`
	Beta              *float64             `protobuf:"fixed64,4,opt,name=beta,proto3,oneof" json:"beta,omitempty"`
	SharpeRatio       *float64             `protobuf:"fixed64,5,opt,name=sharpe_ratio,json=sharpeRatio,proto3,oneof" json:"sharpe_ratio,omitempty"`
	SortinoRatio      *float64             `protobuf:"fixed64,6,opt,name=sortino_ratio,json=sortinoRatio,proto3,oneof" json:"sortino_ratio,omitempty"`
	MaxDrawdown       *float64             `protobuf:"fixed64,7,opt,name=max_drawdown,json=maxDrawdown,proto3,oneof" json:"max_drawdown,omitempty"`
	Volatility        *float64             `protobuf:"fixed64,8,opt,name=volatility,proto3,oneof" json:"volatility,omitempty"`
	Leverage          *float64             `protobuf:"fixed64,9,opt,name=leverage,proto3,oneof" json:"leverage,omitempty"`
	MarginUtilization *float64             `protobuf:"fixed64,10,opt,name=margin_utilization,json=marginUtilization,proto3,oneof" json:"margin_utilization,omitempty"`
	ConcentrationRisk *float64             `protobuf:"fixed64,11,opt,name=concentration_risk,json=concentrationRisk,proto3,oneof" json:"concentration_risk,omitempty"`
	LiquidityScore    *float64             `protobuf:"fixed64,12,opt,name=liquidity_score,json=liquidityScore,proto3,oneof" json:"liquidity_score,omitempty"`
	CalculatedAt      *timestamp.Timestamp `protobuf:"bytes,13,opt,name=calculated_at,json=calculatedAt,proto3,oneof" json:"calculated_at,omitempty"`
}

func (x *GetRiskMetricsResponse) Reset() {
	*x = GetRiskMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRiskMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRiskMetricsResponse) ProtoMessage() {}

func (x *GetRiskMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRiskMetricsResponse.ProtoReflect.Descriptor instead.
func (*GetRiskMetricsResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{10}
}

func (x *GetRiskMetricsResponse) GetValueAtRisk_95() float64 {
	if x != nil && x.ValueAtRisk_95 != nil {
		return *x.ValueAtRisk_95
	}
	return 0
}

func (x *GetRiskMetricsResponse) GetValueAtRisk_99() float64 {
	if x != nil && x.ValueAtRisk_99 != nil {
		return *x.ValueAtRisk_99
	}
	return 0
}

func (x *GetRiskMetricsResponse) GetConditionalVar() float64 {
	if x != nil && x.ConditionalVar != nil {
		return *x.ConditionalVar
	}
	return 0
}

func (x *GetRiskMetricsResponse) GetBeta() float64 {
	if x != nil && x.Beta != nil {
		return *x.Beta
	}
	return 0
}

func (x *GetRiskMetricsResponse) GetSharpeRatio() float64 {
	if x != nil && x.SharpeRatio != nil {
		return *x.SharpeRatio
	}
	return 0
}

func (x *GetRiskMetricsResponse) GetSortinoRatio() float64 {
	if x != nil && x.SortinoRatio != nil {
		return *x.SortinoRatio
	}
	return 0
}

func (x *GetRiskMetricsResponse) GetMaxDrawdown() float64 {
	if x != nil && x.MaxDrawdown != nil {
		return *x.MaxDrawdown
	}
	return 0
}

func (x *GetRiskMetricsResponse) GetVolatility() float64 {
	if x != nil && x.Volatility != nil {
		return *x.Volatility
	}
	return 0
}

func (x *GetRiskMetricsResponse) GetLeverage() float64 {
	if x != nil && x.Leverage != nil {
		return *x.Leverage
	}
	return 0
}

func (x *GetRiskMetricsResponse) GetMarginUtilization() float64 {
	if x != nil && x.MarginUtilization != nil {
		return *x.MarginUtilization
	}
	return 0
}

func (x *GetRiskMetricsResponse) GetConcentrationRisk() float64 {
	if x != nil && x.ConcentrationRisk != nil {
		return *x.ConcentrationRisk
	}
	return 0
}

func (x *GetRiskMetricsResponse) GetLiquidityScore() float64 {
	if x != nil && x.LiquidityScore != nil {
		return *x.LiquidityScore
	}
	return 0
}

func (x *GetRiskMetricsResponse) GetCalculatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CalculatedAt
	}
	return nil
}

// CreateRiskAlertRequest
type CreateRiskAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlertType         *v1.RiskAlertType     `protobuf:"varint,1,opt,name=alert_type,json=alertType,proto3,enum=cqc.events.v1.RiskAlertType,oneof" json:"alert_type,omitempty"`
	Severity          *v1.RiskAlertSeverity `protobuf:"varint,2,opt,name=severity,proto3,enum=cqc.events.v1.RiskAlertSeverity,oneof" json:"severity,omitempty"`
	Message           *string               `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
	PortfolioId       *string               `protobuf:"bytes,4,opt,name=portfolio_id,json=portfolioId,proto3,oneof" json:"portfolio_id,omitempty"`
	PositionId        *string               `protobuf:"bytes,5,opt,name=position_id,json=positionId,proto3,oneof" json:"position_id,omitempty"`
	AssetId           *string               `protobuf:"bytes,6,opt,name=asset_id,json=assetId,proto3,oneof" json:"asset_id,omitempty"`
	VenueId           *string               `protobuf:"bytes,7,opt,name=venue_id,json=venueId,proto3,oneof" json:"venue_id,omitempty"`
	ThresholdValue    *float64              `protobuf:"fixed64,8,opt,name=threshold_value,json=thresholdValue,proto3,oneof" json:"threshold_value,omitempty"`
	CurrentValue      *float64              `protobuf:"fixed64,9,opt,name=current_value,json=currentValue,proto3,oneof" json:"current_value,omitempty"`
	RecommendedAction *string               `protobuf:"bytes,10,opt,name=recommended_action,json=recommendedAction,proto3,oneof" json:"recommended_action,omitempty"`
}

func (x *CreateRiskAlertRequest) Reset() {
	*x = CreateRiskAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRiskAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRiskAlertRequest) ProtoMessage() {}

func (x *CreateRiskAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRiskAlertRequest.ProtoReflect.Descriptor instead.
func (*CreateRiskAlertRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{11}
}

func (x *CreateRiskAlertRequest) GetAlertType() v1.RiskAlertType {
	if x != nil && x.AlertType != nil {
		return *x.AlertType
	}
	return v1.RiskAlertType(0)
}

func (x *CreateRiskAlertRequest) GetSeverity() v1.RiskAlertSeverity {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return v1.RiskAlertSeverity(0)
}

func (x *CreateRiskAlertRequest) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *CreateRiskAlertRequest) GetPortfolioId() string {
	if x != nil && x.PortfolioId != nil {
		return *x.PortfolioId
	}
	return ""
}

func (x *CreateRiskAlertRequest) GetPositionId() string {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return ""
}

func (x *CreateRiskAlertRequest) GetAssetId() string {
	if x != nil && x.AssetId != nil {
		return *x.AssetId
	}
	return ""
}

func (x *CreateRiskAlertRequest) GetVenueId() string {
	if x != nil && x.VenueId != nil {
		return *x.VenueId
	}
	return ""
}

func (x *CreateRiskAlertRequest) GetThresholdValue() float64 {
	if x != nil && x.ThresholdValue != nil {
		return *x.ThresholdValue
	}
	return 0
}

func (x *CreateRiskAlertRequest) GetCurrentValue() float64 {
	if x != nil && x.CurrentValue != nil {
		return *x.CurrentValue
	}
	return 0
}

func (x *CreateRiskAlertRequest) GetRecommendedAction() string {
	if x != nil && x.RecommendedAction != nil {
		return *x.RecommendedAction
	}
	return ""
}

type CreateRiskAlertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alert *v1.RiskAlert `protobuf:"bytes,1,opt,name=alert,proto3,oneof" json:"alert,omitempty"`
}

func (x *CreateRiskAlertResponse) Reset() {
	*x = CreateRiskAlertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRiskAlertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRiskAlertResponse) ProtoMessage() {}

func (x *CreateRiskAlertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRiskAlertResponse.ProtoReflect.Descriptor instead.
func (*CreateRiskAlertResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{12}
}

func (x *CreateRiskAlertResponse) GetAlert() *v1.RiskAlert {
	if x != nil {
		return x.Alert
	}
	return nil
}

// GetRiskAlertRequest
type GetRiskAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId *string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3,oneof" json:"event_id,omitempty"`
}

func (x *GetRiskAlertRequest) Reset() {
	*x = GetRiskAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRiskAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRiskAlertRequest) ProtoMessage() {}

func (x *GetRiskAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRiskAlertRequest.ProtoReflect.Descriptor instead.
func (*GetRiskAlertRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{13}
}

func (x *GetRiskAlertRequest) GetEventId() string {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return ""
}

type GetRiskAlertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alert *v1.RiskAlert `protobuf:"bytes,1,opt,name=alert,proto3,oneof" json:"alert,omitempty"`
}

func (x *GetRiskAlertResponse) Reset() {
	*x = GetRiskAlertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRiskAlertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRiskAlertResponse) ProtoMessage() {}

func (x *GetRiskAlertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRiskAlertResponse.ProtoReflect.Descriptor instead.
func (*GetRiskAlertResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{14}
}

func (x *GetRiskAlertResponse) GetAlert() *v1.RiskAlert {
	if x != nil {
		return x.Alert
	}
	return nil
}

// ListRiskAlertsRequest
type ListRiskAlertsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortfolioId     *string               `protobuf:"bytes,1,opt,name=portfolio_id,json=portfolioId,proto3,oneof" json:"portfolio_id,omitempty"`
	PositionId      *string               `protobuf:"bytes,2,opt,name=position_id,json=positionId,proto3,oneof" json:"position_id,omitempty"`
	AssetId         *string               `protobuf:"bytes,3,opt,name=asset_id,json=assetId,proto3,oneof" json:"asset_id,omitempty"`
	AlertType       *v1.RiskAlertType     `protobuf:"varint,4,opt,name=alert_type,json=alertType,proto3,enum=cqc.events.v1.RiskAlertType,oneof" json:"alert_type,omitempty"`
	MinSeverity     *v1.RiskAlertSeverity `protobuf:"varint,5,opt,name=min_severity,json=minSeverity,proto3,enum=cqc.events.v1.RiskAlertSeverity,oneof" json:"min_severity,omitempty"`
	IncludeResolved *bool                 `protobuf:"varint,6,opt,name=include_resolved,json=includeResolved,proto3,oneof" json:"include_resolved,omitempty"`
	StartTime       *timestamp.Timestamp  `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	EndTime         *timestamp.Timestamp  `protobuf:"bytes,8,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	Limit           *int32                `protobuf:"varint,9,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
}

func (x *ListRiskAlertsRequest) Reset() {
	*x = ListRiskAlertsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRiskAlertsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRiskAlertsRequest) ProtoMessage() {}

func (x *ListRiskAlertsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRiskAlertsRequest.ProtoReflect.Descriptor instead.
func (*ListRiskAlertsRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{15}
}

func (x *ListRiskAlertsRequest) GetPortfolioId() string {
	if x != nil && x.PortfolioId != nil {
		return *x.PortfolioId
	}
	return ""
}

func (x *ListRiskAlertsRequest) GetPositionId() string {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return ""
}

func (x *ListRiskAlertsRequest) GetAssetId() string {
	if x != nil && x.AssetId != nil {
		return *x.AssetId
	}
	return ""
}

func (x *ListRiskAlertsRequest) GetAlertType() v1.RiskAlertType {
	if x != nil && x.AlertType != nil {
		return *x.AlertType
	}
	return v1.RiskAlertType(0)
}

func (x *ListRiskAlertsRequest) GetMinSeverity() v1.RiskAlertSeverity {
	if x != nil && x.MinSeverity != nil {
		return *x.MinSeverity
	}
	return v1.RiskAlertSeverity(0)
}

func (x *ListRiskAlertsRequest) GetIncludeResolved() bool {
	if x != nil && x.IncludeResolved != nil {
		return *x.IncludeResolved
	}
	return false
}

func (x *ListRiskAlertsRequest) GetStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ListRiskAlertsRequest) GetEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ListRiskAlertsRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type ListRiskAlertsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alerts     []*v1.RiskAlert `protobuf:"bytes,1,rep,name=alerts,proto3" json:"alerts,omitempty"`
	TotalCount *int32          `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3,oneof" json:"total_count,omitempty"`
}

func (x *ListRiskAlertsResponse) Reset() {
	*x = ListRiskAlertsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRiskAlertsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRiskAlertsResponse) ProtoMessage() {}

func (x *ListRiskAlertsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRiskAlertsResponse.ProtoReflect.Descriptor instead.
func (*ListRiskAlertsResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{16}
}

func (x *ListRiskAlertsResponse) GetAlerts() []*v1.RiskAlert {
	if x != nil {
		return x.Alerts
	}
	return nil
}

func (x *ListRiskAlertsResponse) GetTotalCount() int32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

// AcknowledgeRiskAlertRequest
type AcknowledgeRiskAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId        *string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3,oneof" json:"event_id,omitempty"`
	AcknowledgedBy *string `protobuf:"bytes,2,opt,name=acknowledged_by,json=acknowledgedBy,proto3,oneof" json:"acknowledged_by,omitempty"`
	Notes          *string `protobuf:"bytes,3,opt,name=notes,proto3,oneof" json:"notes,omitempty"`
}

func (x *AcknowledgeRiskAlertRequest) Reset() {
	*x = AcknowledgeRiskAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcknowledgeRiskAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcknowledgeRiskAlertRequest) ProtoMessage() {}

func (x *AcknowledgeRiskAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcknowledgeRiskAlertRequest.ProtoReflect.Descriptor instead.
func (*AcknowledgeRiskAlertRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{17}
}

func (x *AcknowledgeRiskAlertRequest) GetEventId() string {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return ""
}

func (x *AcknowledgeRiskAlertRequest) GetAcknowledgedBy() string {
	if x != nil && x.AcknowledgedBy != nil {
		return *x.AcknowledgedBy
	}
	return ""
}

func (x *AcknowledgeRiskAlertRequest) GetNotes() string {
	if x != nil && x.Notes != nil {
		return *x.Notes
	}
	return ""
}

type AcknowledgeRiskAlertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success        *bool                `protobuf:"varint,1,opt,name=success,proto3,oneof" json:"success,omitempty"`
	AcknowledgedAt *timestamp.Timestamp `protobuf:"bytes,2,opt,name=acknowledged_at,json=acknowledgedAt,proto3,oneof" json:"acknowledged_at,omitempty"`
}

func (x *AcknowledgeRiskAlertResponse) Reset() {
	*x = AcknowledgeRiskAlertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcknowledgeRiskAlertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcknowledgeRiskAlertResponse) ProtoMessage() {}

func (x *AcknowledgeRiskAlertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcknowledgeRiskAlertResponse.ProtoReflect.Descriptor instead.
func (*AcknowledgeRiskAlertResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{18}
}

func (x *AcknowledgeRiskAlertResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *AcknowledgeRiskAlertResponse) GetAcknowledgedAt() *timestamp.Timestamp {
	if x != nil {
		return x.AcknowledgedAt
	}
	return nil
}

// ResolveRiskAlertRequest
type ResolveRiskAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId         *string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3,oneof" json:"event_id,omitempty"`
	ResolvedBy      *string `protobuf:"bytes,2,opt,name=resolved_by,json=resolvedBy,proto3,oneof" json:"resolved_by,omitempty"`
	ResolutionNotes *string `protobuf:"bytes,3,opt,name=resolution_notes,json=resolutionNotes,proto3,oneof" json:"resolution_notes,omitempty"`
}

func (x *ResolveRiskAlertRequest) Reset() {
	*x = ResolveRiskAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveRiskAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveRiskAlertRequest) ProtoMessage() {}

func (x *ResolveRiskAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveRiskAlertRequest.ProtoReflect.Descriptor instead.
func (*ResolveRiskAlertRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{19}
}

func (x *ResolveRiskAlertRequest) GetEventId() string {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return ""
}

func (x *ResolveRiskAlertRequest) GetResolvedBy() string {
	if x != nil && x.ResolvedBy != nil {
		return *x.ResolvedBy
	}
	return ""
}

func (x *ResolveRiskAlertRequest) GetResolutionNotes() string {
	if x != nil && x.ResolutionNotes != nil {
		return *x.ResolutionNotes
	}
	return ""
}

type ResolveRiskAlertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success    *bool                `protobuf:"varint,1,opt,name=success,proto3,oneof" json:"success,omitempty"`
	ResolvedAt *timestamp.Timestamp `protobuf:"bytes,2,opt,name=resolved_at,json=resolvedAt,proto3,oneof" json:"resolved_at,omitempty"`
}

func (x *ResolveRiskAlertResponse) Reset() {
	*x = ResolveRiskAlertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveRiskAlertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveRiskAlertResponse) ProtoMessage() {}

func (x *ResolveRiskAlertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveRiskAlertResponse.ProtoReflect.Descriptor instead.
func (*ResolveRiskAlertResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{20}
}

func (x *ResolveRiskAlertResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *ResolveRiskAlertResponse) GetResolvedAt() *timestamp.Timestamp {
	if x != nil {
		return x.ResolvedAt
	}
	return nil
}

// StreamRiskAlertsRequest
type StreamRiskAlertsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortfolioIds []string              `protobuf:"bytes,1,rep,name=portfolio_ids,json=portfolioIds,proto3" json:"portfolio_ids,omitempty"`
	MinSeverity  *v1.RiskAlertSeverity `protobuf:"varint,2,opt,name=min_severity,json=minSeverity,proto3,enum=cqc.events.v1.RiskAlertSeverity,oneof" json:"min_severity,omitempty"`
}

func (x *StreamRiskAlertsRequest) Reset() {
	*x = StreamRiskAlertsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamRiskAlertsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRiskAlertsRequest) ProtoMessage() {}

func (x *StreamRiskAlertsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRiskAlertsRequest.ProtoReflect.Descriptor instead.
func (*StreamRiskAlertsRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{21}
}

func (x *StreamRiskAlertsRequest) GetPortfolioIds() []string {
	if x != nil {
		return x.PortfolioIds
	}
	return nil
}

func (x *StreamRiskAlertsRequest) GetMinSeverity() v1.RiskAlertSeverity {
	if x != nil && x.MinSeverity != nil {
		return *x.MinSeverity
	}
	return v1.RiskAlertSeverity(0)
}

type StreamRiskAlertsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alert *v1.RiskAlert `protobuf:"bytes,1,opt,name=alert,proto3,oneof" json:"alert,omitempty"`
}

func (x *StreamRiskAlertsResponse) Reset() {
	*x = StreamRiskAlertsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamRiskAlertsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRiskAlertsResponse) ProtoMessage() {}

func (x *StreamRiskAlertsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRiskAlertsResponse.ProtoReflect.Descriptor instead.
func (*StreamRiskAlertsResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{22}
}

func (x *StreamRiskAlertsResponse) GetAlert() *v1.RiskAlert {
	if x != nil {
		return x.Alert
	}
	return nil
}

// SetRiskLimitsRequest
type SetRiskLimitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortfolioId *string     `protobuf:"bytes,1,opt,name=portfolio_id,json=portfolioId,proto3,oneof" json:"portfolio_id,omitempty"`
	Limits      *RiskLimits `protobuf:"bytes,2,opt,name=limits,proto3,oneof" json:"limits,omitempty"`
}

func (x *SetRiskLimitsRequest) Reset() {
	*x = SetRiskLimitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRiskLimitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRiskLimitsRequest) ProtoMessage() {}

func (x *SetRiskLimitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRiskLimitsRequest.ProtoReflect.Descriptor instead.
func (*SetRiskLimitsRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{23}
}

func (x *SetRiskLimitsRequest) GetPortfolioId() string {
	if x != nil && x.PortfolioId != nil {
		return *x.PortfolioId
	}
	return ""
}

func (x *SetRiskLimitsRequest) GetLimits() *RiskLimits {
	if x != nil {
		return x.Limits
	}
	return nil
}

type SetRiskLimitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limits *RiskLimits `protobuf:"bytes,1,opt,name=limits,proto3,oneof" json:"limits,omitempty"`
}

func (x *SetRiskLimitsResponse) Reset() {
	*x = SetRiskLimitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRiskLimitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRiskLimitsResponse) ProtoMessage() {}

func (x *SetRiskLimitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRiskLimitsResponse.ProtoReflect.Descriptor instead.
func (*SetRiskLimitsResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{24}
}

func (x *SetRiskLimitsResponse) GetLimits() *RiskLimits {
	if x != nil {
		return x.Limits
	}
	return nil
}

type RiskLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPositionSize  *float64 `protobuf:"fixed64,1,opt,name=max_position_size,json=maxPositionSize,proto3,oneof" json:"max_position_size,omitempty"`
	MaxConcentration *float64 `protobuf:"fixed64,2,opt,name=max_concentration,json=maxConcentration,proto3,oneof" json:"max_concentration,omitempty"`
	MaxLeverage      *float64 `protobuf:"fixed64,3,opt,name=max_leverage,json=maxLeverage,proto3,oneof" json:"max_leverage,omitempty"`
	MaxVar           *float64 `protobuf:"fixed64,4,opt,name=max_var,json=maxVar,proto3,oneof" json:"max_var,omitempty"`
	MaxDrawdown      *float64 `protobuf:"fixed64,5,opt,name=max_drawdown,json=maxDrawdown,proto3,oneof" json:"max_drawdown,omitempty"`
	MinLiquidity     *float64 `protobuf:"fixed64,6,opt,name=min_liquidity,json=minLiquidity,proto3,oneof" json:"min_liquidity,omitempty"`
	StopLossPct      *float64 `protobuf:"fixed64,7,opt,name=stop_loss_pct,json=stopLossPct,proto3,oneof" json:"stop_loss_pct,omitempty"`
	TakeProfitPct    *float64 `protobuf:"fixed64,8,opt,name=take_profit_pct,json=takeProfitPct,proto3,oneof" json:"take_profit_pct,omitempty"`
}

func (x *RiskLimits) Reset() {
	*x = RiskLimits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskLimits) ProtoMessage() {}

func (x *RiskLimits) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskLimits.ProtoReflect.Descriptor instead.
func (*RiskLimits) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{25}
}

func (x *RiskLimits) GetMaxPositionSize() float64 {
	if x != nil && x.MaxPositionSize != nil {
		return *x.MaxPositionSize
	}
	return 0
}

func (x *RiskLimits) GetMaxConcentration() float64 {
	if x != nil && x.MaxConcentration != nil {
		return *x.MaxConcentration
	}
	return 0
}

func (x *RiskLimits) GetMaxLeverage() float64 {
	if x != nil && x.MaxLeverage != nil {
		return *x.MaxLeverage
	}
	return 0
}

func (x *RiskLimits) GetMaxVar() float64 {
	if x != nil && x.MaxVar != nil {
		return *x.MaxVar
	}
	return 0
}

func (x *RiskLimits) GetMaxDrawdown() float64 {
	if x != nil && x.MaxDrawdown != nil {
		return *x.MaxDrawdown
	}
	return 0
}

func (x *RiskLimits) GetMinLiquidity() float64 {
	if x != nil && x.MinLiquidity != nil {
		return *x.MinLiquidity
	}
	return 0
}

func (x *RiskLimits) GetStopLossPct() float64 {
	if x != nil && x.StopLossPct != nil {
		return *x.StopLossPct
	}
	return 0
}

func (x *RiskLimits) GetTakeProfitPct() float64 {
	if x != nil && x.TakeProfitPct != nil {
		return *x.TakeProfitPct
	}
	return 0
}

// GetRiskLimitsRequest
type GetRiskLimitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortfolioId *string `protobuf:"bytes,1,opt,name=portfolio_id,json=portfolioId,proto3,oneof" json:"portfolio_id,omitempty"`
}

func (x *GetRiskLimitsRequest) Reset() {
	*x = GetRiskLimitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRiskLimitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRiskLimitsRequest) ProtoMessage() {}

func (x *GetRiskLimitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRiskLimitsRequest.ProtoReflect.Descriptor instead.
func (*GetRiskLimitsRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{26}
}

func (x *GetRiskLimitsRequest) GetPortfolioId() string {
	if x != nil && x.PortfolioId != nil {
		return *x.PortfolioId
	}
	return ""
}

type GetRiskLimitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limits *RiskLimits `protobuf:"bytes,1,opt,name=limits,proto3,oneof" json:"limits,omitempty"`
}

func (x *GetRiskLimitsResponse) Reset() {
	*x = GetRiskLimitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRiskLimitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRiskLimitsResponse) ProtoMessage() {}

func (x *GetRiskLimitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRiskLimitsResponse.ProtoReflect.Descriptor instead.
func (*GetRiskLimitsResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{27}
}

func (x *GetRiskLimitsResponse) GetLimits() *RiskLimits {
	if x != nil {
		return x.Limits
	}
	return nil
}

// CalculateVaRRequest
type CalculateVaRRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortfolioId     *string  `protobuf:"bytes,1,opt,name=portfolio_id,json=portfolioId,proto3,oneof" json:"portfolio_id,omitempty"`
	ConfidenceLevel *float64 `protobuf:"fixed64,2,opt,name=confidence_level,json=confidenceLevel,proto3,oneof" json:"confidence_level,omitempty"`
	TimeHorizonDays *int32   `protobuf:"varint,3,opt,name=time_horizon_days,json=timeHorizonDays,proto3,oneof" json:"time_horizon_days,omitempty"`
	Method          *string  `protobuf:"bytes,4,opt,name=method,proto3,oneof" json:"method,omitempty"`
}

func (x *CalculateVaRRequest) Reset() {
	*x = CalculateVaRRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateVaRRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateVaRRequest) ProtoMessage() {}

func (x *CalculateVaRRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateVaRRequest.ProtoReflect.Descriptor instead.
func (*CalculateVaRRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{28}
}

func (x *CalculateVaRRequest) GetPortfolioId() string {
	if x != nil && x.PortfolioId != nil {
		return *x.PortfolioId
	}
	return ""
}

func (x *CalculateVaRRequest) GetConfidenceLevel() float64 {
	if x != nil && x.ConfidenceLevel != nil {
		return *x.ConfidenceLevel
	}
	return 0
}

func (x *CalculateVaRRequest) GetTimeHorizonDays() int32 {
	if x != nil && x.TimeHorizonDays != nil {
		return *x.TimeHorizonDays
	}
	return 0
}

func (x *CalculateVaRRequest) GetMethod() string {
	if x != nil && x.Method != nil {
		return *x.Method
	}
	return ""
}

type CalculateVaRResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueAtRisk     *float64             `protobuf:"fixed64,1,opt,name=value_at_risk,json=valueAtRisk,proto3,oneof" json:"value_at_risk,omitempty"`
	ConditionalVar  *float64             `protobuf:"fixed64,2,opt,name=conditional_var,json=conditionalVar,proto3,oneof" json:"conditional_var,omitempty"`
	ConfidenceLevel *float64             `protobuf:"fixed64,3,opt,name=confidence_level,json=confidenceLevel,proto3,oneof" json:"confidence_level,omitempty"`
	TimeHorizonDays *int32               `protobuf:"varint,4,opt,name=time_horizon_days,json=timeHorizonDays,proto3,oneof" json:"time_horizon_days,omitempty"`
	Method          *string              `protobuf:"bytes,5,opt,name=method,proto3,oneof" json:"method,omitempty"`
	CalculatedAt    *timestamp.Timestamp `protobuf:"bytes,6,opt,name=calculated_at,json=calculatedAt,proto3,oneof" json:"calculated_at,omitempty"`
}

func (x *CalculateVaRResponse) Reset() {
	*x = CalculateVaRResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateVaRResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateVaRResponse) ProtoMessage() {}

func (x *CalculateVaRResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateVaRResponse.ProtoReflect.Descriptor instead.
func (*CalculateVaRResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{29}
}

func (x *CalculateVaRResponse) GetValueAtRisk() float64 {
	if x != nil && x.ValueAtRisk != nil {
		return *x.ValueAtRisk
	}
	return 0
}

func (x *CalculateVaRResponse) GetConditionalVar() float64 {
	if x != nil && x.ConditionalVar != nil {
		return *x.ConditionalVar
	}
	return 0
}

func (x *CalculateVaRResponse) GetConfidenceLevel() float64 {
	if x != nil && x.ConfidenceLevel != nil {
		return *x.ConfidenceLevel
	}
	return 0
}

func (x *CalculateVaRResponse) GetTimeHorizonDays() int32 {
	if x != nil && x.TimeHorizonDays != nil {
		return *x.TimeHorizonDays
	}
	return 0
}

func (x *CalculateVaRResponse) GetMethod() string {
	if x != nil && x.Method != nil {
		return *x.Method
	}
	return ""
}

func (x *CalculateVaRResponse) GetCalculatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CalculatedAt
	}
	return nil
}

// CalculateStressTestRequest
type CalculateStressTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortfolioId *string           `protobuf:"bytes,1,opt,name=portfolio_id,json=portfolioId,proto3,oneof" json:"portfolio_id,omitempty"`
	Scenarios   []*StressScenario `protobuf:"bytes,2,rep,name=scenarios,proto3" json:"scenarios,omitempty"`
}

func (x *CalculateStressTestRequest) Reset() {
	*x = CalculateStressTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateStressTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateStressTestRequest) ProtoMessage() {}

func (x *CalculateStressTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateStressTestRequest.ProtoReflect.Descriptor instead.
func (*CalculateStressTestRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{30}
}

func (x *CalculateStressTestRequest) GetPortfolioId() string {
	if x != nil && x.PortfolioId != nil {
		return *x.PortfolioId
	}
	return ""
}

func (x *CalculateStressTestRequest) GetScenarios() []*StressScenario {
	if x != nil {
		return x.Scenarios
	}
	return nil
}

type CalculateStressTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*StressTestResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *CalculateStressTestResponse) Reset() {
	*x = CalculateStressTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateStressTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateStressTestResponse) ProtoMessage() {}

func (x *CalculateStressTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateStressTestResponse.ProtoReflect.Descriptor instead.
func (*CalculateStressTestResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{31}
}

func (x *CalculateStressTestResponse) GetResults() []*StressTestResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type StressScenario struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string       `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description *string       `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Shocks      []*AssetShock `protobuf:"bytes,3,rep,name=shocks,proto3" json:"shocks,omitempty"`
}

func (x *StressScenario) Reset() {
	*x = StressScenario{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StressScenario) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StressScenario) ProtoMessage() {}

func (x *StressScenario) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StressScenario.ProtoReflect.Descriptor instead.
func (*StressScenario) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{32}
}

func (x *StressScenario) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *StressScenario) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *StressScenario) GetShocks() []*AssetShock {
	if x != nil {
		return x.Shocks
	}
	return nil
}

type AssetShock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId        *string  `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3,oneof" json:"asset_id,omitempty"`
	PriceChangePct *float64 `protobuf:"fixed64,2,opt,name=price_change_pct,json=priceChangePct,proto3,oneof" json:"price_change_pct,omitempty"`
}

func (x *AssetShock) Reset() {
	*x = AssetShock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetShock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetShock) ProtoMessage() {}

func (x *AssetShock) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetShock.ProtoReflect.Descriptor instead.
func (*AssetShock) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{33}
}

func (x *AssetShock) GetAssetId() string {
	if x != nil && x.AssetId != nil {
		return *x.AssetId
	}
	return ""
}

func (x *AssetShock) GetPriceChangePct() float64 {
	if x != nil && x.PriceChangePct != nil {
		return *x.PriceChangePct
	}
	return 0
}

type StressTestResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScenarioName            *string           `protobuf:"bytes,1,opt,name=scenario_name,json=scenarioName,proto3,oneof" json:"scenario_name,omitempty"`
	PortfolioValueChange    *float64          `protobuf:"fixed64,2,opt,name=portfolio_value_change,json=portfolioValueChange,proto3,oneof" json:"portfolio_value_change,omitempty"`
	PortfolioValueChangePct *float64          `protobuf:"fixed64,3,opt,name=portfolio_value_change_pct,json=portfolioValueChangePct,proto3,oneof" json:"portfolio_value_change_pct,omitempty"`
	NewPortfolioValue       *float64          `protobuf:"fixed64,4,opt,name=new_portfolio_value,json=newPortfolioValue,proto3,oneof" json:"new_portfolio_value,omitempty"`
	PositionImpacts         []*PositionImpact `protobuf:"bytes,5,rep,name=position_impacts,json=positionImpacts,proto3" json:"position_impacts,omitempty"`
}

func (x *StressTestResult) Reset() {
	*x = StressTestResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StressTestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StressTestResult) ProtoMessage() {}

func (x *StressTestResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StressTestResult.ProtoReflect.Descriptor instead.
func (*StressTestResult) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{34}
}

func (x *StressTestResult) GetScenarioName() string {
	if x != nil && x.ScenarioName != nil {
		return *x.ScenarioName
	}
	return ""
}

func (x *StressTestResult) GetPortfolioValueChange() float64 {
	if x != nil && x.PortfolioValueChange != nil {
		return *x.PortfolioValueChange
	}
	return 0
}

func (x *StressTestResult) GetPortfolioValueChangePct() float64 {
	if x != nil && x.PortfolioValueChangePct != nil {
		return *x.PortfolioValueChangePct
	}
	return 0
}

func (x *StressTestResult) GetNewPortfolioValue() float64 {
	if x != nil && x.NewPortfolioValue != nil {
		return *x.NewPortfolioValue
	}
	return 0
}

func (x *StressTestResult) GetPositionImpacts() []*PositionImpact {
	if x != nil {
		return x.PositionImpacts
	}
	return nil
}

type PositionImpact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositionId     *string  `protobuf:"bytes,1,opt,name=position_id,json=positionId,proto3,oneof" json:"position_id,omitempty"`
	AssetId        *string  `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3,oneof" json:"asset_id,omitempty"`
	ValueChange    *float64 `protobuf:"fixed64,3,opt,name=value_change,json=valueChange,proto3,oneof" json:"value_change,omitempty"`
	ValueChangePct *float64 `protobuf:"fixed64,4,opt,name=value_change_pct,json=valueChangePct,proto3,oneof" json:"value_change_pct,omitempty"`
}

func (x *PositionImpact) Reset() {
	*x = PositionImpact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionImpact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionImpact) ProtoMessage() {}

func (x *PositionImpact) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionImpact.ProtoReflect.Descriptor instead.
func (*PositionImpact) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{35}
}

func (x *PositionImpact) GetPositionId() string {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return ""
}

func (x *PositionImpact) GetAssetId() string {
	if x != nil && x.AssetId != nil {
		return *x.AssetId
	}
	return ""
}

func (x *PositionImpact) GetValueChange() float64 {
	if x != nil && x.ValueChange != nil {
		return *x.ValueChange
	}
	return 0
}

func (x *PositionImpact) GetValueChangePct() float64 {
	if x != nil && x.ValueChangePct != nil {
		return *x.ValueChangePct
	}
	return 0
}

// GetLiquidationRiskRequest
type GetLiquidationRiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortfolioId *string `protobuf:"bytes,1,opt,name=portfolio_id,json=portfolioId,proto3,oneof" json:"portfolio_id,omitempty"`
	PositionId  *string `protobuf:"bytes,2,opt,name=position_id,json=positionId,proto3,oneof" json:"position_id,omitempty"`
}

func (x *GetLiquidationRiskRequest) Reset() {
	*x = GetLiquidationRiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLiquidationRiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLiquidationRiskRequest) ProtoMessage() {}

func (x *GetLiquidationRiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLiquidationRiskRequest.ProtoReflect.Descriptor instead.
func (*GetLiquidationRiskRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{36}
}

func (x *GetLiquidationRiskRequest) GetPortfolioId() string {
	if x != nil && x.PortfolioId != nil {
		return *x.PortfolioId
	}
	return ""
}

func (x *GetLiquidationRiskRequest) GetPositionId() string {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return ""
}

type GetLiquidationRiskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Positions                []*LiquidationRisk `protobuf:"bytes,1,rep,name=positions,proto3" json:"positions,omitempty"`
	PortfolioLiquidationRisk *float64           `protobuf:"fixed64,2,opt,name=portfolio_liquidation_risk,json=portfolioLiquidationRisk,proto3,oneof" json:"portfolio_liquidation_risk,omitempty"`
}

func (x *GetLiquidationRiskResponse) Reset() {
	*x = GetLiquidationRiskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLiquidationRiskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLiquidationRiskResponse) ProtoMessage() {}

func (x *GetLiquidationRiskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLiquidationRiskResponse.ProtoReflect.Descriptor instead.
func (*GetLiquidationRiskResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{37}
}

func (x *GetLiquidationRiskResponse) GetPositions() []*LiquidationRisk {
	if x != nil {
		return x.Positions
	}
	return nil
}

func (x *GetLiquidationRiskResponse) GetPortfolioLiquidationRisk() float64 {
	if x != nil && x.PortfolioLiquidationRisk != nil {
		return *x.PortfolioLiquidationRisk
	}
	return 0
}

type LiquidationRisk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositionId               *string  `protobuf:"bytes,1,opt,name=position_id,json=positionId,proto3,oneof" json:"position_id,omitempty"`
	AssetId                  *string  `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3,oneof" json:"asset_id,omitempty"`
	LiquidationPrice         *float64 `protobuf:"fixed64,3,opt,name=liquidation_price,json=liquidationPrice,proto3,oneof" json:"liquidation_price,omitempty"`
	CurrentPrice             *float64 `protobuf:"fixed64,4,opt,name=current_price,json=currentPrice,proto3,oneof" json:"current_price,omitempty"`
	DistanceToLiquidationPct *float64 `protobuf:"fixed64,5,opt,name=distance_to_liquidation_pct,json=distanceToLiquidationPct,proto3,oneof" json:"distance_to_liquidation_pct,omitempty"`
	MarginRatio              *float64 `protobuf:"fixed64,6,opt,name=margin_ratio,json=marginRatio,proto3,oneof" json:"margin_ratio,omitempty"`
	RiskLevel                *string  `protobuf:"bytes,7,opt,name=risk_level,json=riskLevel,proto3,oneof" json:"risk_level,omitempty"`
}

func (x *LiquidationRisk) Reset() {
	*x = LiquidationRisk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidationRisk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidationRisk) ProtoMessage() {}

func (x *LiquidationRisk) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidationRisk.ProtoReflect.Descriptor instead.
func (*LiquidationRisk) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{38}
}

func (x *LiquidationRisk) GetPositionId() string {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return ""
}

func (x *LiquidationRisk) GetAssetId() string {
	if x != nil && x.AssetId != nil {
		return *x.AssetId
	}
	return ""
}

func (x *LiquidationRisk) GetLiquidationPrice() float64 {
	if x != nil && x.LiquidationPrice != nil {
		return *x.LiquidationPrice
	}
	return 0
}

func (x *LiquidationRisk) GetCurrentPrice() float64 {
	if x != nil && x.CurrentPrice != nil {
		return *x.CurrentPrice
	}
	return 0
}

func (x *LiquidationRisk) GetDistanceToLiquidationPct() float64 {
	if x != nil && x.DistanceToLiquidationPct != nil {
		return *x.DistanceToLiquidationPct
	}
	return 0
}

func (x *LiquidationRisk) GetMarginRatio() float64 {
	if x != nil && x.MarginRatio != nil {
		return *x.MarginRatio
	}
	return 0
}

func (x *LiquidationRisk) GetRiskLevel() string {
	if x != nil && x.RiskLevel != nil {
		return *x.RiskLevel
	}
	return ""
}

// GetConcentrationRiskRequest
type GetConcentrationRiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortfolioId *string `protobuf:"bytes,1,opt,name=portfolio_id,json=portfolioId,proto3,oneof" json:"portfolio_id,omitempty"`
}

func (x *GetConcentrationRiskRequest) Reset() {
	*x = GetConcentrationRiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConcentrationRiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConcentrationRiskRequest) ProtoMessage() {}

func (x *GetConcentrationRiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConcentrationRiskRequest.ProtoReflect.Descriptor instead.
func (*GetConcentrationRiskRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{39}
}

func (x *GetConcentrationRiskRequest) GetPortfolioId() string {
	if x != nil && x.PortfolioId != nil {
		return *x.PortfolioId
	}
	return ""
}

type GetConcentrationRiskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetConcentrations []*AssetConcentration `protobuf:"bytes,1,rep,name=asset_concentrations,json=assetConcentrations,proto3" json:"asset_concentrations,omitempty"`
	VenueConcentrations []*VenueConcentration `protobuf:"bytes,2,rep,name=venue_concentrations,json=venueConcentrations,proto3" json:"venue_concentrations,omitempty"`
	HerfindahlIndex     *float64              `protobuf:"fixed64,3,opt,name=herfindahl_index,json=herfindahlIndex,proto3,oneof" json:"herfindahl_index,omitempty"`
	MaxConcentration    *float64              `protobuf:"fixed64,4,opt,name=max_concentration,json=maxConcentration,proto3,oneof" json:"max_concentration,omitempty"`
}

func (x *GetConcentrationRiskResponse) Reset() {
	*x = GetConcentrationRiskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConcentrationRiskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConcentrationRiskResponse) ProtoMessage() {}

func (x *GetConcentrationRiskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConcentrationRiskResponse.ProtoReflect.Descriptor instead.
func (*GetConcentrationRiskResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{40}
}

func (x *GetConcentrationRiskResponse) GetAssetConcentrations() []*AssetConcentration {
	if x != nil {
		return x.AssetConcentrations
	}
	return nil
}

func (x *GetConcentrationRiskResponse) GetVenueConcentrations() []*VenueConcentration {
	if x != nil {
		return x.VenueConcentrations
	}
	return nil
}

func (x *GetConcentrationRiskResponse) GetHerfindahlIndex() float64 {
	if x != nil && x.HerfindahlIndex != nil {
		return *x.HerfindahlIndex
	}
	return 0
}

func (x *GetConcentrationRiskResponse) GetMaxConcentration() float64 {
	if x != nil && x.MaxConcentration != nil {
		return *x.MaxConcentration
	}
	return 0
}

type AssetConcentration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId    *string  `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3,oneof" json:"asset_id,omitempty"`
	Value      *float64 `protobuf:"fixed64,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	Percentage *float64 `protobuf:"fixed64,3,opt,name=percentage,proto3,oneof" json:"percentage,omitempty"`
}

func (x *AssetConcentration) Reset() {
	*x = AssetConcentration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetConcentration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetConcentration) ProtoMessage() {}

func (x *AssetConcentration) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetConcentration.ProtoReflect.Descriptor instead.
func (*AssetConcentration) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{41}
}

func (x *AssetConcentration) GetAssetId() string {
	if x != nil && x.AssetId != nil {
		return *x.AssetId
	}
	return ""
}

func (x *AssetConcentration) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *AssetConcentration) GetPercentage() float64 {
	if x != nil && x.Percentage != nil {
		return *x.Percentage
	}
	return 0
}

type VenueConcentration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VenueId    *string  `protobuf:"bytes,1,opt,name=venue_id,json=venueId,proto3,oneof" json:"venue_id,omitempty"`
	Value      *float64 `protobuf:"fixed64,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	Percentage *float64 `protobuf:"fixed64,3,opt,name=percentage,proto3,oneof" json:"percentage,omitempty"`
}

func (x *VenueConcentration) Reset() {
	*x = VenueConcentration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VenueConcentration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VenueConcentration) ProtoMessage() {}

func (x *VenueConcentration) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VenueConcentration.ProtoReflect.Descriptor instead.
func (*VenueConcentration) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{42}
}

func (x *VenueConcentration) GetVenueId() string {
	if x != nil && x.VenueId != nil {
		return *x.VenueId
	}
	return ""
}

func (x *VenueConcentration) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *VenueConcentration) GetPercentage() float64 {
	if x != nil && x.Percentage != nil {
		return *x.Percentage
	}
	return 0
}

// GetCorrelationMatrixRequest
type GetCorrelationMatrixRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortfolioId  *string `protobuf:"bytes,1,opt,name=portfolio_id,json=portfolioId,proto3,oneof" json:"portfolio_id,omitempty"`
	LookbackDays *int32  `protobuf:"varint,2,opt,name=lookback_days,json=lookbackDays,proto3,oneof" json:"lookback_days,omitempty"`
}

func (x *GetCorrelationMatrixRequest) Reset() {
	*x = GetCorrelationMatrixRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCorrelationMatrixRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCorrelationMatrixRequest) ProtoMessage() {}

func (x *GetCorrelationMatrixRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCorrelationMatrixRequest.ProtoReflect.Descriptor instead.
func (*GetCorrelationMatrixRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{43}
}

func (x *GetCorrelationMatrixRequest) GetPortfolioId() string {
	if x != nil && x.PortfolioId != nil {
		return *x.PortfolioId
	}
	return ""
}

func (x *GetCorrelationMatrixRequest) GetLookbackDays() int32 {
	if x != nil && x.LookbackDays != nil {
		return *x.LookbackDays
	}
	return 0
}

type GetCorrelationMatrixResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetIds     []string             `protobuf:"bytes,1,rep,name=asset_ids,json=assetIds,proto3" json:"asset_ids,omitempty"`
	Correlations []*CorrelationRow    `protobuf:"bytes,2,rep,name=correlations,proto3" json:"correlations,omitempty"`
	CalculatedAt *timestamp.Timestamp `protobuf:"bytes,3,opt,name=calculated_at,json=calculatedAt,proto3,oneof" json:"calculated_at,omitempty"`
}

func (x *GetCorrelationMatrixResponse) Reset() {
	*x = GetCorrelationMatrixResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCorrelationMatrixResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCorrelationMatrixResponse) ProtoMessage() {}

func (x *GetCorrelationMatrixResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCorrelationMatrixResponse.ProtoReflect.Descriptor instead.
func (*GetCorrelationMatrixResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{44}
}

func (x *GetCorrelationMatrixResponse) GetAssetIds() []string {
	if x != nil {
		return x.AssetIds
	}
	return nil
}

func (x *GetCorrelationMatrixResponse) GetCorrelations() []*CorrelationRow {
	if x != nil {
		return x.Correlations
	}
	return nil
}

func (x *GetCorrelationMatrixResponse) GetCalculatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CalculatedAt
	}
	return nil
}

type CorrelationRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []float64 `protobuf:"fixed64,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *CorrelationRow) Reset() {
	*x = CorrelationRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorrelationRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorrelationRow) ProtoMessage() {}

func (x *CorrelationRow) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorrelationRow.ProtoReflect.Descriptor instead.
func (*CorrelationRow) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{45}
}

func (x *CorrelationRow) GetValues() []float64 {
	if x != nil {
		return x.Values
	}
	return nil
}

// SimulateTradeRequest
type SimulateTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortfolioId *string  `protobuf:"bytes,1,opt,name=portfolio_id,json=portfolioId,proto3,oneof" json:"portfolio_id,omitempty"`
	AssetId     *string  `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3,oneof" json:"asset_id,omitempty"`
	Quantity    *float64 `protobuf:"fixed64,3,opt,name=quantity,proto3,oneof" json:"quantity,omitempty"`
	Price       *float64 `protobuf:"fixed64,4,opt,name=price,proto3,oneof" json:"price,omitempty"`
	Side        *string  `protobuf:"bytes,5,opt,name=side,proto3,oneof" json:"side,omitempty"`
}

func (x *SimulateTradeRequest) Reset() {
	*x = SimulateTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimulateTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimulateTradeRequest) ProtoMessage() {}

func (x *SimulateTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimulateTradeRequest.ProtoReflect.Descriptor instead.
func (*SimulateTradeRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{46}
}

func (x *SimulateTradeRequest) GetPortfolioId() string {
	if x != nil && x.PortfolioId != nil {
		return *x.PortfolioId
	}
	return ""
}

func (x *SimulateTradeRequest) GetAssetId() string {
	if x != nil && x.AssetId != nil {
		return *x.AssetId
	}
	return ""
}

func (x *SimulateTradeRequest) GetQuantity() float64 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

func (x *SimulateTradeRequest) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *SimulateTradeRequest) GetSide() string {
	if x != nil && x.Side != nil {
		return *x.Side
	}
	return ""
}

type SimulateTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentRisk    *RiskSummary     `protobuf:"bytes,1,opt,name=current_risk,json=currentRisk,proto3,oneof" json:"current_risk,omitempty"`
	ProjectedRisk  *RiskSummary     `protobuf:"bytes,2,opt,name=projected_risk,json=projectedRisk,proto3,oneof" json:"projected_risk,omitempty"`
	Violations     []*RiskViolation `protobuf:"bytes,3,rep,name=violations,proto3" json:"violations,omitempty"`
	TradeAllowed   *bool            `protobuf:"varint,4,opt,name=trade_allowed,json=tradeAllowed,proto3,oneof" json:"trade_allowed,omitempty"`
	Recommendation *string          `protobuf:"bytes,5,opt,name=recommendation,proto3,oneof" json:"recommendation,omitempty"`
}

func (x *SimulateTradeResponse) Reset() {
	*x = SimulateTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimulateTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimulateTradeResponse) ProtoMessage() {}

func (x *SimulateTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimulateTradeResponse.ProtoReflect.Descriptor instead.
func (*SimulateTradeResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{47}
}

func (x *SimulateTradeResponse) GetCurrentRisk() *RiskSummary {
	if x != nil {
		return x.CurrentRisk
	}
	return nil
}

func (x *SimulateTradeResponse) GetProjectedRisk() *RiskSummary {
	if x != nil {
		return x.ProjectedRisk
	}
	return nil
}

func (x *SimulateTradeResponse) GetViolations() []*RiskViolation {
	if x != nil {
		return x.Violations
	}
	return nil
}

func (x *SimulateTradeResponse) GetTradeAllowed() bool {
	if x != nil && x.TradeAllowed != nil {
		return *x.TradeAllowed
	}
	return false
}

func (x *SimulateTradeResponse) GetRecommendation() string {
	if x != nil && x.Recommendation != nil {
		return *x.Recommendation
	}
	return ""
}

// GetHistoricalRiskRequest
type GetHistoricalRiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortfolioId *string              `protobuf:"bytes,1,opt,name=portfolio_id,json=portfolioId,proto3,oneof" json:"portfolio_id,omitempty"`
	StartTime   *timestamp.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	EndTime     *timestamp.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	Interval    *string              `protobuf:"bytes,4,opt,name=interval,proto3,oneof" json:"interval,omitempty"`
}

func (x *GetHistoricalRiskRequest) Reset() {
	*x = GetHistoricalRiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHistoricalRiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistoricalRiskRequest) ProtoMessage() {}

func (x *GetHistoricalRiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistoricalRiskRequest.ProtoReflect.Descriptor instead.
func (*GetHistoricalRiskRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{48}
}

func (x *GetHistoricalRiskRequest) GetPortfolioId() string {
	if x != nil && x.PortfolioId != nil {
		return *x.PortfolioId
	}
	return ""
}

func (x *GetHistoricalRiskRequest) GetStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetHistoricalRiskRequest) GetEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *GetHistoricalRiskRequest) GetInterval() string {
	if x != nil && x.Interval != nil {
		return *x.Interval
	}
	return ""
}

type GetHistoricalRiskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataPoints []*HistoricalRiskPoint `protobuf:"bytes,1,rep,name=data_points,json=dataPoints,proto3" json:"data_points,omitempty"`
}

func (x *GetHistoricalRiskResponse) Reset() {
	*x = GetHistoricalRiskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHistoricalRiskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistoricalRiskResponse) ProtoMessage() {}

func (x *GetHistoricalRiskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistoricalRiskResponse.ProtoReflect.Descriptor instead.
func (*GetHistoricalRiskResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{49}
}

func (x *GetHistoricalRiskResponse) GetDataPoints() []*HistoricalRiskPoint {
	if x != nil {
		return x.DataPoints
	}
	return nil
}

type HistoricalRiskPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp         *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
	ValueAtRisk       *float64             `protobuf:"fixed64,2,opt,name=value_at_risk,json=valueAtRisk,proto3,oneof" json:"value_at_risk,omitempty"`
	Leverage          *float64             `protobuf:"fixed64,3,opt,name=leverage,proto3,oneof" json:"leverage,omitempty"`
	Volatility        *float64             `protobuf:"fixed64,4,opt,name=volatility,proto3,oneof" json:"volatility,omitempty"`
	MaxDrawdown       *float64             `protobuf:"fixed64,5,opt,name=max_drawdown,json=maxDrawdown,proto3,oneof" json:"max_drawdown,omitempty"`
	ConcentrationRisk *float64             `protobuf:"fixed64,6,opt,name=concentration_risk,json=concentrationRisk,proto3,oneof" json:"concentration_risk,omitempty"`
}

func (x *HistoricalRiskPoint) Reset() {
	*x = HistoricalRiskPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_v1_risk_engine_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalRiskPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalRiskPoint) ProtoMessage() {}

func (x *HistoricalRiskPoint) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_v1_risk_engine_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalRiskPoint.ProtoReflect.Descriptor instead.
func (*HistoricalRiskPoint) Descriptor() ([]byte, []int) {
	return file_proto_services_v1_risk_engine_proto_rawDescGZIP(), []int{50}
}

func (x *HistoricalRiskPoint) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *HistoricalRiskPoint) GetValueAtRisk() float64 {
	if x != nil && x.ValueAtRisk != nil {
		return *x.ValueAtRisk
	}
	return 0
}

func (x *HistoricalRiskPoint) GetLeverage() float64 {
	if x != nil && x.Leverage != nil {
		return *x.Leverage
	}
	return 0
}

func (x *HistoricalRiskPoint) GetVolatility() float64 {
	if x != nil && x.Volatility != nil {
		return *x.Volatility
	}
	return 0
}

func (x *HistoricalRiskPoint) GetMaxDrawdown() float64 {
	if x != nil && x.MaxDrawdown != nil {
		return *x.MaxDrawdown
	}
	return 0
}

func (x *HistoricalRiskPoint) GetConcentrationRisk() float64 {
	if x != nil && x.ConcentrationRisk != nil {
		return *x.ConcentrationRisk
	}
	return 0
}

var File_proto_services_v1_risk_engine_proto protoreflect.FileDescriptor

var file_proto_services_v1_risk_engine_proto_rawDesc = []byte{
	0x0a, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x21, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x57, 0x0a, 0x1c, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x52,
	0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x6f,
	0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f,
	0x5f, 0x69, 0x64, 0x22, 0xac, 0x02, 0x0a, 0x1d, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x12, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c,
	0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x52, 0x69, 0x73, 0x6b,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x76, 0x69, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x71, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x69, 0x73, 0x6b, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x76, 0x69,
	0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x71, 0x63,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x73,
	0x6b, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x48, 0x01, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x88, 0x01, 0x01, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x69, 0x73, 0x6b,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x22, 0xb7, 0x02, 0x0a, 0x0d, 0x52, 0x69, 0x73, 0x6b, 0x56, 0x69, 0x6f, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x08, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x63, 0x71, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69,
	0x73, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x48,
	0x01, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x03, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x78, 0x0a, 0x0b,
	0x52, 0x69, 0x73, 0x6b, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa7, 0x02, 0x0a, 0x0b, 0x52, 0x69, 0x73, 0x6b, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00,
	0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x01, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x08, 0x6c, 0x65, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x76, 0x61, 0x72, 0x5f,
	0x39, 0x35, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x05, 0x76, 0x61, 0x72, 0x39,
	0x35, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x72, 0x61, 0x77,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x0b, 0x6d, 0x61,
	0x78, 0x44, 0x72, 0x61, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x76, 0x61, 0x72, 0x5f, 0x39, 0x35, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x64, 0x6f, 0x77, 0x6e,
	0x22, 0x53, 0x0a, 0x1b, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0xcc, 0x02, 0x0a, 0x1c, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x13, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x11, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x10, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a,
	0x17, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02,
	0x52, 0x15, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x76, 0x69,
	0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x69, 0x73, 0x6b, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf9, 0x01, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x69,
	0x73, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c,
	0x69, 0x6f, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x69,
	0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xfd, 0x01, 0x0a, 0x17, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x07,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x0a, 0x76,
	0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x64,
	0x65, 0x6e, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x64, 0x65, 0x6e, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x69, 0x73, 0x6b, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x48, 0x02, 0x52, 0x0d, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x69, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x64, 0x65, 0x6e, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x69, 0x73, 0x6b,
	0x22, 0x50, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x6f, 0x72,
	0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f,
	0x69, 0x64, 0x22, 0xc2, 0x06, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a,
	0x10, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x39,
	0x35, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x41, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x39, 0x35, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x10, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x39, 0x39, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x74,
	0x52, 0x69, 0x73, 0x6b, 0x39, 0x39, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x02, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x56, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x62, 0x65, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x04, 0x62, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x70, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x70, 0x65,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x6f, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x05, 0x52, 0x0c, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x6f, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x64, 0x6f,
	0x77, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44,
	0x72, 0x61, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x76, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x07,
	0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x08, 0x52, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x32, 0x0a, 0x12, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x09, 0x52, 0x11,
	0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x0a, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x69, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x0b, 0x52, 0x0e, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x0c, 0x52, 0x0c, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x39,
	0x35, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x72,
	0x69, 0x73, 0x6b, 0x5f, 0x39, 0x39, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62,
	0x65, 0x74, 0x61, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x70, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x6f,
	0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64,
	0x72, 0x61, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x6f, 0x6c, 0x61,
	0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x75,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x69, 0x73,
	0x6b, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0xf6, 0x04, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x48, 0x01, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f,
	0x6c, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b,
	0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x07, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x07, 0x52,
	0x0e, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x48, 0x08, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x11, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x58, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x71, 0x63,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x22, 0x42, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x55,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48,
	0x00, 0x52, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x22, 0xe1, 0x04, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x69,
	0x73, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c,
	0x69, 0x6f, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a,
	0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x03, 0x52, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x48, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x48, 0x04, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x53, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x06, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x07, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x69,
	0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x16, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x06,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb1, 0x01, 0x0a,
	0x1b, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x69, 0x73, 0x6b,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x08,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f,
	0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x64, 0x42, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x6e, 0x6f, 0x74,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x22, 0xa7, 0x01, 0x0a, 0x1c, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x52, 0x69, 0x73, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x48, 0x0a, 0x0f, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x0e, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x63, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0xc1, 0x01, 0x0a, 0x17, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x42, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x97,
	0x01, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x17, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69,
	0x6f, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f, 0x72,
	0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x49, 0x64, 0x73, 0x12, 0x48, 0x0a, 0x0c, 0x6d, 0x69, 0x6e,
	0x5f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x69, 0x73, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x22, 0x59, 0x0a, 0x18, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x69,
	0x73, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x69, 0x73, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x05, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x22,
	0x94, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x6f, 0x72, 0x74,
	0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x38, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x48, 0x01, 0x52,
	0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0x5c, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x52, 0x69, 0x73,
	0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x38, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x48, 0x00, 0x52, 0x06,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x22, 0xef, 0x03, 0x0a, 0x0a, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00,
	0x52, 0x0f, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x01, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x0b,
	0x6d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c,
	0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x03, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x6d, 0x61, 0x78, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x04, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x72, 0x61, 0x77, 0x64, 0x6f, 0x77,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05, 0x52, 0x0c, 0x6d,
	0x69, 0x6e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x27,
	0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x70, 0x63, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73,
	0x73, 0x50, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x74, 0x61, 0x6b, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x07, 0x52, 0x0d, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x50, 0x63,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x72, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x70,
	0x63, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x5f, 0x70, 0x63, 0x74, 0x22, 0x4f, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x69, 0x73,
	0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69,
	0x6f, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66,
	0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x22, 0x5c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x69,
	0x73, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x38, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x48, 0x00, 0x52,
	0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0x82, 0x02, 0x0a, 0x13, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x56, 0x61, 0x52, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x0c, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x01, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x02, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x44,
	0x61, 0x79, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69,
	0x6f, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x9f, 0x03, 0x0a, 0x14, 0x43,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x74, 0x5f,
	0x72, 0x69, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x41, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x56, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x48, 0x6f, 0x72,
	0x69, 0x7a, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x05, 0x52, 0x0c, 0x63,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x72, 0x69, 0x73, 0x6b,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x76, 0x61, 0x72, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x94, 0x01, 0x0a,
	0x1a, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x70,
	0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x53,
	0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f,
	0x5f, 0x69, 0x64, 0x22, 0x5a, 0x0a, 0x1b, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22,
	0x9e, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72,
	0x69, 0x6f, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x68, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x63, 0x6b, 0x52,
	0x06, 0x73, 0x68, 0x6f, 0x63, 0x6b, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x7d, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x63, 0x6b, 0x12, 0x1e,
	0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x10, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70,
	0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x63, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x63, 0x74, 0x22,
	0x9e, 0x03, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x73,
	0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39,
	0x0a, 0x16, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01,
	0x52, 0x14, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x1a, 0x70, 0x6f, 0x72,
	0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52,
	0x17, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x6e,
	0x65, 0x77, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x11, 0x6e, 0x65, 0x77, 0x50,
	0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x4a, 0x0a, 0x10, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x71, 0x63,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x52, 0x0f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x73, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x19,
	0x0a, 0x17, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x63, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6e, 0x65, 0x77,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xf0, 0x01, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x02, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x0e, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x63, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x70, 0x63, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x66,
	0x6f, 0x6c, 0x69, 0x6f, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x69, 0x64,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x22, 0xbe, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3e, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x69, 0x73, 0x6b, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x41, 0x0a, 0x1a, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x6c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x18, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f,
	0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x69, 0x73, 0x6b, 0x88,
	0x01, 0x01, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f,
	0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x69, 0x73,
	0x6b, 0x22, 0xc8, 0x03, 0x0a, 0x0f, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x10, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x1b, 0x64, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x18,
	0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x09, 0x72, 0x69, 0x73, 0x6b, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x1e, 0x0a, 0x1c,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x63, 0x74, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x56, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x70,
	0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69,
	0x6f, 0x5f, 0x69, 0x64, 0x22, 0xdb, 0x02, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x14, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x61, 0x73, 0x73, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x56, 0x0a,
	0x14, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x71,
	0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65,
	0x6e, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x13, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x10, 0x68, 0x65, 0x72, 0x66, 0x69, 0x6e, 0x64,
	0x61, 0x68, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x00, 0x52, 0x0f, 0x68, 0x65, 0x72, 0x66, 0x69, 0x6e, 0x64, 0x61, 0x68, 0x6c, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x01, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x68, 0x65, 0x72, 0x66,
	0x69, 0x6e, 0x64, 0x61, 0x68, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x9a, 0x01, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22,
	0x9a, 0x01, 0x0a, 0x12, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x08, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x92, 0x01, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x74, 0x72, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0c,
	0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6c, 0x6f, 0x6f, 0x6b, 0x62, 0x61, 0x63, 0x6b,
	0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0c, 0x6c,
	0x6f, 0x6f, 0x6b, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x79, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x79,
	0x73, 0x22, 0xd8, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12,
	0x43, 0x0a, 0x0c, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x77, 0x52, 0x0c, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x28, 0x0a, 0x0e,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x77, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x14, 0x53, 0x69, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c,
	0x69, 0x6f, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x22, 0x87, 0x03, 0x0a, 0x15, 0x53,
	0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x69, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x71, 0x63,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x73,
	0x6b, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0e, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x48, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x69, 0x73,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x56,
	0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0c, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x99, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x66,
	0x6f, 0x6c, 0x69, 0x6f, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66,
	0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x22, 0x62, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61,
	0x6c, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52,
	0x69, 0x73, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x22, 0x83, 0x03, 0x0a, 0x13, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x63, 0x61, 0x6c, 0x52, 0x69, 0x73, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x01, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x74, 0x52, 0x69, 0x73,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x0a, 0x76, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x61,
	0x78, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x04, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x72, 0x61, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05,
	0x52, 0x11, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x69, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61,
	0x74, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x64,
	0x6f, 0x77, 0x6e, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x32, 0xe5, 0x0f, 0x0a, 0x0a, 0x52,
	0x69, 0x73, 0x6b, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x76, 0x0a, 0x15, 0x45, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x52, 0x69,
	0x73, 0x6b, 0x12, 0x2d, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x73, 0x0a, 0x14, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x2c, 0x2e, 0x63, 0x71, 0x63, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x69, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x69, 0x73, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x71, 0x63, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x26,
	0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x69, 0x73, 0x6b,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x64, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x12, 0x27, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x71,
	0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x52, 0x69, 0x73, 0x6b,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x24, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x71,
	0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x61, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63,
	0x71, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x14, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x2c, 0x2e,
	0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x71,
	0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x10, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x28,
	0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x69, 0x73,
	0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x69, 0x73, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x5e,
	0x0a, 0x0d, 0x53, 0x65, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12,
	0x25, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x69, 0x73, 0x6b,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12,
	0x25, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x69, 0x73, 0x6b,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b,
	0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x52, 0x12, 0x24,
	0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x52, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x56, 0x61, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x13, 0x43,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x54, 0x65,
	0x73, 0x74, 0x12, 0x2b, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x73, 0x73, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x73,
	0x73, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x69, 0x73, 0x6b, 0x12, 0x2a, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x69, 0x73, 0x6b, 0x12, 0x2c, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x73, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x2c, 0x2e, 0x63, 0x71, 0x63, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x72,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0d, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x25, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x29, 0x2e, 0x63, 0x71,
	0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x69, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x42, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x2d, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c,
	0x2f, 0x63, 0x71, 0x63, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x71, 0x63, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_services_v1_risk_engine_proto_rawDescOnce sync.Once
	file_proto_services_v1_risk_engine_proto_rawDescData = file_proto_services_v1_risk_engine_proto_rawDesc
)

func file_proto_services_v1_risk_engine_proto_rawDescGZIP() []byte {
	file_proto_services_v1_risk_engine_proto_rawDescOnce.Do(func() {
		file_proto_services_v1_risk_engine_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_services_v1_risk_engine_proto_rawDescData)
	})
	return file_proto_services_v1_risk_engine_proto_rawDescData
}

var file_proto_services_v1_risk_engine_proto_msgTypes = make([]protoimpl.MessageInfo, 51)
var file_proto_services_v1_risk_engine_proto_goTypes = []interface{}{
	(*EvaluatePortfolioRiskRequest)(nil),  // 0: cqc.services.v1.EvaluatePortfolioRiskRequest
	(*EvaluatePortfolioRiskResponse)(nil), // 1: cqc.services.v1.EvaluatePortfolioRiskResponse
	(*RiskViolation)(nil),                 // 2: cqc.services.v1.RiskViolation
	(*RiskWarning)(nil),                   // 3: cqc.services.v1.RiskWarning
	(*RiskSummary)(nil),                   // 4: cqc.services.v1.RiskSummary
	(*EvaluatePositionRiskRequest)(nil),   // 5: cqc.services.v1.EvaluatePositionRiskRequest
	(*EvaluatePositionRiskResponse)(nil),  // 6: cqc.services.v1.EvaluatePositionRiskResponse
	(*CheckRiskLimitsRequest)(nil),        // 7: cqc.services.v1.CheckRiskLimitsRequest
	(*CheckRiskLimitsResponse)(nil),       // 8: cqc.services.v1.CheckRiskLimitsResponse
	(*GetRiskMetricsRequest)(nil),         // 9: cqc.services.v1.GetRiskMetricsRequest
	(*GetRiskMetricsResponse)(nil),        // 10: cqc.services.v1.GetRiskMetricsResponse
	(*CreateRiskAlertRequest)(nil),        // 11: cqc.services.v1.CreateRiskAlertRequest
	(*CreateRiskAlertResponse)(nil),       // 12: cqc.services.v1.CreateRiskAlertResponse
	(*GetRiskAlertRequest)(nil),           // 13: cqc.services.v1.GetRiskAlertRequest
	(*GetRiskAlertResponse)(nil),          // 14: cqc.services.v1.GetRiskAlertResponse
	(*ListRiskAlertsRequest)(nil),         // 15: cqc.services.v1.ListRiskAlertsRequest
	(*ListRiskAlertsResponse)(nil),        // 16: cqc.services.v1.ListRiskAlertsResponse
	(*AcknowledgeRiskAlertRequest)(nil),   // 17: cqc.services.v1.AcknowledgeRiskAlertRequest
	(*AcknowledgeRiskAlertResponse)(nil),  // 18: cqc.services.v1.AcknowledgeRiskAlertResponse
	(*ResolveRiskAlertRequest)(nil),       // 19: cqc.services.v1.ResolveRiskAlertRequest
	(*ResolveRiskAlertResponse)(nil),      // 20: cqc.services.v1.ResolveRiskAlertResponse
	(*StreamRiskAlertsRequest)(nil),       // 21: cqc.services.v1.StreamRiskAlertsRequest
	(*StreamRiskAlertsResponse)(nil),      // 22: cqc.services.v1.StreamRiskAlertsResponse
	(*SetRiskLimitsRequest)(nil),          // 23: cqc.services.v1.SetRiskLimitsRequest
	(*SetRiskLimitsResponse)(nil),         // 24: cqc.services.v1.SetRiskLimitsResponse
	(*RiskLimits)(nil),                    // 25: cqc.services.v1.RiskLimits
	(*GetRiskLimitsRequest)(nil),          // 26: cqc.services.v1.GetRiskLimitsRequest
	(*GetRiskLimitsResponse)(nil),         // 27: cqc.services.v1.GetRiskLimitsResponse
	(*CalculateVaRRequest)(nil),           // 28: cqc.services.v1.CalculateVaRRequest
	(*CalculateVaRResponse)(nil),          // 29: cqc.services.v1.CalculateVaRResponse
	(*CalculateStressTestRequest)(nil),    // 30: cqc.services.v1.CalculateStressTestRequest
	(*CalculateStressTestResponse)(nil),   // 31: cqc.services.v1.CalculateStressTestResponse
	(*StressScenario)(nil),                // 32: cqc.services.v1.StressScenario
	(*AssetShock)(nil),                    // 33: cqc.services.v1.AssetShock
	(*StressTestResult)(nil),              // 34: cqc.services.v1.StressTestResult
	(*PositionImpact)(nil),                // 35: cqc.services.v1.PositionImpact
	(*GetLiquidationRiskRequest)(nil),     // 36: cqc.services.v1.GetLiquidationRiskRequest
	(*GetLiquidationRiskResponse)(nil),    // 37: cqc.services.v1.GetLiquidationRiskResponse
	(*LiquidationRisk)(nil),               // 38: cqc.services.v1.LiquidationRisk
	(*GetConcentrationRiskRequest)(nil),   // 39: cqc.services.v1.GetConcentrationRiskRequest
	(*GetConcentrationRiskResponse)(nil),  // 40: cqc.services.v1.GetConcentrationRiskResponse
	(*AssetConcentration)(nil),            // 41: cqc.services.v1.AssetConcentration
	(*VenueConcentration)(nil),            // 42: cqc.services.v1.VenueConcentration
	(*GetCorrelationMatrixRequest)(nil),   // 43: cqc.services.v1.GetCorrelationMatrixRequest
	(*GetCorrelationMatrixResponse)(nil),  // 44: cqc.services.v1.GetCorrelationMatrixResponse
	(*CorrelationRow)(nil),                // 45: cqc.services.v1.CorrelationRow
	(*SimulateTradeRequest)(nil),          // 46: cqc.services.v1.SimulateTradeRequest
	(*SimulateTradeResponse)(nil),         // 47: cqc.services.v1.SimulateTradeResponse
	(*GetHistoricalRiskRequest)(nil),      // 48: cqc.services.v1.GetHistoricalRiskRequest
	(*GetHistoricalRiskResponse)(nil),     // 49: cqc.services.v1.GetHistoricalRiskResponse
	(*HistoricalRiskPoint)(nil),           // 50: cqc.services.v1.HistoricalRiskPoint
	(v1.RiskAlertType)(0),                 // 51: cqc.events.v1.RiskAlertType
	(v1.RiskAlertSeverity)(0),             // 52: cqc.events.v1.RiskAlertSeverity
	(*timestamp.Timestamp)(nil),           // 53: google.protobuf.Timestamp
	(*v1.RiskAlert)(nil),                  // 54: cqc.events.v1.RiskAlert
}
var file_proto_services_v1_risk_engine_proto_depIdxs = []int32{
	2,  // 0: cqc.services.v1.EvaluatePortfolioRiskResponse.violations:type_name -> cqc.services.v1.RiskViolation
	3,  // 1: cqc.services.v1.EvaluatePortfolioRiskResponse.warnings:type_name -> cqc.services.v1.RiskWarning
	4,  // 2: cqc.services.v1.EvaluatePortfolioRiskResponse.summary:type_name -> cqc.services.v1.RiskSummary
	51, // 3: cqc.services.v1.RiskViolation.type:type_name -> cqc.events.v1.RiskAlertType
	52, // 4: cqc.services.v1.RiskViolation.severity:type_name -> cqc.events.v1.RiskAlertSeverity
	2,  // 5: cqc.services.v1.EvaluatePositionRiskResponse.violations:type_name -> cqc.services.v1.RiskViolation
	4,  // 6: cqc.services.v1.CheckRiskLimitsResponse.projected_risk:type_name -> cqc.services.v1.RiskSummary
	53, // 7: cqc.services.v1.GetRiskMetricsResponse.calculated_at:type_name -> google.protobuf.Timestamp
	51, // 8: cqc.services.v1.CreateRiskAlertRequest.alert_type:type_name -> cqc.events.v1.RiskAlertType
	52, // 9: cqc.services.v1.CreateRiskAlertRequest.severity:type_name -> cqc.events.v1.RiskAlertSeverity
	54, // 10: cqc.services.v1.CreateRiskAlertResponse.alert:type_name -> cqc.events.v1.RiskAlert
	54, // 11: cqc.services.v1.GetRiskAlertResponse.alert:type_name -> cqc.events.v1.RiskAlert
	51, // 12: cqc.services.v1.ListRiskAlertsRequest.alert_type:type_name -> cqc.events.v1.RiskAlertType
	52, // 13: cqc.services.v1.ListRiskAlertsRequest.min_severity:type_name -> cqc.events.v1.RiskAlertSeverity
	53, // 14: cqc.services.v1.ListRiskAlertsRequest.start_time:type_name -> google.protobuf.Timestamp
	53, // 15: cqc.services.v1.ListRiskAlertsRequest.end_time:type_name -> google.protobuf.Timestamp
	54, // 16: cqc.services.v1.ListRiskAlertsResponse.alerts:type_name -> cqc.events.v1.RiskAlert
	53, // 17: cqc.services.v1.AcknowledgeRiskAlertResponse.acknowledged_at:type_name -> google.protobuf.Timestamp
	53, // 18: cqc.services.v1.ResolveRiskAlertResponse.resolved_at:type_name -> google.protobuf.Timestamp
	52, // 19: cqc.services.v1.StreamRiskAlertsRequest.min_severity:type_name -> cqc.events.v1.RiskAlertSeverity
	54, // 20: cqc.services.v1.StreamRiskAlertsResponse.alert:type_name -> cqc.events.v1.RiskAlert
	25, // 21: cqc.services.v1.SetRiskLimitsRequest.limits:type_name -> cqc.services.v1.RiskLimits
	25, // 22: cqc.services.v1.SetRiskLimitsResponse.limits:type_name -> cqc.services.v1.RiskLimits
	25, // 23: cqc.services.v1.GetRiskLimitsResponse.limits:type_name -> cqc.services.v1.RiskLimits
	53, // 24: cqc.services.v1.CalculateVaRResponse.calculated_at:type_name -> google.protobuf.Timestamp
	32, // 25: cqc.services.v1.CalculateStressTestRequest.scenarios:type_name -> cqc.services.v1.StressScenario
	34, // 26: cqc.services.v1.CalculateStressTestResponse.results:type_name -> cqc.services.v1.StressTestResult
	33, // 27: cqc.services.v1.StressScenario.shocks:type_name -> cqc.services.v1.AssetShock
	35, // 28: cqc.services.v1.StressTestResult.position_impacts:type_name -> cqc.services.v1.PositionImpact
	38, // 29: cqc.services.v1.GetLiquidationRiskResponse.positions:type_name -> cqc.services.v1.LiquidationRisk
	41, // 30: cqc.services.v1.GetConcentrationRiskResponse.asset_concentrations:type_name -> cqc.services.v1.AssetConcentration
	42, // 31: cqc.services.v1.GetConcentrationRiskResponse.venue_concentrations:type_name -> cqc.services.v1.VenueConcentration
	45, // 32: cqc.services.v1.GetCorrelationMatrixResponse.correlations:type_name -> cqc.services.v1.CorrelationRow
	53, // 33: cqc.services.v1.GetCorrelationMatrixResponse.calculated_at:type_name -> google.protobuf.Timestamp
	4,  // 34: cqc.services.v1.SimulateTradeResponse.current_risk:type_name -> cqc.services.v1.RiskSummary
	4,  // 35: cqc.services.v1.SimulateTradeResponse.projected_risk:type_name -> cqc.services.v1.RiskSummary
	2,  // 36: cqc.services.v1.SimulateTradeResponse.violations:type_name -> cqc.services.v1.RiskViolation
	53, // 37: cqc.services.v1.GetHistoricalRiskRequest.start_time:type_name -> google.protobuf.Timestamp
	53, // 38: cqc.services.v1.GetHistoricalRiskRequest.end_time:type_name -> google.protobuf.Timestamp
	50, // 39: cqc.services.v1.GetHistoricalRiskResponse.data_points:type_name -> cqc.services.v1.HistoricalRiskPoint
	53, // 40: cqc.services.v1.HistoricalRiskPoint.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 41: cqc.services.v1.RiskEngine.EvaluatePortfolioRisk:input_type -> cqc.services.v1.EvaluatePortfolioRiskRequest
	5,  // 42: cqc.services.v1.RiskEngine.EvaluatePositionRisk:input_type -> cqc.services.v1.EvaluatePositionRiskRequest
	7,  // 43: cqc.services.v1.RiskEngine.CheckRiskLimits:input_type -> cqc.services.v1.CheckRiskLimitsRequest
	9,  // 44: cqc.services.v1.RiskEngine.GetRiskMetrics:input_type -> cqc.services.v1.GetRiskMetricsRequest
	11, // 45: cqc.services.v1.RiskEngine.CreateRiskAlert:input_type -> cqc.services.v1.CreateRiskAlertRequest
	13, // 46: cqc.services.v1.RiskEngine.GetRiskAlert:input_type -> cqc.services.v1.GetRiskAlertRequest
	15, // 47: cqc.services.v1.RiskEngine.ListRiskAlerts:input_type -> cqc.services.v1.ListRiskAlertsRequest
	17, // 48: cqc.services.v1.RiskEngine.AcknowledgeRiskAlert:input_type -> cqc.services.v1.AcknowledgeRiskAlertRequest
	19, // 49: cqc.services.v1.RiskEngine.ResolveRiskAlert:input_type -> cqc.services.v1.ResolveRiskAlertRequest
	21, // 50: cqc.services.v1.RiskEngine.StreamRiskAlerts:input_type -> cqc.services.v1.StreamRiskAlertsRequest
	23, // 51: cqc.services.v1.RiskEngine.SetRiskLimits:input_type -> cqc.services.v1.SetRiskLimitsRequest
	26, // 52: cqc.services.v1.RiskEngine.GetRiskLimits:input_type -> cqc.services.v1.GetRiskLimitsRequest
	28, // 53: cqc.services.v1.RiskEngine.CalculateVaR:input_type -> cqc.services.v1.CalculateVaRRequest
	30, // 54: cqc.services.v1.RiskEngine.CalculateStressTest:input_type -> cqc.services.v1.CalculateStressTestRequest
	36, // 55: cqc.services.v1.RiskEngine.GetLiquidationRisk:input_type -> cqc.services.v1.GetLiquidationRiskRequest
	39, // 56: cqc.services.v1.RiskEngine.GetConcentrationRisk:input_type -> cqc.services.v1.GetConcentrationRiskRequest
	43, // 57: cqc.services.v1.RiskEngine.GetCorrelationMatrix:input_type -> cqc.services.v1.GetCorrelationMatrixRequest
	46, // 58: cqc.services.v1.RiskEngine.SimulateTrade:input_type -> cqc.services.v1.SimulateTradeRequest
	48, // 59: cqc.services.v1.RiskEngine.GetHistoricalRisk:input_type -> cqc.services.v1.GetHistoricalRiskRequest
	1,  // 60: cqc.services.v1.RiskEngine.EvaluatePortfolioRisk:output_type -> cqc.services.v1.EvaluatePortfolioRiskResponse
	6,  // 61: cqc.services.v1.RiskEngine.EvaluatePositionRisk:output_type -> cqc.services.v1.EvaluatePositionRiskResponse
	8,  // 62: cqc.services.v1.RiskEngine.CheckRiskLimits:output_type -> cqc.services.v1.CheckRiskLimitsResponse
	10, // 63: cqc.services.v1.RiskEngine.GetRiskMetrics:output_type -> cqc.services.v1.GetRiskMetricsResponse
	12, // 64: cqc.services.v1.RiskEngine.CreateRiskAlert:output_type -> cqc.services.v1.CreateRiskAlertResponse
	14, // 65: cqc.services.v1.RiskEngine.GetRiskAlert:output_type -> cqc.services.v1.GetRiskAlertResponse
	16, // 66: cqc.services.v1.RiskEngine.ListRiskAlerts:output_type -> cqc.services.v1.ListRiskAlertsResponse
	18, // 67: cqc.services.v1.RiskEngine.AcknowledgeRiskAlert:output_type -> cqc.services.v1.AcknowledgeRiskAlertResponse
	20, // 68: cqc.services.v1.RiskEngine.ResolveRiskAlert:output_type -> cqc.services.v1.ResolveRiskAlertResponse
	22, // 69: cqc.services.v1.RiskEngine.StreamRiskAlerts:output_type -> cqc.services.v1.StreamRiskAlertsResponse
	24, // 70: cqc.services.v1.RiskEngine.SetRiskLimits:output_type -> cqc.services.v1.SetRiskLimitsResponse
	27, // 71: cqc.services.v1.RiskEngine.GetRiskLimits:output_type -> cqc.services.v1.GetRiskLimitsResponse
	29, // 72: cqc.services.v1.RiskEngine.CalculateVaR:output_type -> cqc.services.v1.CalculateVaRResponse
	31, // 73: cqc.services.v1.RiskEngine.CalculateStressTest:output_type -> cqc.services.v1.CalculateStressTestResponse
	37, // 74: cqc.services.v1.RiskEngine.GetLiquidationRisk:output_type -> cqc.services.v1.GetLiquidationRiskResponse
	40, // 75: cqc.services.v1.RiskEngine.GetConcentrationRisk:output_type -> cqc.services.v1.GetConcentrationRiskResponse
	44, // 76: cqc.services.v1.RiskEngine.GetCorrelationMatrix:output_type -> cqc.services.v1.GetCorrelationMatrixResponse
	47, // 77: cqc.services.v1.RiskEngine.SimulateTrade:output_type -> cqc.services.v1.SimulateTradeResponse
	49, // 78: cqc.services.v1.RiskEngine.GetHistoricalRisk:output_type -> cqc.services.v1.GetHistoricalRiskResponse
	60, // [60:79] is the sub-list for method output_type
	41, // [41:60] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_proto_services_v1_risk_engine_proto_init() }
func file_proto_services_v1_risk_engine_proto_init() {
	if File_proto_services_v1_risk_engine_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_services_v1_risk_engine_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluatePortfolioRiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluatePortfolioRiskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskViolation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskWarning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluatePositionRiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluatePositionRiskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRiskLimitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRiskLimitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRiskMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRiskMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRiskAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRiskAlertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRiskAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRiskAlertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRiskAlertsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRiskAlertsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcknowledgeRiskAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcknowledgeRiskAlertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveRiskAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveRiskAlertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamRiskAlertsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamRiskAlertsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRiskLimitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRiskLimitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskLimits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRiskLimitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRiskLimitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateVaRRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateVaRResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateStressTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateStressTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StressScenario); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetShock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StressTestResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionImpact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLiquidationRiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLiquidationRiskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidationRisk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConcentrationRiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConcentrationRiskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetConcentration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VenueConcentration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCorrelationMatrixRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCorrelationMatrixResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorrelationRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimulateTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimulateTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHistoricalRiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHistoricalRiskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_v1_risk_engine_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalRiskPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_services_v1_risk_engine_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[32].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[33].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[34].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[35].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[36].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[37].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[38].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[39].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[40].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[41].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[42].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[43].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[44].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[46].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[47].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[48].OneofWrappers = []interface{}{}
	file_proto_services_v1_risk_engine_proto_msgTypes[50].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_services_v1_risk_engine_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   51,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_services_v1_risk_engine_proto_goTypes,
		DependencyIndexes: file_proto_services_v1_risk_engine_proto_depIdxs,
		MessageInfos:      file_proto_services_v1_risk_engine_proto_msgTypes,
	}.Build()
	File_proto_services_v1_risk_engine_proto = out.File
	file_proto_services_v1_risk_engine_proto_rawDesc = nil
	file_proto_services_v1_risk_engine_proto_goTypes = nil
	file_proto_services_v1_risk_engine_proto_depIdxs = nil
}

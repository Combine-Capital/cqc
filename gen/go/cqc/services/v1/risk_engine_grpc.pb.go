// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/services/v1/risk_engine.proto

package servicesv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RiskEngine_EvaluatePortfolioRisk_FullMethodName = "/cqc.services.v1.RiskEngine/EvaluatePortfolioRisk"
	RiskEngine_EvaluatePositionRisk_FullMethodName  = "/cqc.services.v1.RiskEngine/EvaluatePositionRisk"
	RiskEngine_CheckRiskLimits_FullMethodName       = "/cqc.services.v1.RiskEngine/CheckRiskLimits"
	RiskEngine_GetRiskMetrics_FullMethodName        = "/cqc.services.v1.RiskEngine/GetRiskMetrics"
	RiskEngine_CreateRiskAlert_FullMethodName       = "/cqc.services.v1.RiskEngine/CreateRiskAlert"
	RiskEngine_GetRiskAlert_FullMethodName          = "/cqc.services.v1.RiskEngine/GetRiskAlert"
	RiskEngine_ListRiskAlerts_FullMethodName        = "/cqc.services.v1.RiskEngine/ListRiskAlerts"
	RiskEngine_AcknowledgeRiskAlert_FullMethodName  = "/cqc.services.v1.RiskEngine/AcknowledgeRiskAlert"
	RiskEngine_ResolveRiskAlert_FullMethodName      = "/cqc.services.v1.RiskEngine/ResolveRiskAlert"
	RiskEngine_StreamRiskAlerts_FullMethodName      = "/cqc.services.v1.RiskEngine/StreamRiskAlerts"
	RiskEngine_SetRiskLimits_FullMethodName         = "/cqc.services.v1.RiskEngine/SetRiskLimits"
	RiskEngine_GetRiskLimits_FullMethodName         = "/cqc.services.v1.RiskEngine/GetRiskLimits"
	RiskEngine_CalculateVaR_FullMethodName          = "/cqc.services.v1.RiskEngine/CalculateVaR"
	RiskEngine_CalculateStressTest_FullMethodName   = "/cqc.services.v1.RiskEngine/CalculateStressTest"
	RiskEngine_GetLiquidationRisk_FullMethodName    = "/cqc.services.v1.RiskEngine/GetLiquidationRisk"
	RiskEngine_GetConcentrationRisk_FullMethodName  = "/cqc.services.v1.RiskEngine/GetConcentrationRisk"
	RiskEngine_GetCorrelationMatrix_FullMethodName  = "/cqc.services.v1.RiskEngine/GetCorrelationMatrix"
	RiskEngine_SimulateTrade_FullMethodName         = "/cqc.services.v1.RiskEngine/SimulateTrade"
	RiskEngine_GetHistoricalRisk_FullMethodName     = "/cqc.services.v1.RiskEngine/GetHistoricalRisk"
)

// RiskEngineClient is the client API for RiskEngine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RiskEngineClient interface {
	// EvaluatePortfolioRisk analyzes a portfolio for risk exposures and violations.
	EvaluatePortfolioRisk(ctx context.Context, in *EvaluatePortfolioRiskRequest, opts ...grpc.CallOption) (*EvaluatePortfolioRiskResponse, error)
	// EvaluatePositionRisk analyzes a specific position for risk.
	EvaluatePositionRisk(ctx context.Context, in *EvaluatePositionRiskRequest, opts ...grpc.CallOption) (*EvaluatePositionRiskResponse, error)
	// CheckRiskLimits validates if an action would violate risk limits.
	CheckRiskLimits(ctx context.Context, in *CheckRiskLimitsRequest, opts ...grpc.CallOption) (*CheckRiskLimitsResponse, error)
	// GetRiskMetrics retrieves comprehensive risk metrics for a portfolio.
	GetRiskMetrics(ctx context.Context, in *GetRiskMetricsRequest, opts ...grpc.CallOption) (*GetRiskMetricsResponse, error)
	// CreateRiskAlert manually creates a risk alert.
	CreateRiskAlert(ctx context.Context, in *CreateRiskAlertRequest, opts ...grpc.CallOption) (*CreateRiskAlertResponse, error)
	// GetRiskAlert retrieves a specific risk alert by ID.
	GetRiskAlert(ctx context.Context, in *GetRiskAlertRequest, opts ...grpc.CallOption) (*GetRiskAlertResponse, error)
	// ListRiskAlerts retrieves risk alerts for a portfolio or position.
	ListRiskAlerts(ctx context.Context, in *ListRiskAlertsRequest, opts ...grpc.CallOption) (*ListRiskAlertsResponse, error)
	// AcknowledgeRiskAlert marks a risk alert as acknowledged.
	AcknowledgeRiskAlert(ctx context.Context, in *AcknowledgeRiskAlertRequest, opts ...grpc.CallOption) (*AcknowledgeRiskAlertResponse, error)
	// ResolveRiskAlert marks a risk alert as resolved.
	ResolveRiskAlert(ctx context.Context, in *ResolveRiskAlertRequest, opts ...grpc.CallOption) (*ResolveRiskAlertResponse, error)
	// StreamRiskAlerts streams real-time risk alerts as they are generated.
	StreamRiskAlerts(ctx context.Context, in *StreamRiskAlertsRequest, opts ...grpc.CallOption) (RiskEngine_StreamRiskAlertsClient, error)
	// SetRiskLimits configures risk limits for a portfolio.
	SetRiskLimits(ctx context.Context, in *SetRiskLimitsRequest, opts ...grpc.CallOption) (*SetRiskLimitsResponse, error)
	// GetRiskLimits retrieves configured risk limits for a portfolio.
	GetRiskLimits(ctx context.Context, in *GetRiskLimitsRequest, opts ...grpc.CallOption) (*GetRiskLimitsResponse, error)
	// CalculateVaR calculates Value-at-Risk for a portfolio.
	CalculateVaR(ctx context.Context, in *CalculateVaRRequest, opts ...grpc.CallOption) (*CalculateVaRResponse, error)
	// CalculateStressTest performs stress testing on a portfolio.
	CalculateStressTest(ctx context.Context, in *CalculateStressTestRequest, opts ...grpc.CallOption) (*CalculateStressTestResponse, error)
	// GetLiquidationRisk calculates liquidation risk for leveraged positions.
	GetLiquidationRisk(ctx context.Context, in *GetLiquidationRiskRequest, opts ...grpc.CallOption) (*GetLiquidationRiskResponse, error)
	// GetConcentrationRisk analyzes portfolio concentration risk.
	GetConcentrationRisk(ctx context.Context, in *GetConcentrationRiskRequest, opts ...grpc.CallOption) (*GetConcentrationRiskResponse, error)
	// GetCorrelationMatrix retrieves correlation matrix for portfolio assets.
	GetCorrelationMatrix(ctx context.Context, in *GetCorrelationMatrixRequest, opts ...grpc.CallOption) (*GetCorrelationMatrixResponse, error)
	// SimulateTrade simulates the risk impact of a proposed trade.
	SimulateTrade(ctx context.Context, in *SimulateTradeRequest, opts ...grpc.CallOption) (*SimulateTradeResponse, error)
	// GetHistoricalRisk retrieves historical risk metrics over time.
	GetHistoricalRisk(ctx context.Context, in *GetHistoricalRiskRequest, opts ...grpc.CallOption) (*GetHistoricalRiskResponse, error)
}

type riskEngineClient struct {
	cc grpc.ClientConnInterface
}

func NewRiskEngineClient(cc grpc.ClientConnInterface) RiskEngineClient {
	return &riskEngineClient{cc}
}

func (c *riskEngineClient) EvaluatePortfolioRisk(ctx context.Context, in *EvaluatePortfolioRiskRequest, opts ...grpc.CallOption) (*EvaluatePortfolioRiskResponse, error) {
	out := new(EvaluatePortfolioRiskResponse)
	err := c.cc.Invoke(ctx, RiskEngine_EvaluatePortfolioRisk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskEngineClient) EvaluatePositionRisk(ctx context.Context, in *EvaluatePositionRiskRequest, opts ...grpc.CallOption) (*EvaluatePositionRiskResponse, error) {
	out := new(EvaluatePositionRiskResponse)
	err := c.cc.Invoke(ctx, RiskEngine_EvaluatePositionRisk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskEngineClient) CheckRiskLimits(ctx context.Context, in *CheckRiskLimitsRequest, opts ...grpc.CallOption) (*CheckRiskLimitsResponse, error) {
	out := new(CheckRiskLimitsResponse)
	err := c.cc.Invoke(ctx, RiskEngine_CheckRiskLimits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskEngineClient) GetRiskMetrics(ctx context.Context, in *GetRiskMetricsRequest, opts ...grpc.CallOption) (*GetRiskMetricsResponse, error) {
	out := new(GetRiskMetricsResponse)
	err := c.cc.Invoke(ctx, RiskEngine_GetRiskMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskEngineClient) CreateRiskAlert(ctx context.Context, in *CreateRiskAlertRequest, opts ...grpc.CallOption) (*CreateRiskAlertResponse, error) {
	out := new(CreateRiskAlertResponse)
	err := c.cc.Invoke(ctx, RiskEngine_CreateRiskAlert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskEngineClient) GetRiskAlert(ctx context.Context, in *GetRiskAlertRequest, opts ...grpc.CallOption) (*GetRiskAlertResponse, error) {
	out := new(GetRiskAlertResponse)
	err := c.cc.Invoke(ctx, RiskEngine_GetRiskAlert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskEngineClient) ListRiskAlerts(ctx context.Context, in *ListRiskAlertsRequest, opts ...grpc.CallOption) (*ListRiskAlertsResponse, error) {
	out := new(ListRiskAlertsResponse)
	err := c.cc.Invoke(ctx, RiskEngine_ListRiskAlerts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskEngineClient) AcknowledgeRiskAlert(ctx context.Context, in *AcknowledgeRiskAlertRequest, opts ...grpc.CallOption) (*AcknowledgeRiskAlertResponse, error) {
	out := new(AcknowledgeRiskAlertResponse)
	err := c.cc.Invoke(ctx, RiskEngine_AcknowledgeRiskAlert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskEngineClient) ResolveRiskAlert(ctx context.Context, in *ResolveRiskAlertRequest, opts ...grpc.CallOption) (*ResolveRiskAlertResponse, error) {
	out := new(ResolveRiskAlertResponse)
	err := c.cc.Invoke(ctx, RiskEngine_ResolveRiskAlert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskEngineClient) StreamRiskAlerts(ctx context.Context, in *StreamRiskAlertsRequest, opts ...grpc.CallOption) (RiskEngine_StreamRiskAlertsClient, error) {
	stream, err := c.cc.NewStream(ctx, &RiskEngine_ServiceDesc.Streams[0], RiskEngine_StreamRiskAlerts_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &riskEngineStreamRiskAlertsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RiskEngine_StreamRiskAlertsClient interface {
	Recv() (*StreamRiskAlertsResponse, error)
	grpc.ClientStream
}

type riskEngineStreamRiskAlertsClient struct {
	grpc.ClientStream
}

func (x *riskEngineStreamRiskAlertsClient) Recv() (*StreamRiskAlertsResponse, error) {
	m := new(StreamRiskAlertsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *riskEngineClient) SetRiskLimits(ctx context.Context, in *SetRiskLimitsRequest, opts ...grpc.CallOption) (*SetRiskLimitsResponse, error) {
	out := new(SetRiskLimitsResponse)
	err := c.cc.Invoke(ctx, RiskEngine_SetRiskLimits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskEngineClient) GetRiskLimits(ctx context.Context, in *GetRiskLimitsRequest, opts ...grpc.CallOption) (*GetRiskLimitsResponse, error) {
	out := new(GetRiskLimitsResponse)
	err := c.cc.Invoke(ctx, RiskEngine_GetRiskLimits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskEngineClient) CalculateVaR(ctx context.Context, in *CalculateVaRRequest, opts ...grpc.CallOption) (*CalculateVaRResponse, error) {
	out := new(CalculateVaRResponse)
	err := c.cc.Invoke(ctx, RiskEngine_CalculateVaR_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskEngineClient) CalculateStressTest(ctx context.Context, in *CalculateStressTestRequest, opts ...grpc.CallOption) (*CalculateStressTestResponse, error) {
	out := new(CalculateStressTestResponse)
	err := c.cc.Invoke(ctx, RiskEngine_CalculateStressTest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskEngineClient) GetLiquidationRisk(ctx context.Context, in *GetLiquidationRiskRequest, opts ...grpc.CallOption) (*GetLiquidationRiskResponse, error) {
	out := new(GetLiquidationRiskResponse)
	err := c.cc.Invoke(ctx, RiskEngine_GetLiquidationRisk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskEngineClient) GetConcentrationRisk(ctx context.Context, in *GetConcentrationRiskRequest, opts ...grpc.CallOption) (*GetConcentrationRiskResponse, error) {
	out := new(GetConcentrationRiskResponse)
	err := c.cc.Invoke(ctx, RiskEngine_GetConcentrationRisk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskEngineClient) GetCorrelationMatrix(ctx context.Context, in *GetCorrelationMatrixRequest, opts ...grpc.CallOption) (*GetCorrelationMatrixResponse, error) {
	out := new(GetCorrelationMatrixResponse)
	err := c.cc.Invoke(ctx, RiskEngine_GetCorrelationMatrix_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskEngineClient) SimulateTrade(ctx context.Context, in *SimulateTradeRequest, opts ...grpc.CallOption) (*SimulateTradeResponse, error) {
	out := new(SimulateTradeResponse)
	err := c.cc.Invoke(ctx, RiskEngine_SimulateTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskEngineClient) GetHistoricalRisk(ctx context.Context, in *GetHistoricalRiskRequest, opts ...grpc.CallOption) (*GetHistoricalRiskResponse, error) {
	out := new(GetHistoricalRiskResponse)
	err := c.cc.Invoke(ctx, RiskEngine_GetHistoricalRisk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RiskEngineServer is the server API for RiskEngine service.
// All implementations must embed UnimplementedRiskEngineServer
// for forward compatibility
type RiskEngineServer interface {
	// EvaluatePortfolioRisk analyzes a portfolio for risk exposures and violations.
	EvaluatePortfolioRisk(context.Context, *EvaluatePortfolioRiskRequest) (*EvaluatePortfolioRiskResponse, error)
	// EvaluatePositionRisk analyzes a specific position for risk.
	EvaluatePositionRisk(context.Context, *EvaluatePositionRiskRequest) (*EvaluatePositionRiskResponse, error)
	// CheckRiskLimits validates if an action would violate risk limits.
	CheckRiskLimits(context.Context, *CheckRiskLimitsRequest) (*CheckRiskLimitsResponse, error)
	// GetRiskMetrics retrieves comprehensive risk metrics for a portfolio.
	GetRiskMetrics(context.Context, *GetRiskMetricsRequest) (*GetRiskMetricsResponse, error)
	// CreateRiskAlert manually creates a risk alert.
	CreateRiskAlert(context.Context, *CreateRiskAlertRequest) (*CreateRiskAlertResponse, error)
	// GetRiskAlert retrieves a specific risk alert by ID.
	GetRiskAlert(context.Context, *GetRiskAlertRequest) (*GetRiskAlertResponse, error)
	// ListRiskAlerts retrieves risk alerts for a portfolio or position.
	ListRiskAlerts(context.Context, *ListRiskAlertsRequest) (*ListRiskAlertsResponse, error)
	// AcknowledgeRiskAlert marks a risk alert as acknowledged.
	AcknowledgeRiskAlert(context.Context, *AcknowledgeRiskAlertRequest) (*AcknowledgeRiskAlertResponse, error)
	// ResolveRiskAlert marks a risk alert as resolved.
	ResolveRiskAlert(context.Context, *ResolveRiskAlertRequest) (*ResolveRiskAlertResponse, error)
	// StreamRiskAlerts streams real-time risk alerts as they are generated.
	StreamRiskAlerts(*StreamRiskAlertsRequest, RiskEngine_StreamRiskAlertsServer) error
	// SetRiskLimits configures risk limits for a portfolio.
	SetRiskLimits(context.Context, *SetRiskLimitsRequest) (*SetRiskLimitsResponse, error)
	// GetRiskLimits retrieves configured risk limits for a portfolio.
	GetRiskLimits(context.Context, *GetRiskLimitsRequest) (*GetRiskLimitsResponse, error)
	// CalculateVaR calculates Value-at-Risk for a portfolio.
	CalculateVaR(context.Context, *CalculateVaRRequest) (*CalculateVaRResponse, error)
	// CalculateStressTest performs stress testing on a portfolio.
	CalculateStressTest(context.Context, *CalculateStressTestRequest) (*CalculateStressTestResponse, error)
	// GetLiquidationRisk calculates liquidation risk for leveraged positions.
	GetLiquidationRisk(context.Context, *GetLiquidationRiskRequest) (*GetLiquidationRiskResponse, error)
	// GetConcentrationRisk analyzes portfolio concentration risk.
	GetConcentrationRisk(context.Context, *GetConcentrationRiskRequest) (*GetConcentrationRiskResponse, error)
	// GetCorrelationMatrix retrieves correlation matrix for portfolio assets.
	GetCorrelationMatrix(context.Context, *GetCorrelationMatrixRequest) (*GetCorrelationMatrixResponse, error)
	// SimulateTrade simulates the risk impact of a proposed trade.
	SimulateTrade(context.Context, *SimulateTradeRequest) (*SimulateTradeResponse, error)
	// GetHistoricalRisk retrieves historical risk metrics over time.
	GetHistoricalRisk(context.Context, *GetHistoricalRiskRequest) (*GetHistoricalRiskResponse, error)
	mustEmbedUnimplementedRiskEngineServer()
}

// UnimplementedRiskEngineServer must be embedded to have forward compatible implementations.
type UnimplementedRiskEngineServer struct {
}

func (UnimplementedRiskEngineServer) EvaluatePortfolioRisk(context.Context, *EvaluatePortfolioRiskRequest) (*EvaluatePortfolioRiskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluatePortfolioRisk not implemented")
}
func (UnimplementedRiskEngineServer) EvaluatePositionRisk(context.Context, *EvaluatePositionRiskRequest) (*EvaluatePositionRiskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluatePositionRisk not implemented")
}
func (UnimplementedRiskEngineServer) CheckRiskLimits(context.Context, *CheckRiskLimitsRequest) (*CheckRiskLimitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRiskLimits not implemented")
}
func (UnimplementedRiskEngineServer) GetRiskMetrics(context.Context, *GetRiskMetricsRequest) (*GetRiskMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRiskMetrics not implemented")
}
func (UnimplementedRiskEngineServer) CreateRiskAlert(context.Context, *CreateRiskAlertRequest) (*CreateRiskAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRiskAlert not implemented")
}
func (UnimplementedRiskEngineServer) GetRiskAlert(context.Context, *GetRiskAlertRequest) (*GetRiskAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRiskAlert not implemented")
}
func (UnimplementedRiskEngineServer) ListRiskAlerts(context.Context, *ListRiskAlertsRequest) (*ListRiskAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRiskAlerts not implemented")
}
func (UnimplementedRiskEngineServer) AcknowledgeRiskAlert(context.Context, *AcknowledgeRiskAlertRequest) (*AcknowledgeRiskAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcknowledgeRiskAlert not implemented")
}
func (UnimplementedRiskEngineServer) ResolveRiskAlert(context.Context, *ResolveRiskAlertRequest) (*ResolveRiskAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveRiskAlert not implemented")
}
func (UnimplementedRiskEngineServer) StreamRiskAlerts(*StreamRiskAlertsRequest, RiskEngine_StreamRiskAlertsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamRiskAlerts not implemented")
}
func (UnimplementedRiskEngineServer) SetRiskLimits(context.Context, *SetRiskLimitsRequest) (*SetRiskLimitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRiskLimits not implemented")
}
func (UnimplementedRiskEngineServer) GetRiskLimits(context.Context, *GetRiskLimitsRequest) (*GetRiskLimitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRiskLimits not implemented")
}
func (UnimplementedRiskEngineServer) CalculateVaR(context.Context, *CalculateVaRRequest) (*CalculateVaRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateVaR not implemented")
}
func (UnimplementedRiskEngineServer) CalculateStressTest(context.Context, *CalculateStressTestRequest) (*CalculateStressTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateStressTest not implemented")
}
func (UnimplementedRiskEngineServer) GetLiquidationRisk(context.Context, *GetLiquidationRiskRequest) (*GetLiquidationRiskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiquidationRisk not implemented")
}
func (UnimplementedRiskEngineServer) GetConcentrationRisk(context.Context, *GetConcentrationRiskRequest) (*GetConcentrationRiskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConcentrationRisk not implemented")
}
func (UnimplementedRiskEngineServer) GetCorrelationMatrix(context.Context, *GetCorrelationMatrixRequest) (*GetCorrelationMatrixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCorrelationMatrix not implemented")
}
func (UnimplementedRiskEngineServer) SimulateTrade(context.Context, *SimulateTradeRequest) (*SimulateTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimulateTrade not implemented")
}
func (UnimplementedRiskEngineServer) GetHistoricalRisk(context.Context, *GetHistoricalRiskRequest) (*GetHistoricalRiskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoricalRisk not implemented")
}
func (UnimplementedRiskEngineServer) mustEmbedUnimplementedRiskEngineServer() {}

// UnsafeRiskEngineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RiskEngineServer will
// result in compilation errors.
type UnsafeRiskEngineServer interface {
	mustEmbedUnimplementedRiskEngineServer()
}

func RegisterRiskEngineServer(s grpc.ServiceRegistrar, srv RiskEngineServer) {
	s.RegisterService(&RiskEngine_ServiceDesc, srv)
}

func _RiskEngine_EvaluatePortfolioRisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluatePortfolioRiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskEngineServer).EvaluatePortfolioRisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskEngine_EvaluatePortfolioRisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskEngineServer).EvaluatePortfolioRisk(ctx, req.(*EvaluatePortfolioRiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskEngine_EvaluatePositionRisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluatePositionRiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskEngineServer).EvaluatePositionRisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskEngine_EvaluatePositionRisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskEngineServer).EvaluatePositionRisk(ctx, req.(*EvaluatePositionRiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskEngine_CheckRiskLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRiskLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskEngineServer).CheckRiskLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskEngine_CheckRiskLimits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskEngineServer).CheckRiskLimits(ctx, req.(*CheckRiskLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskEngine_GetRiskMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRiskMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskEngineServer).GetRiskMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskEngine_GetRiskMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskEngineServer).GetRiskMetrics(ctx, req.(*GetRiskMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskEngine_CreateRiskAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRiskAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskEngineServer).CreateRiskAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskEngine_CreateRiskAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskEngineServer).CreateRiskAlert(ctx, req.(*CreateRiskAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskEngine_GetRiskAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRiskAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskEngineServer).GetRiskAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskEngine_GetRiskAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskEngineServer).GetRiskAlert(ctx, req.(*GetRiskAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskEngine_ListRiskAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRiskAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskEngineServer).ListRiskAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskEngine_ListRiskAlerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskEngineServer).ListRiskAlerts(ctx, req.(*ListRiskAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskEngine_AcknowledgeRiskAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcknowledgeRiskAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskEngineServer).AcknowledgeRiskAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskEngine_AcknowledgeRiskAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskEngineServer).AcknowledgeRiskAlert(ctx, req.(*AcknowledgeRiskAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskEngine_ResolveRiskAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveRiskAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskEngineServer).ResolveRiskAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskEngine_ResolveRiskAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskEngineServer).ResolveRiskAlert(ctx, req.(*ResolveRiskAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskEngine_StreamRiskAlerts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRiskAlertsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RiskEngineServer).StreamRiskAlerts(m, &riskEngineStreamRiskAlertsServer{stream})
}

type RiskEngine_StreamRiskAlertsServer interface {
	Send(*StreamRiskAlertsResponse) error
	grpc.ServerStream
}

type riskEngineStreamRiskAlertsServer struct {
	grpc.ServerStream
}

func (x *riskEngineStreamRiskAlertsServer) Send(m *StreamRiskAlertsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RiskEngine_SetRiskLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRiskLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskEngineServer).SetRiskLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskEngine_SetRiskLimits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskEngineServer).SetRiskLimits(ctx, req.(*SetRiskLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskEngine_GetRiskLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRiskLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskEngineServer).GetRiskLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskEngine_GetRiskLimits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskEngineServer).GetRiskLimits(ctx, req.(*GetRiskLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskEngine_CalculateVaR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateVaRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskEngineServer).CalculateVaR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskEngine_CalculateVaR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskEngineServer).CalculateVaR(ctx, req.(*CalculateVaRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskEngine_CalculateStressTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateStressTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskEngineServer).CalculateStressTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskEngine_CalculateStressTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskEngineServer).CalculateStressTest(ctx, req.(*CalculateStressTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskEngine_GetLiquidationRisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiquidationRiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskEngineServer).GetLiquidationRisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskEngine_GetLiquidationRisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskEngineServer).GetLiquidationRisk(ctx, req.(*GetLiquidationRiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskEngine_GetConcentrationRisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConcentrationRiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskEngineServer).GetConcentrationRisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskEngine_GetConcentrationRisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskEngineServer).GetConcentrationRisk(ctx, req.(*GetConcentrationRiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskEngine_GetCorrelationMatrix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCorrelationMatrixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskEngineServer).GetCorrelationMatrix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskEngine_GetCorrelationMatrix_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskEngineServer).GetCorrelationMatrix(ctx, req.(*GetCorrelationMatrixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskEngine_SimulateTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimulateTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskEngineServer).SimulateTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskEngine_SimulateTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskEngineServer).SimulateTrade(ctx, req.(*SimulateTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskEngine_GetHistoricalRisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoricalRiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskEngineServer).GetHistoricalRisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskEngine_GetHistoricalRisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskEngineServer).GetHistoricalRisk(ctx, req.(*GetHistoricalRiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RiskEngine_ServiceDesc is the grpc.ServiceDesc for RiskEngine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RiskEngine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cqc.services.v1.RiskEngine",
	HandlerType: (*RiskEngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EvaluatePortfolioRisk",
			Handler:    _RiskEngine_EvaluatePortfolioRisk_Handler,
		},
		{
			MethodName: "EvaluatePositionRisk",
			Handler:    _RiskEngine_EvaluatePositionRisk_Handler,
		},
		{
			MethodName: "CheckRiskLimits",
			Handler:    _RiskEngine_CheckRiskLimits_Handler,
		},
		{
			MethodName: "GetRiskMetrics",
			Handler:    _RiskEngine_GetRiskMetrics_Handler,
		},
		{
			MethodName: "CreateRiskAlert",
			Handler:    _RiskEngine_CreateRiskAlert_Handler,
		},
		{
			MethodName: "GetRiskAlert",
			Handler:    _RiskEngine_GetRiskAlert_Handler,
		},
		{
			MethodName: "ListRiskAlerts",
			Handler:    _RiskEngine_ListRiskAlerts_Handler,
		},
		{
			MethodName: "AcknowledgeRiskAlert",
			Handler:    _RiskEngine_AcknowledgeRiskAlert_Handler,
		},
		{
			MethodName: "ResolveRiskAlert",
			Handler:    _RiskEngine_ResolveRiskAlert_Handler,
		},
		{
			MethodName: "SetRiskLimits",
			Handler:    _RiskEngine_SetRiskLimits_Handler,
		},
		{
			MethodName: "GetRiskLimits",
			Handler:    _RiskEngine_GetRiskLimits_Handler,
		},
		{
			MethodName: "CalculateVaR",
			Handler:    _RiskEngine_CalculateVaR_Handler,
		},
		{
			MethodName: "CalculateStressTest",
			Handler:    _RiskEngine_CalculateStressTest_Handler,
		},
		{
			MethodName: "GetLiquidationRisk",
			Handler:    _RiskEngine_GetLiquidationRisk_Handler,
		},
		{
			MethodName: "GetConcentrationRisk",
			Handler:    _RiskEngine_GetConcentrationRisk_Handler,
		},
		{
			MethodName: "GetCorrelationMatrix",
			Handler:    _RiskEngine_GetCorrelationMatrix_Handler,
		},
		{
			MethodName: "SimulateTrade",
			Handler:    _RiskEngine_SimulateTrade_Handler,
		},
		{
			MethodName: "GetHistoricalRisk",
			Handler:    _RiskEngine_GetHistoricalRisk_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamRiskAlerts",
			Handler:       _RiskEngine_StreamRiskAlerts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/services/v1/risk_engine.proto",
}

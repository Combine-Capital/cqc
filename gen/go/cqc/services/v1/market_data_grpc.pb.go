// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/services/v1/market_data.proto

package servicesv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MarketData_GetPrice_FullMethodName            = "/cqc.services.v1.MarketData/GetPrice"
	MarketData_StreamPrices_FullMethodName        = "/cqc.services.v1.MarketData/StreamPrices"
	MarketData_GetPriceHistory_FullMethodName     = "/cqc.services.v1.MarketData/GetPriceHistory"
	MarketData_GetVWAP_FullMethodName             = "/cqc.services.v1.MarketData/GetVWAP"
	MarketData_GetOrderBook_FullMethodName        = "/cqc.services.v1.MarketData/GetOrderBook"
	MarketData_StreamOrderBook_FullMethodName     = "/cqc.services.v1.MarketData/StreamOrderBook"
	MarketData_GetMarketDepth_FullMethodName      = "/cqc.services.v1.MarketData/GetMarketDepth"
	MarketData_GetTrade_FullMethodName            = "/cqc.services.v1.MarketData/GetTrade"
	MarketData_ListTrades_FullMethodName          = "/cqc.services.v1.MarketData/ListTrades"
	MarketData_StreamTrades_FullMethodName        = "/cqc.services.v1.MarketData/StreamTrades"
	MarketData_GetCandle_FullMethodName           = "/cqc.services.v1.MarketData/GetCandle"
	MarketData_ListCandles_FullMethodName         = "/cqc.services.v1.MarketData/ListCandles"
	MarketData_GetLiquidityMetrics_FullMethodName = "/cqc.services.v1.MarketData/GetLiquidityMetrics"
	MarketData_GetMultiVenuePrice_FullMethodName  = "/cqc.services.v1.MarketData/GetMultiVenuePrice"
	MarketData_GetMarketSummary_FullMethodName    = "/cqc.services.v1.MarketData/GetMarketSummary"
)

// MarketDataClient is the client API for MarketData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketDataClient interface {
	// GetPrice retrieves the current price for an asset.
	GetPrice(ctx context.Context, in *GetPriceRequest, opts ...grpc.CallOption) (*GetPriceResponse, error)
	// StreamPrices streams real-time price updates for specified assets.
	StreamPrices(ctx context.Context, in *StreamPricesRequest, opts ...grpc.CallOption) (MarketData_StreamPricesClient, error)
	// GetPriceHistory retrieves historical prices for an asset within a time range.
	GetPriceHistory(ctx context.Context, in *GetPriceHistoryRequest, opts ...grpc.CallOption) (*GetPriceHistoryResponse, error)
	// GetVWAP retrieves the Volume-Weighted Average Price for an asset.
	GetVWAP(ctx context.Context, in *GetVWAPRequest, opts ...grpc.CallOption) (*GetVWAPResponse, error)
	// GetOrderBook retrieves the current order book snapshot for a trading pair.
	GetOrderBook(ctx context.Context, in *GetOrderBookRequest, opts ...grpc.CallOption) (*GetOrderBookResponse, error)
	// StreamOrderBook streams real-time order book updates for a trading pair.
	StreamOrderBook(ctx context.Context, in *StreamOrderBookRequest, opts ...grpc.CallOption) (MarketData_StreamOrderBookClient, error)
	// GetMarketDepth retrieves liquidity depth metrics for a trading pair.
	GetMarketDepth(ctx context.Context, in *GetMarketDepthRequest, opts ...grpc.CallOption) (*GetMarketDepthResponse, error)
	// GetTrade retrieves a specific trade by ID.
	GetTrade(ctx context.Context, in *GetTradeRequest, opts ...grpc.CallOption) (*GetTradeResponse, error)
	// ListTrades retrieves recent trades for a trading pair.
	ListTrades(ctx context.Context, in *ListTradesRequest, opts ...grpc.CallOption) (*ListTradesResponse, error)
	// StreamTrades streams real-time trade executions for specified trading pairs.
	StreamTrades(ctx context.Context, in *StreamTradesRequest, opts ...grpc.CallOption) (MarketData_StreamTradesClient, error)
	// GetCandle retrieves a specific candle for a trading pair at a given time.
	GetCandle(ctx context.Context, in *GetCandleRequest, opts ...grpc.CallOption) (*GetCandleResponse, error)
	// ListCandles retrieves historical candle data for charting and analysis.
	ListCandles(ctx context.Context, in *ListCandlesRequest, opts ...grpc.CallOption) (*ListCandlesResponse, error)
	// GetLiquidityMetrics retrieves liquidity metrics for a trading pair or venue.
	GetLiquidityMetrics(ctx context.Context, in *GetLiquidityMetricsRequest, opts ...grpc.CallOption) (*GetLiquidityMetricsResponse, error)
	// GetMultiVenuePrice retrieves and aggregates prices across multiple venues.
	GetMultiVenuePrice(ctx context.Context, in *GetMultiVenuePriceRequest, opts ...grpc.CallOption) (*GetMultiVenuePriceResponse, error)
	// GetMarketSummary retrieves a comprehensive market summary for an asset.
	GetMarketSummary(ctx context.Context, in *GetMarketSummaryRequest, opts ...grpc.CallOption) (*GetMarketSummaryResponse, error)
}

type marketDataClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketDataClient(cc grpc.ClientConnInterface) MarketDataClient {
	return &marketDataClient{cc}
}

func (c *marketDataClient) GetPrice(ctx context.Context, in *GetPriceRequest, opts ...grpc.CallOption) (*GetPriceResponse, error) {
	out := new(GetPriceResponse)
	err := c.cc.Invoke(ctx, MarketData_GetPrice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketDataClient) StreamPrices(ctx context.Context, in *StreamPricesRequest, opts ...grpc.CallOption) (MarketData_StreamPricesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MarketData_ServiceDesc.Streams[0], MarketData_StreamPrices_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &marketDataStreamPricesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MarketData_StreamPricesClient interface {
	Recv() (*StreamPricesResponse, error)
	grpc.ClientStream
}

type marketDataStreamPricesClient struct {
	grpc.ClientStream
}

func (x *marketDataStreamPricesClient) Recv() (*StreamPricesResponse, error) {
	m := new(StreamPricesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *marketDataClient) GetPriceHistory(ctx context.Context, in *GetPriceHistoryRequest, opts ...grpc.CallOption) (*GetPriceHistoryResponse, error) {
	out := new(GetPriceHistoryResponse)
	err := c.cc.Invoke(ctx, MarketData_GetPriceHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketDataClient) GetVWAP(ctx context.Context, in *GetVWAPRequest, opts ...grpc.CallOption) (*GetVWAPResponse, error) {
	out := new(GetVWAPResponse)
	err := c.cc.Invoke(ctx, MarketData_GetVWAP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketDataClient) GetOrderBook(ctx context.Context, in *GetOrderBookRequest, opts ...grpc.CallOption) (*GetOrderBookResponse, error) {
	out := new(GetOrderBookResponse)
	err := c.cc.Invoke(ctx, MarketData_GetOrderBook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketDataClient) StreamOrderBook(ctx context.Context, in *StreamOrderBookRequest, opts ...grpc.CallOption) (MarketData_StreamOrderBookClient, error) {
	stream, err := c.cc.NewStream(ctx, &MarketData_ServiceDesc.Streams[1], MarketData_StreamOrderBook_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &marketDataStreamOrderBookClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MarketData_StreamOrderBookClient interface {
	Recv() (*StreamOrderBookResponse, error)
	grpc.ClientStream
}

type marketDataStreamOrderBookClient struct {
	grpc.ClientStream
}

func (x *marketDataStreamOrderBookClient) Recv() (*StreamOrderBookResponse, error) {
	m := new(StreamOrderBookResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *marketDataClient) GetMarketDepth(ctx context.Context, in *GetMarketDepthRequest, opts ...grpc.CallOption) (*GetMarketDepthResponse, error) {
	out := new(GetMarketDepthResponse)
	err := c.cc.Invoke(ctx, MarketData_GetMarketDepth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketDataClient) GetTrade(ctx context.Context, in *GetTradeRequest, opts ...grpc.CallOption) (*GetTradeResponse, error) {
	out := new(GetTradeResponse)
	err := c.cc.Invoke(ctx, MarketData_GetTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketDataClient) ListTrades(ctx context.Context, in *ListTradesRequest, opts ...grpc.CallOption) (*ListTradesResponse, error) {
	out := new(ListTradesResponse)
	err := c.cc.Invoke(ctx, MarketData_ListTrades_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketDataClient) StreamTrades(ctx context.Context, in *StreamTradesRequest, opts ...grpc.CallOption) (MarketData_StreamTradesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MarketData_ServiceDesc.Streams[2], MarketData_StreamTrades_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &marketDataStreamTradesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MarketData_StreamTradesClient interface {
	Recv() (*StreamTradesResponse, error)
	grpc.ClientStream
}

type marketDataStreamTradesClient struct {
	grpc.ClientStream
}

func (x *marketDataStreamTradesClient) Recv() (*StreamTradesResponse, error) {
	m := new(StreamTradesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *marketDataClient) GetCandle(ctx context.Context, in *GetCandleRequest, opts ...grpc.CallOption) (*GetCandleResponse, error) {
	out := new(GetCandleResponse)
	err := c.cc.Invoke(ctx, MarketData_GetCandle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketDataClient) ListCandles(ctx context.Context, in *ListCandlesRequest, opts ...grpc.CallOption) (*ListCandlesResponse, error) {
	out := new(ListCandlesResponse)
	err := c.cc.Invoke(ctx, MarketData_ListCandles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketDataClient) GetLiquidityMetrics(ctx context.Context, in *GetLiquidityMetricsRequest, opts ...grpc.CallOption) (*GetLiquidityMetricsResponse, error) {
	out := new(GetLiquidityMetricsResponse)
	err := c.cc.Invoke(ctx, MarketData_GetLiquidityMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketDataClient) GetMultiVenuePrice(ctx context.Context, in *GetMultiVenuePriceRequest, opts ...grpc.CallOption) (*GetMultiVenuePriceResponse, error) {
	out := new(GetMultiVenuePriceResponse)
	err := c.cc.Invoke(ctx, MarketData_GetMultiVenuePrice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketDataClient) GetMarketSummary(ctx context.Context, in *GetMarketSummaryRequest, opts ...grpc.CallOption) (*GetMarketSummaryResponse, error) {
	out := new(GetMarketSummaryResponse)
	err := c.cc.Invoke(ctx, MarketData_GetMarketSummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketDataServer is the server API for MarketData service.
// All implementations must embed UnimplementedMarketDataServer
// for forward compatibility
type MarketDataServer interface {
	// GetPrice retrieves the current price for an asset.
	GetPrice(context.Context, *GetPriceRequest) (*GetPriceResponse, error)
	// StreamPrices streams real-time price updates for specified assets.
	StreamPrices(*StreamPricesRequest, MarketData_StreamPricesServer) error
	// GetPriceHistory retrieves historical prices for an asset within a time range.
	GetPriceHistory(context.Context, *GetPriceHistoryRequest) (*GetPriceHistoryResponse, error)
	// GetVWAP retrieves the Volume-Weighted Average Price for an asset.
	GetVWAP(context.Context, *GetVWAPRequest) (*GetVWAPResponse, error)
	// GetOrderBook retrieves the current order book snapshot for a trading pair.
	GetOrderBook(context.Context, *GetOrderBookRequest) (*GetOrderBookResponse, error)
	// StreamOrderBook streams real-time order book updates for a trading pair.
	StreamOrderBook(*StreamOrderBookRequest, MarketData_StreamOrderBookServer) error
	// GetMarketDepth retrieves liquidity depth metrics for a trading pair.
	GetMarketDepth(context.Context, *GetMarketDepthRequest) (*GetMarketDepthResponse, error)
	// GetTrade retrieves a specific trade by ID.
	GetTrade(context.Context, *GetTradeRequest) (*GetTradeResponse, error)
	// ListTrades retrieves recent trades for a trading pair.
	ListTrades(context.Context, *ListTradesRequest) (*ListTradesResponse, error)
	// StreamTrades streams real-time trade executions for specified trading pairs.
	StreamTrades(*StreamTradesRequest, MarketData_StreamTradesServer) error
	// GetCandle retrieves a specific candle for a trading pair at a given time.
	GetCandle(context.Context, *GetCandleRequest) (*GetCandleResponse, error)
	// ListCandles retrieves historical candle data for charting and analysis.
	ListCandles(context.Context, *ListCandlesRequest) (*ListCandlesResponse, error)
	// GetLiquidityMetrics retrieves liquidity metrics for a trading pair or venue.
	GetLiquidityMetrics(context.Context, *GetLiquidityMetricsRequest) (*GetLiquidityMetricsResponse, error)
	// GetMultiVenuePrice retrieves and aggregates prices across multiple venues.
	GetMultiVenuePrice(context.Context, *GetMultiVenuePriceRequest) (*GetMultiVenuePriceResponse, error)
	// GetMarketSummary retrieves a comprehensive market summary for an asset.
	GetMarketSummary(context.Context, *GetMarketSummaryRequest) (*GetMarketSummaryResponse, error)
	mustEmbedUnimplementedMarketDataServer()
}

// UnimplementedMarketDataServer must be embedded to have forward compatible implementations.
type UnimplementedMarketDataServer struct {
}

func (UnimplementedMarketDataServer) GetPrice(context.Context, *GetPriceRequest) (*GetPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrice not implemented")
}
func (UnimplementedMarketDataServer) StreamPrices(*StreamPricesRequest, MarketData_StreamPricesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamPrices not implemented")
}
func (UnimplementedMarketDataServer) GetPriceHistory(context.Context, *GetPriceHistoryRequest) (*GetPriceHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPriceHistory not implemented")
}
func (UnimplementedMarketDataServer) GetVWAP(context.Context, *GetVWAPRequest) (*GetVWAPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVWAP not implemented")
}
func (UnimplementedMarketDataServer) GetOrderBook(context.Context, *GetOrderBookRequest) (*GetOrderBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderBook not implemented")
}
func (UnimplementedMarketDataServer) StreamOrderBook(*StreamOrderBookRequest, MarketData_StreamOrderBookServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamOrderBook not implemented")
}
func (UnimplementedMarketDataServer) GetMarketDepth(context.Context, *GetMarketDepthRequest) (*GetMarketDepthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketDepth not implemented")
}
func (UnimplementedMarketDataServer) GetTrade(context.Context, *GetTradeRequest) (*GetTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrade not implemented")
}
func (UnimplementedMarketDataServer) ListTrades(context.Context, *ListTradesRequest) (*ListTradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTrades not implemented")
}
func (UnimplementedMarketDataServer) StreamTrades(*StreamTradesRequest, MarketData_StreamTradesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTrades not implemented")
}
func (UnimplementedMarketDataServer) GetCandle(context.Context, *GetCandleRequest) (*GetCandleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCandle not implemented")
}
func (UnimplementedMarketDataServer) ListCandles(context.Context, *ListCandlesRequest) (*ListCandlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCandles not implemented")
}
func (UnimplementedMarketDataServer) GetLiquidityMetrics(context.Context, *GetLiquidityMetricsRequest) (*GetLiquidityMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiquidityMetrics not implemented")
}
func (UnimplementedMarketDataServer) GetMultiVenuePrice(context.Context, *GetMultiVenuePriceRequest) (*GetMultiVenuePriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultiVenuePrice not implemented")
}
func (UnimplementedMarketDataServer) GetMarketSummary(context.Context, *GetMarketSummaryRequest) (*GetMarketSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketSummary not implemented")
}
func (UnimplementedMarketDataServer) mustEmbedUnimplementedMarketDataServer() {}

// UnsafeMarketDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketDataServer will
// result in compilation errors.
type UnsafeMarketDataServer interface {
	mustEmbedUnimplementedMarketDataServer()
}

func RegisterMarketDataServer(s grpc.ServiceRegistrar, srv MarketDataServer) {
	s.RegisterService(&MarketData_ServiceDesc, srv)
}

func _MarketData_GetPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketDataServer).GetPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketData_GetPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketDataServer).GetPrice(ctx, req.(*GetPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketData_StreamPrices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamPricesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MarketDataServer).StreamPrices(m, &marketDataStreamPricesServer{stream})
}

type MarketData_StreamPricesServer interface {
	Send(*StreamPricesResponse) error
	grpc.ServerStream
}

type marketDataStreamPricesServer struct {
	grpc.ServerStream
}

func (x *marketDataStreamPricesServer) Send(m *StreamPricesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MarketData_GetPriceHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPriceHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketDataServer).GetPriceHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketData_GetPriceHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketDataServer).GetPriceHistory(ctx, req.(*GetPriceHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketData_GetVWAP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVWAPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketDataServer).GetVWAP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketData_GetVWAP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketDataServer).GetVWAP(ctx, req.(*GetVWAPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketData_GetOrderBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketDataServer).GetOrderBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketData_GetOrderBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketDataServer).GetOrderBook(ctx, req.(*GetOrderBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketData_StreamOrderBook_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamOrderBookRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MarketDataServer).StreamOrderBook(m, &marketDataStreamOrderBookServer{stream})
}

type MarketData_StreamOrderBookServer interface {
	Send(*StreamOrderBookResponse) error
	grpc.ServerStream
}

type marketDataStreamOrderBookServer struct {
	grpc.ServerStream
}

func (x *marketDataStreamOrderBookServer) Send(m *StreamOrderBookResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MarketData_GetMarketDepth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketDepthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketDataServer).GetMarketDepth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketData_GetMarketDepth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketDataServer).GetMarketDepth(ctx, req.(*GetMarketDepthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketData_GetTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketDataServer).GetTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketData_GetTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketDataServer).GetTrade(ctx, req.(*GetTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketData_ListTrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketDataServer).ListTrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketData_ListTrades_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketDataServer).ListTrades(ctx, req.(*ListTradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketData_StreamTrades_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTradesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MarketDataServer).StreamTrades(m, &marketDataStreamTradesServer{stream})
}

type MarketData_StreamTradesServer interface {
	Send(*StreamTradesResponse) error
	grpc.ServerStream
}

type marketDataStreamTradesServer struct {
	grpc.ServerStream
}

func (x *marketDataStreamTradesServer) Send(m *StreamTradesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MarketData_GetCandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCandleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketDataServer).GetCandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketData_GetCandle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketDataServer).GetCandle(ctx, req.(*GetCandleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketData_ListCandles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCandlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketDataServer).ListCandles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketData_ListCandles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketDataServer).ListCandles(ctx, req.(*ListCandlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketData_GetLiquidityMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiquidityMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketDataServer).GetLiquidityMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketData_GetLiquidityMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketDataServer).GetLiquidityMetrics(ctx, req.(*GetLiquidityMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketData_GetMultiVenuePrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMultiVenuePriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketDataServer).GetMultiVenuePrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketData_GetMultiVenuePrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketDataServer).GetMultiVenuePrice(ctx, req.(*GetMultiVenuePriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketData_GetMarketSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketDataServer).GetMarketSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketData_GetMarketSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketDataServer).GetMarketSummary(ctx, req.(*GetMarketSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MarketData_ServiceDesc is the grpc.ServiceDesc for MarketData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MarketData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cqc.services.v1.MarketData",
	HandlerType: (*MarketDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPrice",
			Handler:    _MarketData_GetPrice_Handler,
		},
		{
			MethodName: "GetPriceHistory",
			Handler:    _MarketData_GetPriceHistory_Handler,
		},
		{
			MethodName: "GetVWAP",
			Handler:    _MarketData_GetVWAP_Handler,
		},
		{
			MethodName: "GetOrderBook",
			Handler:    _MarketData_GetOrderBook_Handler,
		},
		{
			MethodName: "GetMarketDepth",
			Handler:    _MarketData_GetMarketDepth_Handler,
		},
		{
			MethodName: "GetTrade",
			Handler:    _MarketData_GetTrade_Handler,
		},
		{
			MethodName: "ListTrades",
			Handler:    _MarketData_ListTrades_Handler,
		},
		{
			MethodName: "GetCandle",
			Handler:    _MarketData_GetCandle_Handler,
		},
		{
			MethodName: "ListCandles",
			Handler:    _MarketData_ListCandles_Handler,
		},
		{
			MethodName: "GetLiquidityMetrics",
			Handler:    _MarketData_GetLiquidityMetrics_Handler,
		},
		{
			MethodName: "GetMultiVenuePrice",
			Handler:    _MarketData_GetMultiVenuePrice_Handler,
		},
		{
			MethodName: "GetMarketSummary",
			Handler:    _MarketData_GetMarketSummary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamPrices",
			Handler:       _MarketData_StreamPrices_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamOrderBook",
			Handler:       _MarketData_StreamOrderBook_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamTrades",
			Handler:       _MarketData_StreamTrades_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/services/v1/market_data.proto",
}

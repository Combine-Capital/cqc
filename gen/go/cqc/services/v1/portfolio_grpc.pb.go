// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/services/v1/portfolio.proto

package servicesv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Portfolio_CreatePortfolio_FullMethodName        = "/cqc.services.v1.Portfolio/CreatePortfolio"
	Portfolio_GetPortfolio_FullMethodName           = "/cqc.services.v1.Portfolio/GetPortfolio"
	Portfolio_UpdatePortfolio_FullMethodName        = "/cqc.services.v1.Portfolio/UpdatePortfolio"
	Portfolio_DeletePortfolio_FullMethodName        = "/cqc.services.v1.Portfolio/DeletePortfolio"
	Portfolio_ListPortfolios_FullMethodName         = "/cqc.services.v1.Portfolio/ListPortfolios"
	Portfolio_GetPortfolioSummary_FullMethodName    = "/cqc.services.v1.Portfolio/GetPortfolioSummary"
	Portfolio_CreatePosition_FullMethodName         = "/cqc.services.v1.Portfolio/CreatePosition"
	Portfolio_GetPosition_FullMethodName            = "/cqc.services.v1.Portfolio/GetPosition"
	Portfolio_UpdatePosition_FullMethodName         = "/cqc.services.v1.Portfolio/UpdatePosition"
	Portfolio_ClosePosition_FullMethodName          = "/cqc.services.v1.Portfolio/ClosePosition"
	Portfolio_ListPositions_FullMethodName          = "/cqc.services.v1.Portfolio/ListPositions"
	Portfolio_GetExposure_FullMethodName            = "/cqc.services.v1.Portfolio/GetExposure"
	Portfolio_CreateTransaction_FullMethodName      = "/cqc.services.v1.Portfolio/CreateTransaction"
	Portfolio_GetTransaction_FullMethodName         = "/cqc.services.v1.Portfolio/GetTransaction"
	Portfolio_ListTransactions_FullMethodName       = "/cqc.services.v1.Portfolio/ListTransactions"
	Portfolio_GetPnL_FullMethodName                 = "/cqc.services.v1.Portfolio/GetPnL"
	Portfolio_GetAllocation_FullMethodName          = "/cqc.services.v1.Portfolio/GetAllocation"
	Portfolio_StreamPortfolioUpdates_FullMethodName = "/cqc.services.v1.Portfolio/StreamPortfolioUpdates"
	Portfolio_RebalancePortfolio_FullMethodName     = "/cqc.services.v1.Portfolio/RebalancePortfolio"
	Portfolio_GetPerformanceMetrics_FullMethodName  = "/cqc.services.v1.Portfolio/GetPerformanceMetrics"
)

// PortfolioClient is the client API for Portfolio service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortfolioClient interface {
	// CreatePortfolio creates a new portfolio.
	CreatePortfolio(ctx context.Context, in *CreatePortfolioRequest, opts ...grpc.CallOption) (*CreatePortfolioResponse, error)
	// GetPortfolio retrieves a specific portfolio by ID.
	GetPortfolio(ctx context.Context, in *GetPortfolioRequest, opts ...grpc.CallOption) (*GetPortfolioResponse, error)
	// UpdatePortfolio updates portfolio metadata and settings.
	UpdatePortfolio(ctx context.Context, in *UpdatePortfolioRequest, opts ...grpc.CallOption) (*UpdatePortfolioResponse, error)
	// DeletePortfolio soft-deletes a portfolio.
	DeletePortfolio(ctx context.Context, in *DeletePortfolioRequest, opts ...grpc.CallOption) (*DeletePortfolioResponse, error)
	// ListPortfolios retrieves portfolios for a given owner.
	ListPortfolios(ctx context.Context, in *ListPortfoliosRequest, opts ...grpc.CallOption) (*ListPortfoliosResponse, error)
	// GetPortfolioSummary retrieves comprehensive portfolio statistics and metrics.
	GetPortfolioSummary(ctx context.Context, in *GetPortfolioSummaryRequest, opts ...grpc.CallOption) (*GetPortfolioSummaryResponse, error)
	// CreatePosition creates a new position in a portfolio.
	CreatePosition(ctx context.Context, in *CreatePositionRequest, opts ...grpc.CallOption) (*CreatePositionResponse, error)
	// GetPosition retrieves a specific position by ID.
	GetPosition(ctx context.Context, in *GetPositionRequest, opts ...grpc.CallOption) (*GetPositionResponse, error)
	// UpdatePosition updates position details (used for manual adjustments).
	UpdatePosition(ctx context.Context, in *UpdatePositionRequest, opts ...grpc.CallOption) (*UpdatePositionResponse, error)
	// ClosePosition closes an existing position.
	ClosePosition(ctx context.Context, in *ClosePositionRequest, opts ...grpc.CallOption) (*ClosePositionResponse, error)
	// ListPositions retrieves all positions for a portfolio.
	ListPositions(ctx context.Context, in *ListPositionsRequest, opts ...grpc.CallOption) (*ListPositionsResponse, error)
	// GetExposure retrieves aggregated exposure metrics for a portfolio.
	GetExposure(ctx context.Context, in *GetExposureRequest, opts ...grpc.CallOption) (*GetExposureResponse, error)
	// CreateTransaction records a new transaction in a portfolio.
	CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error)
	// GetTransaction retrieves a specific transaction by ID.
	GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error)
	// ListTransactions retrieves transaction history for a portfolio.
	ListTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (*ListTransactionsResponse, error)
	// GetPnL retrieves profit/loss metrics for a portfolio or position.
	GetPnL(ctx context.Context, in *GetPnLRequest, opts ...grpc.CallOption) (*GetPnLResponse, error)
	// GetAllocation retrieves asset allocation breakdown for a portfolio.
	GetAllocation(ctx context.Context, in *GetAllocationRequest, opts ...grpc.CallOption) (*GetAllocationResponse, error)
	// StreamPortfolioUpdates streams real-time portfolio value updates.
	StreamPortfolioUpdates(ctx context.Context, in *StreamPortfolioUpdatesRequest, opts ...grpc.CallOption) (Portfolio_StreamPortfolioUpdatesClient, error)
	// RebalancePortfolio generates rebalancing recommendations.
	RebalancePortfolio(ctx context.Context, in *RebalancePortfolioRequest, opts ...grpc.CallOption) (*RebalancePortfolioResponse, error)
	// GetPerformanceMetrics retrieves detailed performance analytics.
	GetPerformanceMetrics(ctx context.Context, in *GetPerformanceMetricsRequest, opts ...grpc.CallOption) (*GetPerformanceMetricsResponse, error)
}

type portfolioClient struct {
	cc grpc.ClientConnInterface
}

func NewPortfolioClient(cc grpc.ClientConnInterface) PortfolioClient {
	return &portfolioClient{cc}
}

func (c *portfolioClient) CreatePortfolio(ctx context.Context, in *CreatePortfolioRequest, opts ...grpc.CallOption) (*CreatePortfolioResponse, error) {
	out := new(CreatePortfolioResponse)
	err := c.cc.Invoke(ctx, Portfolio_CreatePortfolio_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioClient) GetPortfolio(ctx context.Context, in *GetPortfolioRequest, opts ...grpc.CallOption) (*GetPortfolioResponse, error) {
	out := new(GetPortfolioResponse)
	err := c.cc.Invoke(ctx, Portfolio_GetPortfolio_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioClient) UpdatePortfolio(ctx context.Context, in *UpdatePortfolioRequest, opts ...grpc.CallOption) (*UpdatePortfolioResponse, error) {
	out := new(UpdatePortfolioResponse)
	err := c.cc.Invoke(ctx, Portfolio_UpdatePortfolio_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioClient) DeletePortfolio(ctx context.Context, in *DeletePortfolioRequest, opts ...grpc.CallOption) (*DeletePortfolioResponse, error) {
	out := new(DeletePortfolioResponse)
	err := c.cc.Invoke(ctx, Portfolio_DeletePortfolio_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioClient) ListPortfolios(ctx context.Context, in *ListPortfoliosRequest, opts ...grpc.CallOption) (*ListPortfoliosResponse, error) {
	out := new(ListPortfoliosResponse)
	err := c.cc.Invoke(ctx, Portfolio_ListPortfolios_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioClient) GetPortfolioSummary(ctx context.Context, in *GetPortfolioSummaryRequest, opts ...grpc.CallOption) (*GetPortfolioSummaryResponse, error) {
	out := new(GetPortfolioSummaryResponse)
	err := c.cc.Invoke(ctx, Portfolio_GetPortfolioSummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioClient) CreatePosition(ctx context.Context, in *CreatePositionRequest, opts ...grpc.CallOption) (*CreatePositionResponse, error) {
	out := new(CreatePositionResponse)
	err := c.cc.Invoke(ctx, Portfolio_CreatePosition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioClient) GetPosition(ctx context.Context, in *GetPositionRequest, opts ...grpc.CallOption) (*GetPositionResponse, error) {
	out := new(GetPositionResponse)
	err := c.cc.Invoke(ctx, Portfolio_GetPosition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioClient) UpdatePosition(ctx context.Context, in *UpdatePositionRequest, opts ...grpc.CallOption) (*UpdatePositionResponse, error) {
	out := new(UpdatePositionResponse)
	err := c.cc.Invoke(ctx, Portfolio_UpdatePosition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioClient) ClosePosition(ctx context.Context, in *ClosePositionRequest, opts ...grpc.CallOption) (*ClosePositionResponse, error) {
	out := new(ClosePositionResponse)
	err := c.cc.Invoke(ctx, Portfolio_ClosePosition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioClient) ListPositions(ctx context.Context, in *ListPositionsRequest, opts ...grpc.CallOption) (*ListPositionsResponse, error) {
	out := new(ListPositionsResponse)
	err := c.cc.Invoke(ctx, Portfolio_ListPositions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioClient) GetExposure(ctx context.Context, in *GetExposureRequest, opts ...grpc.CallOption) (*GetExposureResponse, error) {
	out := new(GetExposureResponse)
	err := c.cc.Invoke(ctx, Portfolio_GetExposure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioClient) CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error) {
	out := new(CreateTransactionResponse)
	err := c.cc.Invoke(ctx, Portfolio_CreateTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error) {
	out := new(GetTransactionResponse)
	err := c.cc.Invoke(ctx, Portfolio_GetTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioClient) ListTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (*ListTransactionsResponse, error) {
	out := new(ListTransactionsResponse)
	err := c.cc.Invoke(ctx, Portfolio_ListTransactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioClient) GetPnL(ctx context.Context, in *GetPnLRequest, opts ...grpc.CallOption) (*GetPnLResponse, error) {
	out := new(GetPnLResponse)
	err := c.cc.Invoke(ctx, Portfolio_GetPnL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioClient) GetAllocation(ctx context.Context, in *GetAllocationRequest, opts ...grpc.CallOption) (*GetAllocationResponse, error) {
	out := new(GetAllocationResponse)
	err := c.cc.Invoke(ctx, Portfolio_GetAllocation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioClient) StreamPortfolioUpdates(ctx context.Context, in *StreamPortfolioUpdatesRequest, opts ...grpc.CallOption) (Portfolio_StreamPortfolioUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Portfolio_ServiceDesc.Streams[0], Portfolio_StreamPortfolioUpdates_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &portfolioStreamPortfolioUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Portfolio_StreamPortfolioUpdatesClient interface {
	Recv() (*StreamPortfolioUpdatesResponse, error)
	grpc.ClientStream
}

type portfolioStreamPortfolioUpdatesClient struct {
	grpc.ClientStream
}

func (x *portfolioStreamPortfolioUpdatesClient) Recv() (*StreamPortfolioUpdatesResponse, error) {
	m := new(StreamPortfolioUpdatesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *portfolioClient) RebalancePortfolio(ctx context.Context, in *RebalancePortfolioRequest, opts ...grpc.CallOption) (*RebalancePortfolioResponse, error) {
	out := new(RebalancePortfolioResponse)
	err := c.cc.Invoke(ctx, Portfolio_RebalancePortfolio_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioClient) GetPerformanceMetrics(ctx context.Context, in *GetPerformanceMetricsRequest, opts ...grpc.CallOption) (*GetPerformanceMetricsResponse, error) {
	out := new(GetPerformanceMetricsResponse)
	err := c.cc.Invoke(ctx, Portfolio_GetPerformanceMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortfolioServer is the server API for Portfolio service.
// All implementations must embed UnimplementedPortfolioServer
// for forward compatibility
type PortfolioServer interface {
	// CreatePortfolio creates a new portfolio.
	CreatePortfolio(context.Context, *CreatePortfolioRequest) (*CreatePortfolioResponse, error)
	// GetPortfolio retrieves a specific portfolio by ID.
	GetPortfolio(context.Context, *GetPortfolioRequest) (*GetPortfolioResponse, error)
	// UpdatePortfolio updates portfolio metadata and settings.
	UpdatePortfolio(context.Context, *UpdatePortfolioRequest) (*UpdatePortfolioResponse, error)
	// DeletePortfolio soft-deletes a portfolio.
	DeletePortfolio(context.Context, *DeletePortfolioRequest) (*DeletePortfolioResponse, error)
	// ListPortfolios retrieves portfolios for a given owner.
	ListPortfolios(context.Context, *ListPortfoliosRequest) (*ListPortfoliosResponse, error)
	// GetPortfolioSummary retrieves comprehensive portfolio statistics and metrics.
	GetPortfolioSummary(context.Context, *GetPortfolioSummaryRequest) (*GetPortfolioSummaryResponse, error)
	// CreatePosition creates a new position in a portfolio.
	CreatePosition(context.Context, *CreatePositionRequest) (*CreatePositionResponse, error)
	// GetPosition retrieves a specific position by ID.
	GetPosition(context.Context, *GetPositionRequest) (*GetPositionResponse, error)
	// UpdatePosition updates position details (used for manual adjustments).
	UpdatePosition(context.Context, *UpdatePositionRequest) (*UpdatePositionResponse, error)
	// ClosePosition closes an existing position.
	ClosePosition(context.Context, *ClosePositionRequest) (*ClosePositionResponse, error)
	// ListPositions retrieves all positions for a portfolio.
	ListPositions(context.Context, *ListPositionsRequest) (*ListPositionsResponse, error)
	// GetExposure retrieves aggregated exposure metrics for a portfolio.
	GetExposure(context.Context, *GetExposureRequest) (*GetExposureResponse, error)
	// CreateTransaction records a new transaction in a portfolio.
	CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error)
	// GetTransaction retrieves a specific transaction by ID.
	GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error)
	// ListTransactions retrieves transaction history for a portfolio.
	ListTransactions(context.Context, *ListTransactionsRequest) (*ListTransactionsResponse, error)
	// GetPnL retrieves profit/loss metrics for a portfolio or position.
	GetPnL(context.Context, *GetPnLRequest) (*GetPnLResponse, error)
	// GetAllocation retrieves asset allocation breakdown for a portfolio.
	GetAllocation(context.Context, *GetAllocationRequest) (*GetAllocationResponse, error)
	// StreamPortfolioUpdates streams real-time portfolio value updates.
	StreamPortfolioUpdates(*StreamPortfolioUpdatesRequest, Portfolio_StreamPortfolioUpdatesServer) error
	// RebalancePortfolio generates rebalancing recommendations.
	RebalancePortfolio(context.Context, *RebalancePortfolioRequest) (*RebalancePortfolioResponse, error)
	// GetPerformanceMetrics retrieves detailed performance analytics.
	GetPerformanceMetrics(context.Context, *GetPerformanceMetricsRequest) (*GetPerformanceMetricsResponse, error)
	mustEmbedUnimplementedPortfolioServer()
}

// UnimplementedPortfolioServer must be embedded to have forward compatible implementations.
type UnimplementedPortfolioServer struct {
}

func (UnimplementedPortfolioServer) CreatePortfolio(context.Context, *CreatePortfolioRequest) (*CreatePortfolioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePortfolio not implemented")
}
func (UnimplementedPortfolioServer) GetPortfolio(context.Context, *GetPortfolioRequest) (*GetPortfolioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortfolio not implemented")
}
func (UnimplementedPortfolioServer) UpdatePortfolio(context.Context, *UpdatePortfolioRequest) (*UpdatePortfolioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePortfolio not implemented")
}
func (UnimplementedPortfolioServer) DeletePortfolio(context.Context, *DeletePortfolioRequest) (*DeletePortfolioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePortfolio not implemented")
}
func (UnimplementedPortfolioServer) ListPortfolios(context.Context, *ListPortfoliosRequest) (*ListPortfoliosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPortfolios not implemented")
}
func (UnimplementedPortfolioServer) GetPortfolioSummary(context.Context, *GetPortfolioSummaryRequest) (*GetPortfolioSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortfolioSummary not implemented")
}
func (UnimplementedPortfolioServer) CreatePosition(context.Context, *CreatePositionRequest) (*CreatePositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePosition not implemented")
}
func (UnimplementedPortfolioServer) GetPosition(context.Context, *GetPositionRequest) (*GetPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPosition not implemented")
}
func (UnimplementedPortfolioServer) UpdatePosition(context.Context, *UpdatePositionRequest) (*UpdatePositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePosition not implemented")
}
func (UnimplementedPortfolioServer) ClosePosition(context.Context, *ClosePositionRequest) (*ClosePositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClosePosition not implemented")
}
func (UnimplementedPortfolioServer) ListPositions(context.Context, *ListPositionsRequest) (*ListPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPositions not implemented")
}
func (UnimplementedPortfolioServer) GetExposure(context.Context, *GetExposureRequest) (*GetExposureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExposure not implemented")
}
func (UnimplementedPortfolioServer) CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedPortfolioServer) GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (UnimplementedPortfolioServer) ListTransactions(context.Context, *ListTransactionsRequest) (*ListTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransactions not implemented")
}
func (UnimplementedPortfolioServer) GetPnL(context.Context, *GetPnLRequest) (*GetPnLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPnL not implemented")
}
func (UnimplementedPortfolioServer) GetAllocation(context.Context, *GetAllocationRequest) (*GetAllocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllocation not implemented")
}
func (UnimplementedPortfolioServer) StreamPortfolioUpdates(*StreamPortfolioUpdatesRequest, Portfolio_StreamPortfolioUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamPortfolioUpdates not implemented")
}
func (UnimplementedPortfolioServer) RebalancePortfolio(context.Context, *RebalancePortfolioRequest) (*RebalancePortfolioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebalancePortfolio not implemented")
}
func (UnimplementedPortfolioServer) GetPerformanceMetrics(context.Context, *GetPerformanceMetricsRequest) (*GetPerformanceMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerformanceMetrics not implemented")
}
func (UnimplementedPortfolioServer) mustEmbedUnimplementedPortfolioServer() {}

// UnsafePortfolioServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortfolioServer will
// result in compilation errors.
type UnsafePortfolioServer interface {
	mustEmbedUnimplementedPortfolioServer()
}

func RegisterPortfolioServer(s grpc.ServiceRegistrar, srv PortfolioServer) {
	s.RegisterService(&Portfolio_ServiceDesc, srv)
}

func _Portfolio_CreatePortfolio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePortfolioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServer).CreatePortfolio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Portfolio_CreatePortfolio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServer).CreatePortfolio(ctx, req.(*CreatePortfolioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Portfolio_GetPortfolio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortfolioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServer).GetPortfolio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Portfolio_GetPortfolio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServer).GetPortfolio(ctx, req.(*GetPortfolioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Portfolio_UpdatePortfolio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePortfolioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServer).UpdatePortfolio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Portfolio_UpdatePortfolio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServer).UpdatePortfolio(ctx, req.(*UpdatePortfolioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Portfolio_DeletePortfolio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePortfolioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServer).DeletePortfolio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Portfolio_DeletePortfolio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServer).DeletePortfolio(ctx, req.(*DeletePortfolioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Portfolio_ListPortfolios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPortfoliosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServer).ListPortfolios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Portfolio_ListPortfolios_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServer).ListPortfolios(ctx, req.(*ListPortfoliosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Portfolio_GetPortfolioSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortfolioSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServer).GetPortfolioSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Portfolio_GetPortfolioSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServer).GetPortfolioSummary(ctx, req.(*GetPortfolioSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Portfolio_CreatePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServer).CreatePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Portfolio_CreatePosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServer).CreatePosition(ctx, req.(*CreatePositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Portfolio_GetPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServer).GetPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Portfolio_GetPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServer).GetPosition(ctx, req.(*GetPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Portfolio_UpdatePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServer).UpdatePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Portfolio_UpdatePosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServer).UpdatePosition(ctx, req.(*UpdatePositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Portfolio_ClosePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClosePositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServer).ClosePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Portfolio_ClosePosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServer).ClosePosition(ctx, req.(*ClosePositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Portfolio_ListPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServer).ListPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Portfolio_ListPositions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServer).ListPositions(ctx, req.(*ListPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Portfolio_GetExposure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExposureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServer).GetExposure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Portfolio_GetExposure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServer).GetExposure(ctx, req.(*GetExposureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Portfolio_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Portfolio_CreateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServer).CreateTransaction(ctx, req.(*CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Portfolio_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Portfolio_GetTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServer).GetTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Portfolio_ListTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServer).ListTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Portfolio_ListTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServer).ListTransactions(ctx, req.(*ListTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Portfolio_GetPnL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPnLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServer).GetPnL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Portfolio_GetPnL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServer).GetPnL(ctx, req.(*GetPnLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Portfolio_GetAllocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServer).GetAllocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Portfolio_GetAllocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServer).GetAllocation(ctx, req.(*GetAllocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Portfolio_StreamPortfolioUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamPortfolioUpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PortfolioServer).StreamPortfolioUpdates(m, &portfolioStreamPortfolioUpdatesServer{stream})
}

type Portfolio_StreamPortfolioUpdatesServer interface {
	Send(*StreamPortfolioUpdatesResponse) error
	grpc.ServerStream
}

type portfolioStreamPortfolioUpdatesServer struct {
	grpc.ServerStream
}

func (x *portfolioStreamPortfolioUpdatesServer) Send(m *StreamPortfolioUpdatesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Portfolio_RebalancePortfolio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebalancePortfolioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServer).RebalancePortfolio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Portfolio_RebalancePortfolio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServer).RebalancePortfolio(ctx, req.(*RebalancePortfolioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Portfolio_GetPerformanceMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPerformanceMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServer).GetPerformanceMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Portfolio_GetPerformanceMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServer).GetPerformanceMetrics(ctx, req.(*GetPerformanceMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Portfolio_ServiceDesc is the grpc.ServiceDesc for Portfolio service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Portfolio_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cqc.services.v1.Portfolio",
	HandlerType: (*PortfolioServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePortfolio",
			Handler:    _Portfolio_CreatePortfolio_Handler,
		},
		{
			MethodName: "GetPortfolio",
			Handler:    _Portfolio_GetPortfolio_Handler,
		},
		{
			MethodName: "UpdatePortfolio",
			Handler:    _Portfolio_UpdatePortfolio_Handler,
		},
		{
			MethodName: "DeletePortfolio",
			Handler:    _Portfolio_DeletePortfolio_Handler,
		},
		{
			MethodName: "ListPortfolios",
			Handler:    _Portfolio_ListPortfolios_Handler,
		},
		{
			MethodName: "GetPortfolioSummary",
			Handler:    _Portfolio_GetPortfolioSummary_Handler,
		},
		{
			MethodName: "CreatePosition",
			Handler:    _Portfolio_CreatePosition_Handler,
		},
		{
			MethodName: "GetPosition",
			Handler:    _Portfolio_GetPosition_Handler,
		},
		{
			MethodName: "UpdatePosition",
			Handler:    _Portfolio_UpdatePosition_Handler,
		},
		{
			MethodName: "ClosePosition",
			Handler:    _Portfolio_ClosePosition_Handler,
		},
		{
			MethodName: "ListPositions",
			Handler:    _Portfolio_ListPositions_Handler,
		},
		{
			MethodName: "GetExposure",
			Handler:    _Portfolio_GetExposure_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _Portfolio_CreateTransaction_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _Portfolio_GetTransaction_Handler,
		},
		{
			MethodName: "ListTransactions",
			Handler:    _Portfolio_ListTransactions_Handler,
		},
		{
			MethodName: "GetPnL",
			Handler:    _Portfolio_GetPnL_Handler,
		},
		{
			MethodName: "GetAllocation",
			Handler:    _Portfolio_GetAllocation_Handler,
		},
		{
			MethodName: "RebalancePortfolio",
			Handler:    _Portfolio_RebalancePortfolio_Handler,
		},
		{
			MethodName: "GetPerformanceMetrics",
			Handler:    _Portfolio_GetPerformanceMetrics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamPortfolioUpdates",
			Handler:       _Portfolio_StreamPortfolioUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/services/v1/portfolio.proto",
}

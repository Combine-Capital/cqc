// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/services/v1/asset_registry.proto

package servicesv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AssetRegistry_CreateAsset_FullMethodName             = "/cqc.services.v1.AssetRegistry/CreateAsset"
	AssetRegistry_GetAsset_FullMethodName                = "/cqc.services.v1.AssetRegistry/GetAsset"
	AssetRegistry_UpdateAsset_FullMethodName             = "/cqc.services.v1.AssetRegistry/UpdateAsset"
	AssetRegistry_DeleteAsset_FullMethodName             = "/cqc.services.v1.AssetRegistry/DeleteAsset"
	AssetRegistry_ListAssets_FullMethodName              = "/cqc.services.v1.AssetRegistry/ListAssets"
	AssetRegistry_SearchAssets_FullMethodName            = "/cqc.services.v1.AssetRegistry/SearchAssets"
	AssetRegistry_CreateAssetDeployment_FullMethodName   = "/cqc.services.v1.AssetRegistry/CreateAssetDeployment"
	AssetRegistry_GetAssetDeployment_FullMethodName      = "/cqc.services.v1.AssetRegistry/GetAssetDeployment"
	AssetRegistry_ListAssetDeployments_FullMethodName    = "/cqc.services.v1.AssetRegistry/ListAssetDeployments"
	AssetRegistry_CreateAssetIdentifier_FullMethodName   = "/cqc.services.v1.AssetRegistry/CreateAssetIdentifier"
	AssetRegistry_GetAssetIdentifier_FullMethodName      = "/cqc.services.v1.AssetRegistry/GetAssetIdentifier"
	AssetRegistry_ListAssetIdentifiers_FullMethodName    = "/cqc.services.v1.AssetRegistry/ListAssetIdentifiers"
	AssetRegistry_CreateAssetRelationship_FullMethodName = "/cqc.services.v1.AssetRegistry/CreateAssetRelationship"
	AssetRegistry_ListAssetRelationships_FullMethodName  = "/cqc.services.v1.AssetRegistry/ListAssetRelationships"
	AssetRegistry_CreateAssetGroup_FullMethodName        = "/cqc.services.v1.AssetRegistry/CreateAssetGroup"
	AssetRegistry_GetAssetGroup_FullMethodName           = "/cqc.services.v1.AssetRegistry/GetAssetGroup"
	AssetRegistry_AddAssetToGroup_FullMethodName         = "/cqc.services.v1.AssetRegistry/AddAssetToGroup"
	AssetRegistry_RemoveAssetFromGroup_FullMethodName    = "/cqc.services.v1.AssetRegistry/RemoveAssetFromGroup"
	AssetRegistry_RaiseQualityFlag_FullMethodName        = "/cqc.services.v1.AssetRegistry/RaiseQualityFlag"
	AssetRegistry_ResolveQualityFlag_FullMethodName      = "/cqc.services.v1.AssetRegistry/ResolveQualityFlag"
	AssetRegistry_ListQualityFlags_FullMethodName        = "/cqc.services.v1.AssetRegistry/ListQualityFlags"
	AssetRegistry_CreateChain_FullMethodName             = "/cqc.services.v1.AssetRegistry/CreateChain"
	AssetRegistry_GetChain_FullMethodName                = "/cqc.services.v1.AssetRegistry/GetChain"
	AssetRegistry_ListChains_FullMethodName              = "/cqc.services.v1.AssetRegistry/ListChains"
	AssetRegistry_CreateSymbol_FullMethodName            = "/cqc.services.v1.AssetRegistry/CreateSymbol"
	AssetRegistry_GetSymbol_FullMethodName               = "/cqc.services.v1.AssetRegistry/GetSymbol"
	AssetRegistry_UpdateSymbol_FullMethodName            = "/cqc.services.v1.AssetRegistry/UpdateSymbol"
	AssetRegistry_DeleteSymbol_FullMethodName            = "/cqc.services.v1.AssetRegistry/DeleteSymbol"
	AssetRegistry_ListSymbols_FullMethodName             = "/cqc.services.v1.AssetRegistry/ListSymbols"
	AssetRegistry_SearchSymbols_FullMethodName           = "/cqc.services.v1.AssetRegistry/SearchSymbols"
	AssetRegistry_CreateSymbolIdentifier_FullMethodName  = "/cqc.services.v1.AssetRegistry/CreateSymbolIdentifier"
	AssetRegistry_GetSymbolIdentifier_FullMethodName     = "/cqc.services.v1.AssetRegistry/GetSymbolIdentifier"
	AssetRegistry_ListSymbolIdentifiers_FullMethodName   = "/cqc.services.v1.AssetRegistry/ListSymbolIdentifiers"
	AssetRegistry_CreateVenue_FullMethodName             = "/cqc.services.v1.AssetRegistry/CreateVenue"
	AssetRegistry_GetVenue_FullMethodName                = "/cqc.services.v1.AssetRegistry/GetVenue"
	AssetRegistry_ListVenues_FullMethodName              = "/cqc.services.v1.AssetRegistry/ListVenues"
	AssetRegistry_CreateVenueAsset_FullMethodName        = "/cqc.services.v1.AssetRegistry/CreateVenueAsset"
	AssetRegistry_GetVenueAsset_FullMethodName           = "/cqc.services.v1.AssetRegistry/GetVenueAsset"
	AssetRegistry_ListVenueAssets_FullMethodName         = "/cqc.services.v1.AssetRegistry/ListVenueAssets"
	AssetRegistry_CreateVenueSymbol_FullMethodName       = "/cqc.services.v1.AssetRegistry/CreateVenueSymbol"
	AssetRegistry_GetVenueSymbol_FullMethodName          = "/cqc.services.v1.AssetRegistry/GetVenueSymbol"
	AssetRegistry_ListVenueSymbols_FullMethodName        = "/cqc.services.v1.AssetRegistry/ListVenueSymbols"
)

// AssetRegistryClient is the client API for AssetRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssetRegistryClient interface {
	// CreateAsset creates a new canonical asset in the registry.
	CreateAsset(ctx context.Context, in *CreateAssetRequest, opts ...grpc.CallOption) (*CreateAssetResponse, error)
	// GetAsset retrieves a specific asset by ID.
	GetAsset(ctx context.Context, in *GetAssetRequest, opts ...grpc.CallOption) (*GetAssetResponse, error)
	// UpdateAsset updates an existing asset's metadata.
	UpdateAsset(ctx context.Context, in *UpdateAssetRequest, opts ...grpc.CallOption) (*UpdateAssetResponse, error)
	// DeleteAsset soft-deletes an asset from the registry.
	DeleteAsset(ctx context.Context, in *DeleteAssetRequest, opts ...grpc.CallOption) (*DeleteAssetResponse, error)
	// ListAssets retrieves a paginated list of assets with optional filtering.
	ListAssets(ctx context.Context, in *ListAssetsRequest, opts ...grpc.CallOption) (*ListAssetsResponse, error)
	// SearchAssets searches for assets by symbol, name, or other criteria.
	SearchAssets(ctx context.Context, in *SearchAssetsRequest, opts ...grpc.CallOption) (*SearchAssetsResponse, error)
	// CreateAssetDeployment registers a new on-chain deployment of an asset.
	CreateAssetDeployment(ctx context.Context, in *CreateAssetDeploymentRequest, opts ...grpc.CallOption) (*CreateAssetDeploymentResponse, error)
	// GetAssetDeployment retrieves a specific deployment by ID.
	GetAssetDeployment(ctx context.Context, in *GetAssetDeploymentRequest, opts ...grpc.CallOption) (*GetAssetDeploymentResponse, error)
	// ListAssetDeployments lists all deployments for a given asset.
	ListAssetDeployments(ctx context.Context, in *ListAssetDeploymentsRequest, opts ...grpc.CallOption) (*ListAssetDeploymentsResponse, error)
	// CreateAssetIdentifier adds an external identifier mapping for an asset.
	CreateAssetIdentifier(ctx context.Context, in *CreateAssetIdentifierRequest, opts ...grpc.CallOption) (*CreateAssetIdentifierResponse, error)
	// GetAssetIdentifier retrieves an identifier mapping.
	GetAssetIdentifier(ctx context.Context, in *GetAssetIdentifierRequest, opts ...grpc.CallOption) (*GetAssetIdentifierResponse, error)
	// ListAssetIdentifiers lists all identifier mappings for an asset.
	ListAssetIdentifiers(ctx context.Context, in *ListAssetIdentifiersRequest, opts ...grpc.CallOption) (*ListAssetIdentifiersResponse, error)
	// CreateAssetRelationship establishes a relationship between two assets.
	CreateAssetRelationship(ctx context.Context, in *CreateAssetRelationshipRequest, opts ...grpc.CallOption) (*CreateAssetRelationshipResponse, error)
	// ListAssetRelationships lists relationships for a given asset.
	ListAssetRelationships(ctx context.Context, in *ListAssetRelationshipsRequest, opts ...grpc.CallOption) (*ListAssetRelationshipsResponse, error)
	// CreateAssetGroup creates a new asset group.
	CreateAssetGroup(ctx context.Context, in *CreateAssetGroupRequest, opts ...grpc.CallOption) (*CreateAssetGroupResponse, error)
	// GetAssetGroup retrieves a specific asset group.
	GetAssetGroup(ctx context.Context, in *GetAssetGroupRequest, opts ...grpc.CallOption) (*GetAssetGroupResponse, error)
	// AddAssetToGroup adds an asset to an existing group.
	AddAssetToGroup(ctx context.Context, in *AddAssetToGroupRequest, opts ...grpc.CallOption) (*AddAssetToGroupResponse, error)
	// RemoveAssetFromGroup removes an asset from a group.
	RemoveAssetFromGroup(ctx context.Context, in *RemoveAssetFromGroupRequest, opts ...grpc.CallOption) (*RemoveAssetFromGroupResponse, error)
	// RaiseQualityFlag creates a quality flag for an asset.
	RaiseQualityFlag(ctx context.Context, in *RaiseQualityFlagRequest, opts ...grpc.CallOption) (*RaiseQualityFlagResponse, error)
	// ResolveQualityFlag marks a quality flag as resolved.
	ResolveQualityFlag(ctx context.Context, in *ResolveQualityFlagRequest, opts ...grpc.CallOption) (*ResolveQualityFlagResponse, error)
	// ListQualityFlags lists all quality flags for an asset.
	ListQualityFlags(ctx context.Context, in *ListQualityFlagsRequest, opts ...grpc.CallOption) (*ListQualityFlagsResponse, error)
	// CreateChain registers a new blockchain network.
	CreateChain(ctx context.Context, in *CreateChainRequest, opts ...grpc.CallOption) (*CreateChainResponse, error)
	// GetChain retrieves a specific chain by ID.
	GetChain(ctx context.Context, in *GetChainRequest, opts ...grpc.CallOption) (*GetChainResponse, error)
	// ListChains lists all registered blockchain networks.
	ListChains(ctx context.Context, in *ListChainsRequest, opts ...grpc.CallOption) (*ListChainsResponse, error)
	// CreateSymbol creates a new trading symbol/market.
	CreateSymbol(ctx context.Context, in *CreateSymbolRequest, opts ...grpc.CallOption) (*CreateSymbolResponse, error)
	// GetSymbol retrieves a specific symbol by ID.
	GetSymbol(ctx context.Context, in *GetSymbolRequest, opts ...grpc.CallOption) (*GetSymbolResponse, error)
	// UpdateSymbol updates an existing symbol's metadata.
	UpdateSymbol(ctx context.Context, in *UpdateSymbolRequest, opts ...grpc.CallOption) (*UpdateSymbolResponse, error)
	// DeleteSymbol soft-deletes a symbol from the registry.
	DeleteSymbol(ctx context.Context, in *DeleteSymbolRequest, opts ...grpc.CallOption) (*DeleteSymbolResponse, error)
	// ListSymbols retrieves a paginated list of symbols with optional filtering.
	ListSymbols(ctx context.Context, in *ListSymbolsRequest, opts ...grpc.CallOption) (*ListSymbolsResponse, error)
	// SearchSymbols searches for symbols by name or other criteria.
	SearchSymbols(ctx context.Context, in *SearchSymbolsRequest, opts ...grpc.CallOption) (*SearchSymbolsResponse, error)
	// CreateSymbolIdentifier adds an external identifier mapping for a symbol.
	CreateSymbolIdentifier(ctx context.Context, in *CreateSymbolIdentifierRequest, opts ...grpc.CallOption) (*CreateSymbolIdentifierResponse, error)
	// GetSymbolIdentifier retrieves a symbol identifier mapping.
	GetSymbolIdentifier(ctx context.Context, in *GetSymbolIdentifierRequest, opts ...grpc.CallOption) (*GetSymbolIdentifierResponse, error)
	// ListSymbolIdentifiers lists all identifier mappings for a symbol.
	ListSymbolIdentifiers(ctx context.Context, in *ListSymbolIdentifiersRequest, opts ...grpc.CallOption) (*ListSymbolIdentifiersResponse, error)
	// CreateVenue registers a new trading venue.
	CreateVenue(ctx context.Context, in *CreateVenueRequest, opts ...grpc.CallOption) (*CreateVenueResponse, error)
	// GetVenue retrieves a specific venue by ID.
	GetVenue(ctx context.Context, in *GetVenueRequest, opts ...grpc.CallOption) (*GetVenueResponse, error)
	// ListVenues lists all registered trading venues.
	ListVenues(ctx context.Context, in *ListVenuesRequest, opts ...grpc.CallOption) (*ListVenuesResponse, error)
	// CreateVenueAsset registers asset availability on a venue.
	CreateVenueAsset(ctx context.Context, in *CreateVenueAssetRequest, opts ...grpc.CallOption) (*CreateVenueAssetResponse, error)
	// GetVenueAsset retrieves venue asset availability information.
	GetVenueAsset(ctx context.Context, in *GetVenueAssetRequest, opts ...grpc.CallOption) (*GetVenueAssetResponse, error)
	// ListVenueAssets lists all assets available on a venue or all venues for an asset.
	ListVenueAssets(ctx context.Context, in *ListVenueAssetsRequest, opts ...grpc.CallOption) (*ListVenueAssetsResponse, error)
	// CreateVenueSymbol maps a venue's trading symbol to a canonical symbol.
	CreateVenueSymbol(ctx context.Context, in *CreateVenueSymbolRequest, opts ...grpc.CallOption) (*CreateVenueSymbolResponse, error)
	// GetVenueSymbol retrieves a venue symbol mapping.
	GetVenueSymbol(ctx context.Context, in *GetVenueSymbolRequest, opts ...grpc.CallOption) (*GetVenueSymbolResponse, error)
	// ListVenueSymbols lists all symbol mappings for a venue or symbol.
	ListVenueSymbols(ctx context.Context, in *ListVenueSymbolsRequest, opts ...grpc.CallOption) (*ListVenueSymbolsResponse, error)
}

type assetRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetRegistryClient(cc grpc.ClientConnInterface) AssetRegistryClient {
	return &assetRegistryClient{cc}
}

func (c *assetRegistryClient) CreateAsset(ctx context.Context, in *CreateAssetRequest, opts ...grpc.CallOption) (*CreateAssetResponse, error) {
	out := new(CreateAssetResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_CreateAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) GetAsset(ctx context.Context, in *GetAssetRequest, opts ...grpc.CallOption) (*GetAssetResponse, error) {
	out := new(GetAssetResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_GetAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) UpdateAsset(ctx context.Context, in *UpdateAssetRequest, opts ...grpc.CallOption) (*UpdateAssetResponse, error) {
	out := new(UpdateAssetResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_UpdateAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) DeleteAsset(ctx context.Context, in *DeleteAssetRequest, opts ...grpc.CallOption) (*DeleteAssetResponse, error) {
	out := new(DeleteAssetResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_DeleteAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) ListAssets(ctx context.Context, in *ListAssetsRequest, opts ...grpc.CallOption) (*ListAssetsResponse, error) {
	out := new(ListAssetsResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_ListAssets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) SearchAssets(ctx context.Context, in *SearchAssetsRequest, opts ...grpc.CallOption) (*SearchAssetsResponse, error) {
	out := new(SearchAssetsResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_SearchAssets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) CreateAssetDeployment(ctx context.Context, in *CreateAssetDeploymentRequest, opts ...grpc.CallOption) (*CreateAssetDeploymentResponse, error) {
	out := new(CreateAssetDeploymentResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_CreateAssetDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) GetAssetDeployment(ctx context.Context, in *GetAssetDeploymentRequest, opts ...grpc.CallOption) (*GetAssetDeploymentResponse, error) {
	out := new(GetAssetDeploymentResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_GetAssetDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) ListAssetDeployments(ctx context.Context, in *ListAssetDeploymentsRequest, opts ...grpc.CallOption) (*ListAssetDeploymentsResponse, error) {
	out := new(ListAssetDeploymentsResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_ListAssetDeployments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) CreateAssetIdentifier(ctx context.Context, in *CreateAssetIdentifierRequest, opts ...grpc.CallOption) (*CreateAssetIdentifierResponse, error) {
	out := new(CreateAssetIdentifierResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_CreateAssetIdentifier_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) GetAssetIdentifier(ctx context.Context, in *GetAssetIdentifierRequest, opts ...grpc.CallOption) (*GetAssetIdentifierResponse, error) {
	out := new(GetAssetIdentifierResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_GetAssetIdentifier_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) ListAssetIdentifiers(ctx context.Context, in *ListAssetIdentifiersRequest, opts ...grpc.CallOption) (*ListAssetIdentifiersResponse, error) {
	out := new(ListAssetIdentifiersResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_ListAssetIdentifiers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) CreateAssetRelationship(ctx context.Context, in *CreateAssetRelationshipRequest, opts ...grpc.CallOption) (*CreateAssetRelationshipResponse, error) {
	out := new(CreateAssetRelationshipResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_CreateAssetRelationship_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) ListAssetRelationships(ctx context.Context, in *ListAssetRelationshipsRequest, opts ...grpc.CallOption) (*ListAssetRelationshipsResponse, error) {
	out := new(ListAssetRelationshipsResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_ListAssetRelationships_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) CreateAssetGroup(ctx context.Context, in *CreateAssetGroupRequest, opts ...grpc.CallOption) (*CreateAssetGroupResponse, error) {
	out := new(CreateAssetGroupResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_CreateAssetGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) GetAssetGroup(ctx context.Context, in *GetAssetGroupRequest, opts ...grpc.CallOption) (*GetAssetGroupResponse, error) {
	out := new(GetAssetGroupResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_GetAssetGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) AddAssetToGroup(ctx context.Context, in *AddAssetToGroupRequest, opts ...grpc.CallOption) (*AddAssetToGroupResponse, error) {
	out := new(AddAssetToGroupResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_AddAssetToGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) RemoveAssetFromGroup(ctx context.Context, in *RemoveAssetFromGroupRequest, opts ...grpc.CallOption) (*RemoveAssetFromGroupResponse, error) {
	out := new(RemoveAssetFromGroupResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_RemoveAssetFromGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) RaiseQualityFlag(ctx context.Context, in *RaiseQualityFlagRequest, opts ...grpc.CallOption) (*RaiseQualityFlagResponse, error) {
	out := new(RaiseQualityFlagResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_RaiseQualityFlag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) ResolveQualityFlag(ctx context.Context, in *ResolveQualityFlagRequest, opts ...grpc.CallOption) (*ResolveQualityFlagResponse, error) {
	out := new(ResolveQualityFlagResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_ResolveQualityFlag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) ListQualityFlags(ctx context.Context, in *ListQualityFlagsRequest, opts ...grpc.CallOption) (*ListQualityFlagsResponse, error) {
	out := new(ListQualityFlagsResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_ListQualityFlags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) CreateChain(ctx context.Context, in *CreateChainRequest, opts ...grpc.CallOption) (*CreateChainResponse, error) {
	out := new(CreateChainResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_CreateChain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) GetChain(ctx context.Context, in *GetChainRequest, opts ...grpc.CallOption) (*GetChainResponse, error) {
	out := new(GetChainResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_GetChain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) ListChains(ctx context.Context, in *ListChainsRequest, opts ...grpc.CallOption) (*ListChainsResponse, error) {
	out := new(ListChainsResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_ListChains_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) CreateSymbol(ctx context.Context, in *CreateSymbolRequest, opts ...grpc.CallOption) (*CreateSymbolResponse, error) {
	out := new(CreateSymbolResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_CreateSymbol_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) GetSymbol(ctx context.Context, in *GetSymbolRequest, opts ...grpc.CallOption) (*GetSymbolResponse, error) {
	out := new(GetSymbolResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_GetSymbol_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) UpdateSymbol(ctx context.Context, in *UpdateSymbolRequest, opts ...grpc.CallOption) (*UpdateSymbolResponse, error) {
	out := new(UpdateSymbolResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_UpdateSymbol_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) DeleteSymbol(ctx context.Context, in *DeleteSymbolRequest, opts ...grpc.CallOption) (*DeleteSymbolResponse, error) {
	out := new(DeleteSymbolResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_DeleteSymbol_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) ListSymbols(ctx context.Context, in *ListSymbolsRequest, opts ...grpc.CallOption) (*ListSymbolsResponse, error) {
	out := new(ListSymbolsResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_ListSymbols_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) SearchSymbols(ctx context.Context, in *SearchSymbolsRequest, opts ...grpc.CallOption) (*SearchSymbolsResponse, error) {
	out := new(SearchSymbolsResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_SearchSymbols_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) CreateSymbolIdentifier(ctx context.Context, in *CreateSymbolIdentifierRequest, opts ...grpc.CallOption) (*CreateSymbolIdentifierResponse, error) {
	out := new(CreateSymbolIdentifierResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_CreateSymbolIdentifier_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) GetSymbolIdentifier(ctx context.Context, in *GetSymbolIdentifierRequest, opts ...grpc.CallOption) (*GetSymbolIdentifierResponse, error) {
	out := new(GetSymbolIdentifierResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_GetSymbolIdentifier_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) ListSymbolIdentifiers(ctx context.Context, in *ListSymbolIdentifiersRequest, opts ...grpc.CallOption) (*ListSymbolIdentifiersResponse, error) {
	out := new(ListSymbolIdentifiersResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_ListSymbolIdentifiers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) CreateVenue(ctx context.Context, in *CreateVenueRequest, opts ...grpc.CallOption) (*CreateVenueResponse, error) {
	out := new(CreateVenueResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_CreateVenue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) GetVenue(ctx context.Context, in *GetVenueRequest, opts ...grpc.CallOption) (*GetVenueResponse, error) {
	out := new(GetVenueResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_GetVenue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) ListVenues(ctx context.Context, in *ListVenuesRequest, opts ...grpc.CallOption) (*ListVenuesResponse, error) {
	out := new(ListVenuesResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_ListVenues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) CreateVenueAsset(ctx context.Context, in *CreateVenueAssetRequest, opts ...grpc.CallOption) (*CreateVenueAssetResponse, error) {
	out := new(CreateVenueAssetResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_CreateVenueAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) GetVenueAsset(ctx context.Context, in *GetVenueAssetRequest, opts ...grpc.CallOption) (*GetVenueAssetResponse, error) {
	out := new(GetVenueAssetResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_GetVenueAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) ListVenueAssets(ctx context.Context, in *ListVenueAssetsRequest, opts ...grpc.CallOption) (*ListVenueAssetsResponse, error) {
	out := new(ListVenueAssetsResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_ListVenueAssets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) CreateVenueSymbol(ctx context.Context, in *CreateVenueSymbolRequest, opts ...grpc.CallOption) (*CreateVenueSymbolResponse, error) {
	out := new(CreateVenueSymbolResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_CreateVenueSymbol_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) GetVenueSymbol(ctx context.Context, in *GetVenueSymbolRequest, opts ...grpc.CallOption) (*GetVenueSymbolResponse, error) {
	out := new(GetVenueSymbolResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_GetVenueSymbol_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetRegistryClient) ListVenueSymbols(ctx context.Context, in *ListVenueSymbolsRequest, opts ...grpc.CallOption) (*ListVenueSymbolsResponse, error) {
	out := new(ListVenueSymbolsResponse)
	err := c.cc.Invoke(ctx, AssetRegistry_ListVenueSymbols_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssetRegistryServer is the server API for AssetRegistry service.
// All implementations must embed UnimplementedAssetRegistryServer
// for forward compatibility
type AssetRegistryServer interface {
	// CreateAsset creates a new canonical asset in the registry.
	CreateAsset(context.Context, *CreateAssetRequest) (*CreateAssetResponse, error)
	// GetAsset retrieves a specific asset by ID.
	GetAsset(context.Context, *GetAssetRequest) (*GetAssetResponse, error)
	// UpdateAsset updates an existing asset's metadata.
	UpdateAsset(context.Context, *UpdateAssetRequest) (*UpdateAssetResponse, error)
	// DeleteAsset soft-deletes an asset from the registry.
	DeleteAsset(context.Context, *DeleteAssetRequest) (*DeleteAssetResponse, error)
	// ListAssets retrieves a paginated list of assets with optional filtering.
	ListAssets(context.Context, *ListAssetsRequest) (*ListAssetsResponse, error)
	// SearchAssets searches for assets by symbol, name, or other criteria.
	SearchAssets(context.Context, *SearchAssetsRequest) (*SearchAssetsResponse, error)
	// CreateAssetDeployment registers a new on-chain deployment of an asset.
	CreateAssetDeployment(context.Context, *CreateAssetDeploymentRequest) (*CreateAssetDeploymentResponse, error)
	// GetAssetDeployment retrieves a specific deployment by ID.
	GetAssetDeployment(context.Context, *GetAssetDeploymentRequest) (*GetAssetDeploymentResponse, error)
	// ListAssetDeployments lists all deployments for a given asset.
	ListAssetDeployments(context.Context, *ListAssetDeploymentsRequest) (*ListAssetDeploymentsResponse, error)
	// CreateAssetIdentifier adds an external identifier mapping for an asset.
	CreateAssetIdentifier(context.Context, *CreateAssetIdentifierRequest) (*CreateAssetIdentifierResponse, error)
	// GetAssetIdentifier retrieves an identifier mapping.
	GetAssetIdentifier(context.Context, *GetAssetIdentifierRequest) (*GetAssetIdentifierResponse, error)
	// ListAssetIdentifiers lists all identifier mappings for an asset.
	ListAssetIdentifiers(context.Context, *ListAssetIdentifiersRequest) (*ListAssetIdentifiersResponse, error)
	// CreateAssetRelationship establishes a relationship between two assets.
	CreateAssetRelationship(context.Context, *CreateAssetRelationshipRequest) (*CreateAssetRelationshipResponse, error)
	// ListAssetRelationships lists relationships for a given asset.
	ListAssetRelationships(context.Context, *ListAssetRelationshipsRequest) (*ListAssetRelationshipsResponse, error)
	// CreateAssetGroup creates a new asset group.
	CreateAssetGroup(context.Context, *CreateAssetGroupRequest) (*CreateAssetGroupResponse, error)
	// GetAssetGroup retrieves a specific asset group.
	GetAssetGroup(context.Context, *GetAssetGroupRequest) (*GetAssetGroupResponse, error)
	// AddAssetToGroup adds an asset to an existing group.
	AddAssetToGroup(context.Context, *AddAssetToGroupRequest) (*AddAssetToGroupResponse, error)
	// RemoveAssetFromGroup removes an asset from a group.
	RemoveAssetFromGroup(context.Context, *RemoveAssetFromGroupRequest) (*RemoveAssetFromGroupResponse, error)
	// RaiseQualityFlag creates a quality flag for an asset.
	RaiseQualityFlag(context.Context, *RaiseQualityFlagRequest) (*RaiseQualityFlagResponse, error)
	// ResolveQualityFlag marks a quality flag as resolved.
	ResolveQualityFlag(context.Context, *ResolveQualityFlagRequest) (*ResolveQualityFlagResponse, error)
	// ListQualityFlags lists all quality flags for an asset.
	ListQualityFlags(context.Context, *ListQualityFlagsRequest) (*ListQualityFlagsResponse, error)
	// CreateChain registers a new blockchain network.
	CreateChain(context.Context, *CreateChainRequest) (*CreateChainResponse, error)
	// GetChain retrieves a specific chain by ID.
	GetChain(context.Context, *GetChainRequest) (*GetChainResponse, error)
	// ListChains lists all registered blockchain networks.
	ListChains(context.Context, *ListChainsRequest) (*ListChainsResponse, error)
	// CreateSymbol creates a new trading symbol/market.
	CreateSymbol(context.Context, *CreateSymbolRequest) (*CreateSymbolResponse, error)
	// GetSymbol retrieves a specific symbol by ID.
	GetSymbol(context.Context, *GetSymbolRequest) (*GetSymbolResponse, error)
	// UpdateSymbol updates an existing symbol's metadata.
	UpdateSymbol(context.Context, *UpdateSymbolRequest) (*UpdateSymbolResponse, error)
	// DeleteSymbol soft-deletes a symbol from the registry.
	DeleteSymbol(context.Context, *DeleteSymbolRequest) (*DeleteSymbolResponse, error)
	// ListSymbols retrieves a paginated list of symbols with optional filtering.
	ListSymbols(context.Context, *ListSymbolsRequest) (*ListSymbolsResponse, error)
	// SearchSymbols searches for symbols by name or other criteria.
	SearchSymbols(context.Context, *SearchSymbolsRequest) (*SearchSymbolsResponse, error)
	// CreateSymbolIdentifier adds an external identifier mapping for a symbol.
	CreateSymbolIdentifier(context.Context, *CreateSymbolIdentifierRequest) (*CreateSymbolIdentifierResponse, error)
	// GetSymbolIdentifier retrieves a symbol identifier mapping.
	GetSymbolIdentifier(context.Context, *GetSymbolIdentifierRequest) (*GetSymbolIdentifierResponse, error)
	// ListSymbolIdentifiers lists all identifier mappings for a symbol.
	ListSymbolIdentifiers(context.Context, *ListSymbolIdentifiersRequest) (*ListSymbolIdentifiersResponse, error)
	// CreateVenue registers a new trading venue.
	CreateVenue(context.Context, *CreateVenueRequest) (*CreateVenueResponse, error)
	// GetVenue retrieves a specific venue by ID.
	GetVenue(context.Context, *GetVenueRequest) (*GetVenueResponse, error)
	// ListVenues lists all registered trading venues.
	ListVenues(context.Context, *ListVenuesRequest) (*ListVenuesResponse, error)
	// CreateVenueAsset registers asset availability on a venue.
	CreateVenueAsset(context.Context, *CreateVenueAssetRequest) (*CreateVenueAssetResponse, error)
	// GetVenueAsset retrieves venue asset availability information.
	GetVenueAsset(context.Context, *GetVenueAssetRequest) (*GetVenueAssetResponse, error)
	// ListVenueAssets lists all assets available on a venue or all venues for an asset.
	ListVenueAssets(context.Context, *ListVenueAssetsRequest) (*ListVenueAssetsResponse, error)
	// CreateVenueSymbol maps a venue's trading symbol to a canonical symbol.
	CreateVenueSymbol(context.Context, *CreateVenueSymbolRequest) (*CreateVenueSymbolResponse, error)
	// GetVenueSymbol retrieves a venue symbol mapping.
	GetVenueSymbol(context.Context, *GetVenueSymbolRequest) (*GetVenueSymbolResponse, error)
	// ListVenueSymbols lists all symbol mappings for a venue or symbol.
	ListVenueSymbols(context.Context, *ListVenueSymbolsRequest) (*ListVenueSymbolsResponse, error)
	mustEmbedUnimplementedAssetRegistryServer()
}

// UnimplementedAssetRegistryServer must be embedded to have forward compatible implementations.
type UnimplementedAssetRegistryServer struct {
}

func (UnimplementedAssetRegistryServer) CreateAsset(context.Context, *CreateAssetRequest) (*CreateAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAsset not implemented")
}
func (UnimplementedAssetRegistryServer) GetAsset(context.Context, *GetAssetRequest) (*GetAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAsset not implemented")
}
func (UnimplementedAssetRegistryServer) UpdateAsset(context.Context, *UpdateAssetRequest) (*UpdateAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAsset not implemented")
}
func (UnimplementedAssetRegistryServer) DeleteAsset(context.Context, *DeleteAssetRequest) (*DeleteAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAsset not implemented")
}
func (UnimplementedAssetRegistryServer) ListAssets(context.Context, *ListAssetsRequest) (*ListAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssets not implemented")
}
func (UnimplementedAssetRegistryServer) SearchAssets(context.Context, *SearchAssetsRequest) (*SearchAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAssets not implemented")
}
func (UnimplementedAssetRegistryServer) CreateAssetDeployment(context.Context, *CreateAssetDeploymentRequest) (*CreateAssetDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAssetDeployment not implemented")
}
func (UnimplementedAssetRegistryServer) GetAssetDeployment(context.Context, *GetAssetDeploymentRequest) (*GetAssetDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetDeployment not implemented")
}
func (UnimplementedAssetRegistryServer) ListAssetDeployments(context.Context, *ListAssetDeploymentsRequest) (*ListAssetDeploymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssetDeployments not implemented")
}
func (UnimplementedAssetRegistryServer) CreateAssetIdentifier(context.Context, *CreateAssetIdentifierRequest) (*CreateAssetIdentifierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAssetIdentifier not implemented")
}
func (UnimplementedAssetRegistryServer) GetAssetIdentifier(context.Context, *GetAssetIdentifierRequest) (*GetAssetIdentifierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetIdentifier not implemented")
}
func (UnimplementedAssetRegistryServer) ListAssetIdentifiers(context.Context, *ListAssetIdentifiersRequest) (*ListAssetIdentifiersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssetIdentifiers not implemented")
}
func (UnimplementedAssetRegistryServer) CreateAssetRelationship(context.Context, *CreateAssetRelationshipRequest) (*CreateAssetRelationshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAssetRelationship not implemented")
}
func (UnimplementedAssetRegistryServer) ListAssetRelationships(context.Context, *ListAssetRelationshipsRequest) (*ListAssetRelationshipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssetRelationships not implemented")
}
func (UnimplementedAssetRegistryServer) CreateAssetGroup(context.Context, *CreateAssetGroupRequest) (*CreateAssetGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAssetGroup not implemented")
}
func (UnimplementedAssetRegistryServer) GetAssetGroup(context.Context, *GetAssetGroupRequest) (*GetAssetGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetGroup not implemented")
}
func (UnimplementedAssetRegistryServer) AddAssetToGroup(context.Context, *AddAssetToGroupRequest) (*AddAssetToGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAssetToGroup not implemented")
}
func (UnimplementedAssetRegistryServer) RemoveAssetFromGroup(context.Context, *RemoveAssetFromGroupRequest) (*RemoveAssetFromGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAssetFromGroup not implemented")
}
func (UnimplementedAssetRegistryServer) RaiseQualityFlag(context.Context, *RaiseQualityFlagRequest) (*RaiseQualityFlagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaiseQualityFlag not implemented")
}
func (UnimplementedAssetRegistryServer) ResolveQualityFlag(context.Context, *ResolveQualityFlagRequest) (*ResolveQualityFlagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveQualityFlag not implemented")
}
func (UnimplementedAssetRegistryServer) ListQualityFlags(context.Context, *ListQualityFlagsRequest) (*ListQualityFlagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQualityFlags not implemented")
}
func (UnimplementedAssetRegistryServer) CreateChain(context.Context, *CreateChainRequest) (*CreateChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChain not implemented")
}
func (UnimplementedAssetRegistryServer) GetChain(context.Context, *GetChainRequest) (*GetChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChain not implemented")
}
func (UnimplementedAssetRegistryServer) ListChains(context.Context, *ListChainsRequest) (*ListChainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChains not implemented")
}
func (UnimplementedAssetRegistryServer) CreateSymbol(context.Context, *CreateSymbolRequest) (*CreateSymbolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSymbol not implemented")
}
func (UnimplementedAssetRegistryServer) GetSymbol(context.Context, *GetSymbolRequest) (*GetSymbolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSymbol not implemented")
}
func (UnimplementedAssetRegistryServer) UpdateSymbol(context.Context, *UpdateSymbolRequest) (*UpdateSymbolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSymbol not implemented")
}
func (UnimplementedAssetRegistryServer) DeleteSymbol(context.Context, *DeleteSymbolRequest) (*DeleteSymbolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSymbol not implemented")
}
func (UnimplementedAssetRegistryServer) ListSymbols(context.Context, *ListSymbolsRequest) (*ListSymbolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSymbols not implemented")
}
func (UnimplementedAssetRegistryServer) SearchSymbols(context.Context, *SearchSymbolsRequest) (*SearchSymbolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSymbols not implemented")
}
func (UnimplementedAssetRegistryServer) CreateSymbolIdentifier(context.Context, *CreateSymbolIdentifierRequest) (*CreateSymbolIdentifierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSymbolIdentifier not implemented")
}
func (UnimplementedAssetRegistryServer) GetSymbolIdentifier(context.Context, *GetSymbolIdentifierRequest) (*GetSymbolIdentifierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSymbolIdentifier not implemented")
}
func (UnimplementedAssetRegistryServer) ListSymbolIdentifiers(context.Context, *ListSymbolIdentifiersRequest) (*ListSymbolIdentifiersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSymbolIdentifiers not implemented")
}
func (UnimplementedAssetRegistryServer) CreateVenue(context.Context, *CreateVenueRequest) (*CreateVenueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVenue not implemented")
}
func (UnimplementedAssetRegistryServer) GetVenue(context.Context, *GetVenueRequest) (*GetVenueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVenue not implemented")
}
func (UnimplementedAssetRegistryServer) ListVenues(context.Context, *ListVenuesRequest) (*ListVenuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVenues not implemented")
}
func (UnimplementedAssetRegistryServer) CreateVenueAsset(context.Context, *CreateVenueAssetRequest) (*CreateVenueAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVenueAsset not implemented")
}
func (UnimplementedAssetRegistryServer) GetVenueAsset(context.Context, *GetVenueAssetRequest) (*GetVenueAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVenueAsset not implemented")
}
func (UnimplementedAssetRegistryServer) ListVenueAssets(context.Context, *ListVenueAssetsRequest) (*ListVenueAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVenueAssets not implemented")
}
func (UnimplementedAssetRegistryServer) CreateVenueSymbol(context.Context, *CreateVenueSymbolRequest) (*CreateVenueSymbolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVenueSymbol not implemented")
}
func (UnimplementedAssetRegistryServer) GetVenueSymbol(context.Context, *GetVenueSymbolRequest) (*GetVenueSymbolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVenueSymbol not implemented")
}
func (UnimplementedAssetRegistryServer) ListVenueSymbols(context.Context, *ListVenueSymbolsRequest) (*ListVenueSymbolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVenueSymbols not implemented")
}
func (UnimplementedAssetRegistryServer) mustEmbedUnimplementedAssetRegistryServer() {}

// UnsafeAssetRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssetRegistryServer will
// result in compilation errors.
type UnsafeAssetRegistryServer interface {
	mustEmbedUnimplementedAssetRegistryServer()
}

func RegisterAssetRegistryServer(s grpc.ServiceRegistrar, srv AssetRegistryServer) {
	s.RegisterService(&AssetRegistry_ServiceDesc, srv)
}

func _AssetRegistry_CreateAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).CreateAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_CreateAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).CreateAsset(ctx, req.(*CreateAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_GetAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).GetAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_GetAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).GetAsset(ctx, req.(*GetAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_UpdateAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).UpdateAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_UpdateAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).UpdateAsset(ctx, req.(*UpdateAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_DeleteAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).DeleteAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_DeleteAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).DeleteAsset(ctx, req.(*DeleteAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_ListAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).ListAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_ListAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).ListAssets(ctx, req.(*ListAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_SearchAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).SearchAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_SearchAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).SearchAssets(ctx, req.(*SearchAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_CreateAssetDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssetDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).CreateAssetDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_CreateAssetDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).CreateAssetDeployment(ctx, req.(*CreateAssetDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_GetAssetDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).GetAssetDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_GetAssetDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).GetAssetDeployment(ctx, req.(*GetAssetDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_ListAssetDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssetDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).ListAssetDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_ListAssetDeployments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).ListAssetDeployments(ctx, req.(*ListAssetDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_CreateAssetIdentifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssetIdentifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).CreateAssetIdentifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_CreateAssetIdentifier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).CreateAssetIdentifier(ctx, req.(*CreateAssetIdentifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_GetAssetIdentifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetIdentifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).GetAssetIdentifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_GetAssetIdentifier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).GetAssetIdentifier(ctx, req.(*GetAssetIdentifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_ListAssetIdentifiers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssetIdentifiersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).ListAssetIdentifiers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_ListAssetIdentifiers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).ListAssetIdentifiers(ctx, req.(*ListAssetIdentifiersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_CreateAssetRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssetRelationshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).CreateAssetRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_CreateAssetRelationship_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).CreateAssetRelationship(ctx, req.(*CreateAssetRelationshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_ListAssetRelationships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssetRelationshipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).ListAssetRelationships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_ListAssetRelationships_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).ListAssetRelationships(ctx, req.(*ListAssetRelationshipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_CreateAssetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).CreateAssetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_CreateAssetGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).CreateAssetGroup(ctx, req.(*CreateAssetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_GetAssetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).GetAssetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_GetAssetGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).GetAssetGroup(ctx, req.(*GetAssetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_AddAssetToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAssetToGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).AddAssetToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_AddAssetToGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).AddAssetToGroup(ctx, req.(*AddAssetToGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_RemoveAssetFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAssetFromGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).RemoveAssetFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_RemoveAssetFromGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).RemoveAssetFromGroup(ctx, req.(*RemoveAssetFromGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_RaiseQualityFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaiseQualityFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).RaiseQualityFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_RaiseQualityFlag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).RaiseQualityFlag(ctx, req.(*RaiseQualityFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_ResolveQualityFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveQualityFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).ResolveQualityFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_ResolveQualityFlag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).ResolveQualityFlag(ctx, req.(*ResolveQualityFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_ListQualityFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQualityFlagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).ListQualityFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_ListQualityFlags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).ListQualityFlags(ctx, req.(*ListQualityFlagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_CreateChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).CreateChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_CreateChain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).CreateChain(ctx, req.(*CreateChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_GetChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).GetChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_GetChain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).GetChain(ctx, req.(*GetChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_ListChains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).ListChains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_ListChains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).ListChains(ctx, req.(*ListChainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_CreateSymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSymbolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).CreateSymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_CreateSymbol_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).CreateSymbol(ctx, req.(*CreateSymbolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_GetSymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSymbolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).GetSymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_GetSymbol_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).GetSymbol(ctx, req.(*GetSymbolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_UpdateSymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSymbolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).UpdateSymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_UpdateSymbol_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).UpdateSymbol(ctx, req.(*UpdateSymbolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_DeleteSymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSymbolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).DeleteSymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_DeleteSymbol_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).DeleteSymbol(ctx, req.(*DeleteSymbolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_ListSymbols_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSymbolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).ListSymbols(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_ListSymbols_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).ListSymbols(ctx, req.(*ListSymbolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_SearchSymbols_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSymbolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).SearchSymbols(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_SearchSymbols_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).SearchSymbols(ctx, req.(*SearchSymbolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_CreateSymbolIdentifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSymbolIdentifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).CreateSymbolIdentifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_CreateSymbolIdentifier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).CreateSymbolIdentifier(ctx, req.(*CreateSymbolIdentifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_GetSymbolIdentifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSymbolIdentifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).GetSymbolIdentifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_GetSymbolIdentifier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).GetSymbolIdentifier(ctx, req.(*GetSymbolIdentifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_ListSymbolIdentifiers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSymbolIdentifiersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).ListSymbolIdentifiers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_ListSymbolIdentifiers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).ListSymbolIdentifiers(ctx, req.(*ListSymbolIdentifiersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_CreateVenue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVenueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).CreateVenue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_CreateVenue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).CreateVenue(ctx, req.(*CreateVenueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_GetVenue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVenueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).GetVenue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_GetVenue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).GetVenue(ctx, req.(*GetVenueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_ListVenues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVenuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).ListVenues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_ListVenues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).ListVenues(ctx, req.(*ListVenuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_CreateVenueAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVenueAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).CreateVenueAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_CreateVenueAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).CreateVenueAsset(ctx, req.(*CreateVenueAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_GetVenueAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVenueAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).GetVenueAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_GetVenueAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).GetVenueAsset(ctx, req.(*GetVenueAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_ListVenueAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVenueAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).ListVenueAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_ListVenueAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).ListVenueAssets(ctx, req.(*ListVenueAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_CreateVenueSymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVenueSymbolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).CreateVenueSymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_CreateVenueSymbol_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).CreateVenueSymbol(ctx, req.(*CreateVenueSymbolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_GetVenueSymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVenueSymbolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).GetVenueSymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_GetVenueSymbol_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).GetVenueSymbol(ctx, req.(*GetVenueSymbolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetRegistry_ListVenueSymbols_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVenueSymbolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).ListVenueSymbols(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetRegistry_ListVenueSymbols_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).ListVenueSymbols(ctx, req.(*ListVenueSymbolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AssetRegistry_ServiceDesc is the grpc.ServiceDesc for AssetRegistry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssetRegistry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cqc.services.v1.AssetRegistry",
	HandlerType: (*AssetRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAsset",
			Handler:    _AssetRegistry_CreateAsset_Handler,
		},
		{
			MethodName: "GetAsset",
			Handler:    _AssetRegistry_GetAsset_Handler,
		},
		{
			MethodName: "UpdateAsset",
			Handler:    _AssetRegistry_UpdateAsset_Handler,
		},
		{
			MethodName: "DeleteAsset",
			Handler:    _AssetRegistry_DeleteAsset_Handler,
		},
		{
			MethodName: "ListAssets",
			Handler:    _AssetRegistry_ListAssets_Handler,
		},
		{
			MethodName: "SearchAssets",
			Handler:    _AssetRegistry_SearchAssets_Handler,
		},
		{
			MethodName: "CreateAssetDeployment",
			Handler:    _AssetRegistry_CreateAssetDeployment_Handler,
		},
		{
			MethodName: "GetAssetDeployment",
			Handler:    _AssetRegistry_GetAssetDeployment_Handler,
		},
		{
			MethodName: "ListAssetDeployments",
			Handler:    _AssetRegistry_ListAssetDeployments_Handler,
		},
		{
			MethodName: "CreateAssetIdentifier",
			Handler:    _AssetRegistry_CreateAssetIdentifier_Handler,
		},
		{
			MethodName: "GetAssetIdentifier",
			Handler:    _AssetRegistry_GetAssetIdentifier_Handler,
		},
		{
			MethodName: "ListAssetIdentifiers",
			Handler:    _AssetRegistry_ListAssetIdentifiers_Handler,
		},
		{
			MethodName: "CreateAssetRelationship",
			Handler:    _AssetRegistry_CreateAssetRelationship_Handler,
		},
		{
			MethodName: "ListAssetRelationships",
			Handler:    _AssetRegistry_ListAssetRelationships_Handler,
		},
		{
			MethodName: "CreateAssetGroup",
			Handler:    _AssetRegistry_CreateAssetGroup_Handler,
		},
		{
			MethodName: "GetAssetGroup",
			Handler:    _AssetRegistry_GetAssetGroup_Handler,
		},
		{
			MethodName: "AddAssetToGroup",
			Handler:    _AssetRegistry_AddAssetToGroup_Handler,
		},
		{
			MethodName: "RemoveAssetFromGroup",
			Handler:    _AssetRegistry_RemoveAssetFromGroup_Handler,
		},
		{
			MethodName: "RaiseQualityFlag",
			Handler:    _AssetRegistry_RaiseQualityFlag_Handler,
		},
		{
			MethodName: "ResolveQualityFlag",
			Handler:    _AssetRegistry_ResolveQualityFlag_Handler,
		},
		{
			MethodName: "ListQualityFlags",
			Handler:    _AssetRegistry_ListQualityFlags_Handler,
		},
		{
			MethodName: "CreateChain",
			Handler:    _AssetRegistry_CreateChain_Handler,
		},
		{
			MethodName: "GetChain",
			Handler:    _AssetRegistry_GetChain_Handler,
		},
		{
			MethodName: "ListChains",
			Handler:    _AssetRegistry_ListChains_Handler,
		},
		{
			MethodName: "CreateSymbol",
			Handler:    _AssetRegistry_CreateSymbol_Handler,
		},
		{
			MethodName: "GetSymbol",
			Handler:    _AssetRegistry_GetSymbol_Handler,
		},
		{
			MethodName: "UpdateSymbol",
			Handler:    _AssetRegistry_UpdateSymbol_Handler,
		},
		{
			MethodName: "DeleteSymbol",
			Handler:    _AssetRegistry_DeleteSymbol_Handler,
		},
		{
			MethodName: "ListSymbols",
			Handler:    _AssetRegistry_ListSymbols_Handler,
		},
		{
			MethodName: "SearchSymbols",
			Handler:    _AssetRegistry_SearchSymbols_Handler,
		},
		{
			MethodName: "CreateSymbolIdentifier",
			Handler:    _AssetRegistry_CreateSymbolIdentifier_Handler,
		},
		{
			MethodName: "GetSymbolIdentifier",
			Handler:    _AssetRegistry_GetSymbolIdentifier_Handler,
		},
		{
			MethodName: "ListSymbolIdentifiers",
			Handler:    _AssetRegistry_ListSymbolIdentifiers_Handler,
		},
		{
			MethodName: "CreateVenue",
			Handler:    _AssetRegistry_CreateVenue_Handler,
		},
		{
			MethodName: "GetVenue",
			Handler:    _AssetRegistry_GetVenue_Handler,
		},
		{
			MethodName: "ListVenues",
			Handler:    _AssetRegistry_ListVenues_Handler,
		},
		{
			MethodName: "CreateVenueAsset",
			Handler:    _AssetRegistry_CreateVenueAsset_Handler,
		},
		{
			MethodName: "GetVenueAsset",
			Handler:    _AssetRegistry_GetVenueAsset_Handler,
		},
		{
			MethodName: "ListVenueAssets",
			Handler:    _AssetRegistry_ListVenueAssets_Handler,
		},
		{
			MethodName: "CreateVenueSymbol",
			Handler:    _AssetRegistry_CreateVenueSymbol_Handler,
		},
		{
			MethodName: "GetVenueSymbol",
			Handler:    _AssetRegistry_GetVenueSymbol_Handler,
		},
		{
			MethodName: "ListVenueSymbols",
			Handler:    _AssetRegistry_ListVenueSymbols_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/services/v1/asset_registry.proto",
}

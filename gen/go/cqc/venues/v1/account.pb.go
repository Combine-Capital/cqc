// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v3.12.4
// source: proto/venues/v1/account.proto

package venuesv1

import (
	_struct "github.com/golang/protobuf/ptypes/struct"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AccountStatus represents the current state of a venue account.
type AccountStatus int32

const (
	AccountStatus_ACCOUNT_STATUS_UNSPECIFIED AccountStatus = 0
	AccountStatus_ACCOUNT_STATUS_ACTIVE      AccountStatus = 1 // Account is active and operational
	AccountStatus_ACCOUNT_STATUS_INACTIVE    AccountStatus = 2 // Account exists but not in use
	AccountStatus_ACCOUNT_STATUS_SUSPENDED   AccountStatus = 3 // Account suspended by venue or user
	AccountStatus_ACCOUNT_STATUS_RESTRICTED  AccountStatus = 4 // Account has trading restrictions
	AccountStatus_ACCOUNT_STATUS_PENDING_KYC AccountStatus = 5 // Awaiting KYC verification
	AccountStatus_ACCOUNT_STATUS_CLOSED      AccountStatus = 6 // Account has been closed
)

// Enum value maps for AccountStatus.
var (
	AccountStatus_name = map[int32]string{
		0: "ACCOUNT_STATUS_UNSPECIFIED",
		1: "ACCOUNT_STATUS_ACTIVE",
		2: "ACCOUNT_STATUS_INACTIVE",
		3: "ACCOUNT_STATUS_SUSPENDED",
		4: "ACCOUNT_STATUS_RESTRICTED",
		5: "ACCOUNT_STATUS_PENDING_KYC",
		6: "ACCOUNT_STATUS_CLOSED",
	}
	AccountStatus_value = map[string]int32{
		"ACCOUNT_STATUS_UNSPECIFIED": 0,
		"ACCOUNT_STATUS_ACTIVE":      1,
		"ACCOUNT_STATUS_INACTIVE":    2,
		"ACCOUNT_STATUS_SUSPENDED":   3,
		"ACCOUNT_STATUS_RESTRICTED":  4,
		"ACCOUNT_STATUS_PENDING_KYC": 5,
		"ACCOUNT_STATUS_CLOSED":      6,
	}
)

func (x AccountStatus) Enum() *AccountStatus {
	p := new(AccountStatus)
	*p = x
	return p
}

func (x AccountStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_venues_v1_account_proto_enumTypes[0].Descriptor()
}

func (AccountStatus) Type() protoreflect.EnumType {
	return &file_proto_venues_v1_account_proto_enumTypes[0]
}

func (x AccountStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountStatus.Descriptor instead.
func (AccountStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_venues_v1_account_proto_rawDescGZIP(), []int{0}
}

// AccountType represents the category of venue account.
type AccountType int32

const (
	AccountType_ACCOUNT_TYPE_UNSPECIFIED AccountType = 0
	AccountType_ACCOUNT_TYPE_SPOT        AccountType = 1 // Spot trading account
	AccountType_ACCOUNT_TYPE_MARGIN      AccountType = 2 // Margin trading account
	AccountType_ACCOUNT_TYPE_FUTURES     AccountType = 3 // Futures trading account
	AccountType_ACCOUNT_TYPE_OPTIONS     AccountType = 4 // Options trading account
	AccountType_ACCOUNT_TYPE_LENDING     AccountType = 5 // Lending/borrowing account
	AccountType_ACCOUNT_TYPE_STAKING     AccountType = 6 // Staking account
	AccountType_ACCOUNT_TYPE_WALLET      AccountType = 7 // On-chain wallet (for DEX)
	AccountType_ACCOUNT_TYPE_SUBACCOUNT  AccountType = 8 // Sub-account under master account
)

// Enum value maps for AccountType.
var (
	AccountType_name = map[int32]string{
		0: "ACCOUNT_TYPE_UNSPECIFIED",
		1: "ACCOUNT_TYPE_SPOT",
		2: "ACCOUNT_TYPE_MARGIN",
		3: "ACCOUNT_TYPE_FUTURES",
		4: "ACCOUNT_TYPE_OPTIONS",
		5: "ACCOUNT_TYPE_LENDING",
		6: "ACCOUNT_TYPE_STAKING",
		7: "ACCOUNT_TYPE_WALLET",
		8: "ACCOUNT_TYPE_SUBACCOUNT",
	}
	AccountType_value = map[string]int32{
		"ACCOUNT_TYPE_UNSPECIFIED": 0,
		"ACCOUNT_TYPE_SPOT":        1,
		"ACCOUNT_TYPE_MARGIN":      2,
		"ACCOUNT_TYPE_FUTURES":     3,
		"ACCOUNT_TYPE_OPTIONS":     4,
		"ACCOUNT_TYPE_LENDING":     5,
		"ACCOUNT_TYPE_STAKING":     6,
		"ACCOUNT_TYPE_WALLET":      7,
		"ACCOUNT_TYPE_SUBACCOUNT":  8,
	}
)

func (x AccountType) Enum() *AccountType {
	p := new(AccountType)
	*p = x
	return p
}

func (x AccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_venues_v1_account_proto_enumTypes[1].Descriptor()
}

func (AccountType) Type() protoreflect.EnumType {
	return &file_proto_venues_v1_account_proto_enumTypes[1]
}

func (x AccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountType.Descriptor instead.
func (AccountType) EnumDescriptor() ([]byte, []int) {
	return file_proto_venues_v1_account_proto_rawDescGZIP(), []int{1}
}

// VenueAccount represents an account or connection to a trading venue.
// Contains authentication details and account-level information.
type VenueAccount struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique venue account identifier.
	AccountId *string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3,oneof" json:"account_id,omitempty"`
	// Venue identifier (e.g., "binance", "coinbase", "uniswap-v3-eth").
	VenueId *string `protobuf:"bytes,2,opt,name=venue_id,json=venueId,proto3,oneof" json:"venue_id,omitempty"`
	// Human-readable account name or label.
	Name *string `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// Account type/category.
	AccountType *AccountType `protobuf:"varint,4,opt,name=account_type,json=accountType,proto3,enum=cqc.venues.v1.AccountType,oneof" json:"account_type,omitempty"`
	// Current account status.
	Status *AccountStatus `protobuf:"varint,5,opt,name=status,proto3,enum=cqc.venues.v1.AccountStatus,oneof" json:"status,omitempty"`
	// Portfolio identifier that owns this account.
	PortfolioId *string `protobuf:"bytes,6,opt,name=portfolio_id,json=portfolioId,proto3,oneof" json:"portfolio_id,omitempty"`
	// Owner/user identifier.
	OwnerId *string `protobuf:"bytes,7,opt,name=owner_id,json=ownerId,proto3,oneof" json:"owner_id,omitempty"`
	// Venue-specific account identifier (exchange account ID, sub-account ID).
	VenueAccountId *string `protobuf:"bytes,8,opt,name=venue_account_id,json=venueAccountId,proto3,oneof" json:"venue_account_id,omitempty"`
	// API key identifier (not the secret key itself).
	// Actual secrets should be stored securely outside of proto messages.
	ApiKeyId *string `protobuf:"bytes,9,opt,name=api_key_id,json=apiKeyId,proto3,oneof" json:"api_key_id,omitempty"`
	// Whether API credentials are configured and valid.
	HasCredentials *bool `protobuf:"varint,10,opt,name=has_credentials,json=hasCredentials,proto3,oneof" json:"has_credentials,omitempty"`
	// Timestamp when credentials were last verified.
	CredentialsVerifiedAt *timestamp.Timestamp `protobuf:"bytes,11,opt,name=credentials_verified_at,json=credentialsVerifiedAt,proto3,oneof" json:"credentials_verified_at,omitempty"`
	// Trading permissions enabled for this account.
	Permissions []string `protobuf:"bytes,12,rep,name=permissions,proto3" json:"permissions,omitempty"`
	// Whether spot trading is enabled.
	SpotEnabled *bool `protobuf:"varint,13,opt,name=spot_enabled,json=spotEnabled,proto3,oneof" json:"spot_enabled,omitempty"`
	// Whether margin trading is enabled.
	MarginEnabled *bool `protobuf:"varint,14,opt,name=margin_enabled,json=marginEnabled,proto3,oneof" json:"margin_enabled,omitempty"`
	// Whether futures trading is enabled.
	FuturesEnabled *bool `protobuf:"varint,15,opt,name=futures_enabled,json=futuresEnabled,proto3,oneof" json:"futures_enabled,omitempty"`
	// Whether withdrawals are enabled.
	WithdrawalsEnabled *bool `protobuf:"varint,16,opt,name=withdrawals_enabled,json=withdrawalsEnabled,proto3,oneof" json:"withdrawals_enabled,omitempty"`
	// Maximum leverage allowed (1.0 for no leverage).
	MaxLeverage *float64 `protobuf:"fixed64,17,opt,name=max_leverage,json=maxLeverage,proto3,oneof" json:"max_leverage,omitempty"`
	// Maker fee rate (as decimal, e.g., 0.001 for 0.1%).
	MakerFeeRate *float64 `protobuf:"fixed64,18,opt,name=maker_fee_rate,json=makerFeeRate,proto3,oneof" json:"maker_fee_rate,omitempty"`
	// Taker fee rate (as decimal).
	TakerFeeRate *float64 `protobuf:"fixed64,19,opt,name=taker_fee_rate,json=takerFeeRate,proto3,oneof" json:"taker_fee_rate,omitempty"`
	// VIP tier or fee tier on the venue.
	FeeTier *string `protobuf:"bytes,20,opt,name=fee_tier,json=feeTier,proto3,oneof" json:"fee_tier,omitempty"`
	// Timestamp when account was created.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,21,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	// Timestamp of last account update.
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,22,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	// Timestamp of last successful connection/ping.
	LastConnectedAt *timestamp.Timestamp `protobuf:"bytes,23,opt,name=last_connected_at,json=lastConnectedAt,proto3,oneof" json:"last_connected_at,omitempty"`
	// Whether this account is actively being used for trading.
	IsActive *bool `protobuf:"varint,24,opt,name=is_active,json=isActive,proto3,oneof" json:"is_active,omitempty"`
	// Notes or description for this account.
	Notes *string `protobuf:"bytes,25,opt,name=notes,proto3,oneof" json:"notes,omitempty"`
	// Blockchain address (for DEX/on-chain venues).
	WalletAddress *string `protobuf:"bytes,26,opt,name=wallet_address,json=walletAddress,proto3,oneof" json:"wallet_address,omitempty"`
	// Chain identifier for wallet (for DEX accounts).
	ChainId *string `protobuf:"bytes,27,opt,name=chain_id,json=chainId,proto3,oneof" json:"chain_id,omitempty"`
	// Rate limit constraints (requests per second, etc).
	RateLimits *_struct.Struct `protobuf:"bytes,28,opt,name=rate_limits,json=rateLimits,proto3,oneof" json:"rate_limits,omitempty"`
	// Additional venue-specific metadata.
	Metadata *_struct.Struct `protobuf:"bytes,29,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	// Whether account is in sandbox/testnet mode.
	IsSandbox     *bool `protobuf:"varint,30,opt,name=is_sandbox,json=isSandbox,proto3,oneof" json:"is_sandbox,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VenueAccount) Reset() {
	*x = VenueAccount{}
	mi := &file_proto_venues_v1_account_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VenueAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VenueAccount) ProtoMessage() {}

func (x *VenueAccount) ProtoReflect() protoreflect.Message {
	mi := &file_proto_venues_v1_account_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VenueAccount.ProtoReflect.Descriptor instead.
func (*VenueAccount) Descriptor() ([]byte, []int) {
	return file_proto_venues_v1_account_proto_rawDescGZIP(), []int{0}
}

func (x *VenueAccount) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *VenueAccount) GetVenueId() string {
	if x != nil && x.VenueId != nil {
		return *x.VenueId
	}
	return ""
}

func (x *VenueAccount) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *VenueAccount) GetAccountType() AccountType {
	if x != nil && x.AccountType != nil {
		return *x.AccountType
	}
	return AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *VenueAccount) GetStatus() AccountStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return AccountStatus_ACCOUNT_STATUS_UNSPECIFIED
}

func (x *VenueAccount) GetPortfolioId() string {
	if x != nil && x.PortfolioId != nil {
		return *x.PortfolioId
	}
	return ""
}

func (x *VenueAccount) GetOwnerId() string {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return ""
}

func (x *VenueAccount) GetVenueAccountId() string {
	if x != nil && x.VenueAccountId != nil {
		return *x.VenueAccountId
	}
	return ""
}

func (x *VenueAccount) GetApiKeyId() string {
	if x != nil && x.ApiKeyId != nil {
		return *x.ApiKeyId
	}
	return ""
}

func (x *VenueAccount) GetHasCredentials() bool {
	if x != nil && x.HasCredentials != nil {
		return *x.HasCredentials
	}
	return false
}

func (x *VenueAccount) GetCredentialsVerifiedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CredentialsVerifiedAt
	}
	return nil
}

func (x *VenueAccount) GetPermissions() []string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *VenueAccount) GetSpotEnabled() bool {
	if x != nil && x.SpotEnabled != nil {
		return *x.SpotEnabled
	}
	return false
}

func (x *VenueAccount) GetMarginEnabled() bool {
	if x != nil && x.MarginEnabled != nil {
		return *x.MarginEnabled
	}
	return false
}

func (x *VenueAccount) GetFuturesEnabled() bool {
	if x != nil && x.FuturesEnabled != nil {
		return *x.FuturesEnabled
	}
	return false
}

func (x *VenueAccount) GetWithdrawalsEnabled() bool {
	if x != nil && x.WithdrawalsEnabled != nil {
		return *x.WithdrawalsEnabled
	}
	return false
}

func (x *VenueAccount) GetMaxLeverage() float64 {
	if x != nil && x.MaxLeverage != nil {
		return *x.MaxLeverage
	}
	return 0
}

func (x *VenueAccount) GetMakerFeeRate() float64 {
	if x != nil && x.MakerFeeRate != nil {
		return *x.MakerFeeRate
	}
	return 0
}

func (x *VenueAccount) GetTakerFeeRate() float64 {
	if x != nil && x.TakerFeeRate != nil {
		return *x.TakerFeeRate
	}
	return 0
}

func (x *VenueAccount) GetFeeTier() string {
	if x != nil && x.FeeTier != nil {
		return *x.FeeTier
	}
	return ""
}

func (x *VenueAccount) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *VenueAccount) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *VenueAccount) GetLastConnectedAt() *timestamp.Timestamp {
	if x != nil {
		return x.LastConnectedAt
	}
	return nil
}

func (x *VenueAccount) GetIsActive() bool {
	if x != nil && x.IsActive != nil {
		return *x.IsActive
	}
	return false
}

func (x *VenueAccount) GetNotes() string {
	if x != nil && x.Notes != nil {
		return *x.Notes
	}
	return ""
}

func (x *VenueAccount) GetWalletAddress() string {
	if x != nil && x.WalletAddress != nil {
		return *x.WalletAddress
	}
	return ""
}

func (x *VenueAccount) GetChainId() string {
	if x != nil && x.ChainId != nil {
		return *x.ChainId
	}
	return ""
}

func (x *VenueAccount) GetRateLimits() *_struct.Struct {
	if x != nil {
		return x.RateLimits
	}
	return nil
}

func (x *VenueAccount) GetMetadata() *_struct.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *VenueAccount) GetIsSandbox() bool {
	if x != nil && x.IsSandbox != nil {
		return *x.IsSandbox
	}
	return false
}

var File_proto_venues_v1_account_proto protoreflect.FileDescriptor

const file_proto_venues_v1_account_proto_rawDesc = "" +
	"\n" +
	"\x1dproto/venues/v1/account.proto\x12\rcqc.venues.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1cgoogle/protobuf/struct.proto\"\xd5\x0e\n" +
	"\fVenueAccount\x12\"\n" +
	"\n" +
	"account_id\x18\x01 \x01(\tH\x00R\taccountId\x88\x01\x01\x12\x1e\n" +
	"\bvenue_id\x18\x02 \x01(\tH\x01R\avenueId\x88\x01\x01\x12\x17\n" +
	"\x04name\x18\x03 \x01(\tH\x02R\x04name\x88\x01\x01\x12B\n" +
	"\faccount_type\x18\x04 \x01(\x0e2\x1a.cqc.venues.v1.AccountTypeH\x03R\vaccountType\x88\x01\x01\x129\n" +
	"\x06status\x18\x05 \x01(\x0e2\x1c.cqc.venues.v1.AccountStatusH\x04R\x06status\x88\x01\x01\x12&\n" +
	"\fportfolio_id\x18\x06 \x01(\tH\x05R\vportfolioId\x88\x01\x01\x12\x1e\n" +
	"\bowner_id\x18\a \x01(\tH\x06R\aownerId\x88\x01\x01\x12-\n" +
	"\x10venue_account_id\x18\b \x01(\tH\aR\x0evenueAccountId\x88\x01\x01\x12!\n" +
	"\n" +
	"api_key_id\x18\t \x01(\tH\bR\bapiKeyId\x88\x01\x01\x12,\n" +
	"\x0fhas_credentials\x18\n" +
	" \x01(\bH\tR\x0ehasCredentials\x88\x01\x01\x12W\n" +
	"\x17credentials_verified_at\x18\v \x01(\v2\x1a.google.protobuf.TimestampH\n" +
	"R\x15credentialsVerifiedAt\x88\x01\x01\x12 \n" +
	"\vpermissions\x18\f \x03(\tR\vpermissions\x12&\n" +
	"\fspot_enabled\x18\r \x01(\bH\vR\vspotEnabled\x88\x01\x01\x12*\n" +
	"\x0emargin_enabled\x18\x0e \x01(\bH\fR\rmarginEnabled\x88\x01\x01\x12,\n" +
	"\x0ffutures_enabled\x18\x0f \x01(\bH\rR\x0efuturesEnabled\x88\x01\x01\x124\n" +
	"\x13withdrawals_enabled\x18\x10 \x01(\bH\x0eR\x12withdrawalsEnabled\x88\x01\x01\x12&\n" +
	"\fmax_leverage\x18\x11 \x01(\x01H\x0fR\vmaxLeverage\x88\x01\x01\x12)\n" +
	"\x0emaker_fee_rate\x18\x12 \x01(\x01H\x10R\fmakerFeeRate\x88\x01\x01\x12)\n" +
	"\x0etaker_fee_rate\x18\x13 \x01(\x01H\x11R\ftakerFeeRate\x88\x01\x01\x12\x1e\n" +
	"\bfee_tier\x18\x14 \x01(\tH\x12R\afeeTier\x88\x01\x01\x12>\n" +
	"\n" +
	"created_at\x18\x15 \x01(\v2\x1a.google.protobuf.TimestampH\x13R\tcreatedAt\x88\x01\x01\x12>\n" +
	"\n" +
	"updated_at\x18\x16 \x01(\v2\x1a.google.protobuf.TimestampH\x14R\tupdatedAt\x88\x01\x01\x12K\n" +
	"\x11last_connected_at\x18\x17 \x01(\v2\x1a.google.protobuf.TimestampH\x15R\x0flastConnectedAt\x88\x01\x01\x12 \n" +
	"\tis_active\x18\x18 \x01(\bH\x16R\bisActive\x88\x01\x01\x12\x19\n" +
	"\x05notes\x18\x19 \x01(\tH\x17R\x05notes\x88\x01\x01\x12*\n" +
	"\x0ewallet_address\x18\x1a \x01(\tH\x18R\rwalletAddress\x88\x01\x01\x12\x1e\n" +
	"\bchain_id\x18\x1b \x01(\tH\x19R\achainId\x88\x01\x01\x12=\n" +
	"\vrate_limits\x18\x1c \x01(\v2\x17.google.protobuf.StructH\x1aR\n" +
	"rateLimits\x88\x01\x01\x128\n" +
	"\bmetadata\x18\x1d \x01(\v2\x17.google.protobuf.StructH\x1bR\bmetadata\x88\x01\x01\x12\"\n" +
	"\n" +
	"is_sandbox\x18\x1e \x01(\bH\x1cR\tisSandbox\x88\x01\x01B\r\n" +
	"\v_account_idB\v\n" +
	"\t_venue_idB\a\n" +
	"\x05_nameB\x0f\n" +
	"\r_account_typeB\t\n" +
	"\a_statusB\x0f\n" +
	"\r_portfolio_idB\v\n" +
	"\t_owner_idB\x13\n" +
	"\x11_venue_account_idB\r\n" +
	"\v_api_key_idB\x12\n" +
	"\x10_has_credentialsB\x1a\n" +
	"\x18_credentials_verified_atB\x0f\n" +
	"\r_spot_enabledB\x11\n" +
	"\x0f_margin_enabledB\x12\n" +
	"\x10_futures_enabledB\x16\n" +
	"\x14_withdrawals_enabledB\x0f\n" +
	"\r_max_leverageB\x11\n" +
	"\x0f_maker_fee_rateB\x11\n" +
	"\x0f_taker_fee_rateB\v\n" +
	"\t_fee_tierB\r\n" +
	"\v_created_atB\r\n" +
	"\v_updated_atB\x14\n" +
	"\x12_last_connected_atB\f\n" +
	"\n" +
	"_is_activeB\b\n" +
	"\x06_notesB\x11\n" +
	"\x0f_wallet_addressB\v\n" +
	"\t_chain_idB\x0e\n" +
	"\f_rate_limitsB\v\n" +
	"\t_metadataB\r\n" +
	"\v_is_sandbox*\xdf\x01\n" +
	"\rAccountStatus\x12\x1e\n" +
	"\x1aACCOUNT_STATUS_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15ACCOUNT_STATUS_ACTIVE\x10\x01\x12\x1b\n" +
	"\x17ACCOUNT_STATUS_INACTIVE\x10\x02\x12\x1c\n" +
	"\x18ACCOUNT_STATUS_SUSPENDED\x10\x03\x12\x1d\n" +
	"\x19ACCOUNT_STATUS_RESTRICTED\x10\x04\x12\x1e\n" +
	"\x1aACCOUNT_STATUS_PENDING_KYC\x10\x05\x12\x19\n" +
	"\x15ACCOUNT_STATUS_CLOSED\x10\x06*\xf9\x01\n" +
	"\vAccountType\x12\x1c\n" +
	"\x18ACCOUNT_TYPE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11ACCOUNT_TYPE_SPOT\x10\x01\x12\x17\n" +
	"\x13ACCOUNT_TYPE_MARGIN\x10\x02\x12\x18\n" +
	"\x14ACCOUNT_TYPE_FUTURES\x10\x03\x12\x18\n" +
	"\x14ACCOUNT_TYPE_OPTIONS\x10\x04\x12\x18\n" +
	"\x14ACCOUNT_TYPE_LENDING\x10\x05\x12\x18\n" +
	"\x14ACCOUNT_TYPE_STAKING\x10\x06\x12\x17\n" +
	"\x13ACCOUNT_TYPE_WALLET\x10\a\x12\x1b\n" +
	"\x17ACCOUNT_TYPE_SUBACCOUNT\x10\bB>Z<github.com/Combine-Capital/cqc/gen/go/cqc/venues/v1;venuesv1b\x06proto3"

var (
	file_proto_venues_v1_account_proto_rawDescOnce sync.Once
	file_proto_venues_v1_account_proto_rawDescData []byte
)

func file_proto_venues_v1_account_proto_rawDescGZIP() []byte {
	file_proto_venues_v1_account_proto_rawDescOnce.Do(func() {
		file_proto_venues_v1_account_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_venues_v1_account_proto_rawDesc), len(file_proto_venues_v1_account_proto_rawDesc)))
	})
	return file_proto_venues_v1_account_proto_rawDescData
}

var file_proto_venues_v1_account_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_venues_v1_account_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_proto_venues_v1_account_proto_goTypes = []any{
	(AccountStatus)(0),          // 0: cqc.venues.v1.AccountStatus
	(AccountType)(0),            // 1: cqc.venues.v1.AccountType
	(*VenueAccount)(nil),        // 2: cqc.venues.v1.VenueAccount
	(*timestamp.Timestamp)(nil), // 3: google.protobuf.Timestamp
	(*_struct.Struct)(nil),      // 4: google.protobuf.Struct
}
var file_proto_venues_v1_account_proto_depIdxs = []int32{
	1, // 0: cqc.venues.v1.VenueAccount.account_type:type_name -> cqc.venues.v1.AccountType
	0, // 1: cqc.venues.v1.VenueAccount.status:type_name -> cqc.venues.v1.AccountStatus
	3, // 2: cqc.venues.v1.VenueAccount.credentials_verified_at:type_name -> google.protobuf.Timestamp
	3, // 3: cqc.venues.v1.VenueAccount.created_at:type_name -> google.protobuf.Timestamp
	3, // 4: cqc.venues.v1.VenueAccount.updated_at:type_name -> google.protobuf.Timestamp
	3, // 5: cqc.venues.v1.VenueAccount.last_connected_at:type_name -> google.protobuf.Timestamp
	4, // 6: cqc.venues.v1.VenueAccount.rate_limits:type_name -> google.protobuf.Struct
	4, // 7: cqc.venues.v1.VenueAccount.metadata:type_name -> google.protobuf.Struct
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_proto_venues_v1_account_proto_init() }
func file_proto_venues_v1_account_proto_init() {
	if File_proto_venues_v1_account_proto != nil {
		return
	}
	file_proto_venues_v1_account_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_venues_v1_account_proto_rawDesc), len(file_proto_venues_v1_account_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_venues_v1_account_proto_goTypes,
		DependencyIndexes: file_proto_venues_v1_account_proto_depIdxs,
		EnumInfos:         file_proto_venues_v1_account_proto_enumTypes,
		MessageInfos:      file_proto_venues_v1_account_proto_msgTypes,
	}.Build()
	File_proto_venues_v1_account_proto = out.File
	file_proto_venues_v1_account_proto_goTypes = nil
	file_proto_venues_v1_account_proto_depIdxs = nil
}

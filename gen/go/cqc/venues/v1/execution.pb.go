// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: proto/venues/v1/execution.proto

package venuesv1

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BalanceType represents the category of balance.
type BalanceType int32

const (
	BalanceType_BALANCE_TYPE_UNSPECIFIED BalanceType = 0
	BalanceType_BALANCE_TYPE_SPOT        BalanceType = 1 // Spot trading balance
	BalanceType_BALANCE_TYPE_MARGIN      BalanceType = 2 // Margin account balance
	BalanceType_BALANCE_TYPE_FUTURES     BalanceType = 3 // Futures account balance
	BalanceType_BALANCE_TYPE_LENDING     BalanceType = 4 // Lending balance (supplied)
	BalanceType_BALANCE_TYPE_BORROWING   BalanceType = 5 // Borrowed balance (debt)
	BalanceType_BALANCE_TYPE_STAKED      BalanceType = 6 // Staked balance
	BalanceType_BALANCE_TYPE_LOCKED      BalanceType = 7 // Locked/vesting balance
	BalanceType_BALANCE_TYPE_REWARDS     BalanceType = 8 // Unclaimed rewards
)

// Enum value maps for BalanceType.
var (
	BalanceType_name = map[int32]string{
		0: "BALANCE_TYPE_UNSPECIFIED",
		1: "BALANCE_TYPE_SPOT",
		2: "BALANCE_TYPE_MARGIN",
		3: "BALANCE_TYPE_FUTURES",
		4: "BALANCE_TYPE_LENDING",
		5: "BALANCE_TYPE_BORROWING",
		6: "BALANCE_TYPE_STAKED",
		7: "BALANCE_TYPE_LOCKED",
		8: "BALANCE_TYPE_REWARDS",
	}
	BalanceType_value = map[string]int32{
		"BALANCE_TYPE_UNSPECIFIED": 0,
		"BALANCE_TYPE_SPOT":        1,
		"BALANCE_TYPE_MARGIN":      2,
		"BALANCE_TYPE_FUTURES":     3,
		"BALANCE_TYPE_LENDING":     4,
		"BALANCE_TYPE_BORROWING":   5,
		"BALANCE_TYPE_STAKED":      6,
		"BALANCE_TYPE_LOCKED":      7,
		"BALANCE_TYPE_REWARDS":     8,
	}
)

func (x BalanceType) Enum() *BalanceType {
	p := new(BalanceType)
	*p = x
	return p
}

func (x BalanceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BalanceType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_venues_v1_execution_proto_enumTypes[0].Descriptor()
}

func (BalanceType) Type() protoreflect.EnumType {
	return &file_proto_venues_v1_execution_proto_enumTypes[0]
}

func (x BalanceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BalanceType.Descriptor instead.
func (BalanceType) EnumDescriptor() ([]byte, []int) {
	return file_proto_venues_v1_execution_proto_rawDescGZIP(), []int{0}
}

// ExecutionType represents how an order was executed.
type ExecutionType int32

const (
	ExecutionType_EXECUTION_TYPE_UNSPECIFIED  ExecutionType = 0
	ExecutionType_EXECUTION_TYPE_NEW          ExecutionType = 1 // Order newly placed
	ExecutionType_EXECUTION_TYPE_PARTIAL_FILL ExecutionType = 2 // Order partially filled
	ExecutionType_EXECUTION_TYPE_FILL         ExecutionType = 3 // Order completely filled
	ExecutionType_EXECUTION_TYPE_CANCELLED    ExecutionType = 4 // Order cancelled
	ExecutionType_EXECUTION_TYPE_REPLACED     ExecutionType = 5 // Order amended/replaced
	ExecutionType_EXECUTION_TYPE_REJECTED     ExecutionType = 6 // Order rejected
	ExecutionType_EXECUTION_TYPE_EXPIRED      ExecutionType = 7 // Order expired
	ExecutionType_EXECUTION_TYPE_TRADE        ExecutionType = 8 // Trade execution report
)

// Enum value maps for ExecutionType.
var (
	ExecutionType_name = map[int32]string{
		0: "EXECUTION_TYPE_UNSPECIFIED",
		1: "EXECUTION_TYPE_NEW",
		2: "EXECUTION_TYPE_PARTIAL_FILL",
		3: "EXECUTION_TYPE_FILL",
		4: "EXECUTION_TYPE_CANCELLED",
		5: "EXECUTION_TYPE_REPLACED",
		6: "EXECUTION_TYPE_REJECTED",
		7: "EXECUTION_TYPE_EXPIRED",
		8: "EXECUTION_TYPE_TRADE",
	}
	ExecutionType_value = map[string]int32{
		"EXECUTION_TYPE_UNSPECIFIED":  0,
		"EXECUTION_TYPE_NEW":          1,
		"EXECUTION_TYPE_PARTIAL_FILL": 2,
		"EXECUTION_TYPE_FILL":         3,
		"EXECUTION_TYPE_CANCELLED":    4,
		"EXECUTION_TYPE_REPLACED":     5,
		"EXECUTION_TYPE_REJECTED":     6,
		"EXECUTION_TYPE_EXPIRED":      7,
		"EXECUTION_TYPE_TRADE":        8,
	}
)

func (x ExecutionType) Enum() *ExecutionType {
	p := new(ExecutionType)
	*p = x
	return p
}

func (x ExecutionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_venues_v1_execution_proto_enumTypes[1].Descriptor()
}

func (ExecutionType) Type() protoreflect.EnumType {
	return &file_proto_venues_v1_execution_proto_enumTypes[1]
}

func (x ExecutionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutionType.Descriptor instead.
func (ExecutionType) EnumDescriptor() ([]byte, []int) {
	return file_proto_venues_v1_execution_proto_rawDescGZIP(), []int{1}
}

// Balance represents the amount of an asset held in a venue account.
type Balance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique balance identifier.
	BalanceId *string `protobuf:"bytes,1,opt,name=balance_id,json=balanceId,proto3,oneof" json:"balance_id,omitempty"`
	// Venue account identifier.
	AccountId *string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3,oneof" json:"account_id,omitempty"`
	// Venue identifier.
	VenueId *string `protobuf:"bytes,3,opt,name=venue_id,json=venueId,proto3,oneof" json:"venue_id,omitempty"`
	// Asset identifier.
	AssetId *string `protobuf:"bytes,4,opt,name=asset_id,json=assetId,proto3,oneof" json:"asset_id,omitempty"`
	// Balance type/category.
	BalanceType *BalanceType `protobuf:"varint,5,opt,name=balance_type,json=balanceType,proto3,enum=cqc.venues.v1.BalanceType,oneof" json:"balance_type,omitempty"`
	// Total balance amount.
	Total *float64 `protobuf:"fixed64,6,opt,name=total,proto3,oneof" json:"total,omitempty"`
	// Available balance (can be used for trading/withdrawal).
	Available *float64 `protobuf:"fixed64,7,opt,name=available,proto3,oneof" json:"available,omitempty"`
	// Locked balance (in orders or pending operations).
	Locked *float64 `protobuf:"fixed64,8,opt,name=locked,proto3,oneof" json:"locked,omitempty"`
	// Balance reserved for margin requirements.
	Reserved *float64 `protobuf:"fixed64,9,opt,name=reserved,proto3,oneof" json:"reserved,omitempty"`
	// Borrowed amount (for margin accounts).
	Borrowed *float64 `protobuf:"fixed64,10,opt,name=borrowed,proto3,oneof" json:"borrowed,omitempty"`
	// Interest accrued on borrowed amount.
	Interest *float64 `protobuf:"fixed64,11,opt,name=interest,proto3,oneof" json:"interest,omitempty"`
	// Current USD value of the balance (if available).
	UsdValue *float64 `protobuf:"fixed64,12,opt,name=usd_value,json=usdValue,proto3,oneof" json:"usd_value,omitempty"`
	// Timestamp of this balance snapshot.
	Timestamp *timestamp.Timestamp `protobuf:"bytes,13,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
	// Timestamp when balance was last updated.
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,14,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	// On-chain address holding this balance (for wallets/DEX).
	WalletAddress *string `protobuf:"bytes,15,opt,name=wallet_address,json=walletAddress,proto3,oneof" json:"wallet_address,omitempty"`
	// Chain identifier (for on-chain balances).
	ChainId *string `protobuf:"bytes,16,opt,name=chain_id,json=chainId,proto3,oneof" json:"chain_id,omitempty"`
	// Whether this balance can be withdrawn.
	Withdrawable *bool `protobuf:"varint,17,opt,name=withdrawable,proto3,oneof" json:"withdrawable,omitempty"`
	// Whether this balance can be used for trading.
	Tradeable *bool `protobuf:"varint,18,opt,name=tradeable,proto3,oneof" json:"tradeable,omitempty"`
	// Staking lock period end time (for staked balances).
	UnlockTime *timestamp.Timestamp `protobuf:"bytes,19,opt,name=unlock_time,json=unlockTime,proto3,oneof" json:"unlock_time,omitempty"`
	// Annual percentage rate for lending/staking.
	Apr *float64 `protobuf:"fixed64,20,opt,name=apr,proto3,oneof" json:"apr,omitempty"`
	// Annual percentage yield for lending/staking.
	Apy *float64 `protobuf:"fixed64,21,opt,name=apy,proto3,oneof" json:"apy,omitempty"`
}

func (x *Balance) Reset() {
	*x = Balance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_venues_v1_execution_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Balance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balance) ProtoMessage() {}

func (x *Balance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_venues_v1_execution_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balance.ProtoReflect.Descriptor instead.
func (*Balance) Descriptor() ([]byte, []int) {
	return file_proto_venues_v1_execution_proto_rawDescGZIP(), []int{0}
}

func (x *Balance) GetBalanceId() string {
	if x != nil && x.BalanceId != nil {
		return *x.BalanceId
	}
	return ""
}

func (x *Balance) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *Balance) GetVenueId() string {
	if x != nil && x.VenueId != nil {
		return *x.VenueId
	}
	return ""
}

func (x *Balance) GetAssetId() string {
	if x != nil && x.AssetId != nil {
		return *x.AssetId
	}
	return ""
}

func (x *Balance) GetBalanceType() BalanceType {
	if x != nil && x.BalanceType != nil {
		return *x.BalanceType
	}
	return BalanceType_BALANCE_TYPE_UNSPECIFIED
}

func (x *Balance) GetTotal() float64 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *Balance) GetAvailable() float64 {
	if x != nil && x.Available != nil {
		return *x.Available
	}
	return 0
}

func (x *Balance) GetLocked() float64 {
	if x != nil && x.Locked != nil {
		return *x.Locked
	}
	return 0
}

func (x *Balance) GetReserved() float64 {
	if x != nil && x.Reserved != nil {
		return *x.Reserved
	}
	return 0
}

func (x *Balance) GetBorrowed() float64 {
	if x != nil && x.Borrowed != nil {
		return *x.Borrowed
	}
	return 0
}

func (x *Balance) GetInterest() float64 {
	if x != nil && x.Interest != nil {
		return *x.Interest
	}
	return 0
}

func (x *Balance) GetUsdValue() float64 {
	if x != nil && x.UsdValue != nil {
		return *x.UsdValue
	}
	return 0
}

func (x *Balance) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Balance) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Balance) GetWalletAddress() string {
	if x != nil && x.WalletAddress != nil {
		return *x.WalletAddress
	}
	return ""
}

func (x *Balance) GetChainId() string {
	if x != nil && x.ChainId != nil {
		return *x.ChainId
	}
	return ""
}

func (x *Balance) GetWithdrawable() bool {
	if x != nil && x.Withdrawable != nil {
		return *x.Withdrawable
	}
	return false
}

func (x *Balance) GetTradeable() bool {
	if x != nil && x.Tradeable != nil {
		return *x.Tradeable
	}
	return false
}

func (x *Balance) GetUnlockTime() *timestamp.Timestamp {
	if x != nil {
		return x.UnlockTime
	}
	return nil
}

func (x *Balance) GetApr() float64 {
	if x != nil && x.Apr != nil {
		return *x.Apr
	}
	return 0
}

func (x *Balance) GetApy() float64 {
	if x != nil && x.Apy != nil {
		return *x.Apy
	}
	return 0
}

// ExecutionReport represents a fill or status update for an order.
// These are typically received from venue APIs or websocket feeds.
type ExecutionReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique execution report identifier.
	ExecutionId *string `protobuf:"bytes,1,opt,name=execution_id,json=executionId,proto3,oneof" json:"execution_id,omitempty"`
	// Order identifier.
	OrderId *string `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3,oneof" json:"order_id,omitempty"`
	// Venue-assigned order ID.
	VenueOrderId *string `protobuf:"bytes,3,opt,name=venue_order_id,json=venueOrderId,proto3,oneof" json:"venue_order_id,omitempty"`
	// Client order ID.
	ClientOrderId *string `protobuf:"bytes,4,opt,name=client_order_id,json=clientOrderId,proto3,oneof" json:"client_order_id,omitempty"`
	// Venue account identifier.
	AccountId *string `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3,oneof" json:"account_id,omitempty"`
	// Venue identifier.
	VenueId *string `protobuf:"bytes,6,opt,name=venue_id,json=venueId,proto3,oneof" json:"venue_id,omitempty"`
	// Trading pair symbol.
	VenueSymbol *string `protobuf:"bytes,7,opt,name=venue_symbol,json=venueSymbol,proto3,oneof" json:"venue_symbol,omitempty"`
	// Asset identifier for base currency.
	AssetId *string `protobuf:"bytes,8,opt,name=asset_id,json=assetId,proto3,oneof" json:"asset_id,omitempty"`
	// Asset identifier for quote currency.
	QuoteAssetId *string `protobuf:"bytes,9,opt,name=quote_asset_id,json=quoteAssetId,proto3,oneof" json:"quote_asset_id,omitempty"`
	// Execution type.
	ExecutionType *ExecutionType `protobuf:"varint,10,opt,name=execution_type,json=executionType,proto3,enum=cqc.venues.v1.ExecutionType,oneof" json:"execution_type,omitempty"`
	// Order status after this execution.
	OrderStatus *string `protobuf:"bytes,11,opt,name=order_status,json=orderStatus,proto3,oneof" json:"order_status,omitempty"`
	// Order side (buy/sell).
	Side *string `protobuf:"bytes,12,opt,name=side,proto3,oneof" json:"side,omitempty"`
	// Order type (market/limit).
	OrderType *string `protobuf:"bytes,13,opt,name=order_type,json=orderType,proto3,oneof" json:"order_type,omitempty"`
	// Timestamp of this execution.
	Timestamp *timestamp.Timestamp `protobuf:"bytes,14,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
	// Execution price for this fill.
	Price *float64 `protobuf:"fixed64,15,opt,name=price,proto3,oneof" json:"price,omitempty"`
	// Quantity executed in this fill.
	Quantity *float64 `protobuf:"fixed64,16,opt,name=quantity,proto3,oneof" json:"quantity,omitempty"`
	// Cumulative quantity filled so far.
	CumulativeQuantity *float64 `protobuf:"fixed64,17,opt,name=cumulative_quantity,json=cumulativeQuantity,proto3,oneof" json:"cumulative_quantity,omitempty"`
	// Remaining quantity unfilled.
	RemainingQuantity *float64 `protobuf:"fixed64,18,opt,name=remaining_quantity,json=remainingQuantity,proto3,oneof" json:"remaining_quantity,omitempty"`
	// Fee for this execution.
	Fee *float64 `protobuf:"fixed64,19,opt,name=fee,proto3,oneof" json:"fee,omitempty"`
	// Asset in which fee is denominated.
	FeeAssetId *string `protobuf:"bytes,20,opt,name=fee_asset_id,json=feeAssetId,proto3,oneof" json:"fee_asset_id,omitempty"`
	// Commission rate applied.
	CommissionRate *float64 `protobuf:"fixed64,21,opt,name=commission_rate,json=commissionRate,proto3,oneof" json:"commission_rate,omitempty"`
	// Trade identifier from venue.
	TradeId *string `protobuf:"bytes,22,opt,name=trade_id,json=tradeId,proto3,oneof" json:"trade_id,omitempty"`
	// Whether this is a maker or taker execution.
	IsMaker *bool `protobuf:"varint,23,opt,name=is_maker,json=isMaker,proto3,oneof" json:"is_maker,omitempty"`
	// Transaction hash (for on-chain executions).
	TxHash *string `protobuf:"bytes,24,opt,name=tx_hash,json=txHash,proto3,oneof" json:"tx_hash,omitempty"`
	// Block number (for on-chain executions).
	BlockNumber *int64 `protobuf:"varint,25,opt,name=block_number,json=blockNumber,proto3,oneof" json:"block_number,omitempty"`
	// Liquidity indicator (added/removed liquidity).
	Liquidity *string `protobuf:"bytes,26,opt,name=liquidity,proto3,oneof" json:"liquidity,omitempty"`
	// Venue-provided execution ID.
	VenueExecutionId *string `protobuf:"bytes,27,opt,name=venue_execution_id,json=venueExecutionId,proto3,oneof" json:"venue_execution_id,omitempty"`
	// Total value of this execution (price * quantity).
	Value *float64 `protobuf:"fixed64,28,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Average fill price across all executions for this order.
	AverageFillPrice *float64 `protobuf:"fixed64,29,opt,name=average_fill_price,json=averageFillPrice,proto3,oneof" json:"average_fill_price,omitempty"`
	// Rejection reason (if execution_type is REJECTED).
	RejectionReason *string `protobuf:"bytes,30,opt,name=rejection_reason,json=rejectionReason,proto3,oneof" json:"rejection_reason,omitempty"`
	// Last update timestamp for the order.
	OrderUpdatedAt *timestamp.Timestamp `protobuf:"bytes,31,opt,name=order_updated_at,json=orderUpdatedAt,proto3,oneof" json:"order_updated_at,omitempty"`
}

func (x *ExecutionReport) Reset() {
	*x = ExecutionReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_venues_v1_execution_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionReport) ProtoMessage() {}

func (x *ExecutionReport) ProtoReflect() protoreflect.Message {
	mi := &file_proto_venues_v1_execution_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionReport.ProtoReflect.Descriptor instead.
func (*ExecutionReport) Descriptor() ([]byte, []int) {
	return file_proto_venues_v1_execution_proto_rawDescGZIP(), []int{1}
}

func (x *ExecutionReport) GetExecutionId() string {
	if x != nil && x.ExecutionId != nil {
		return *x.ExecutionId
	}
	return ""
}

func (x *ExecutionReport) GetOrderId() string {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return ""
}

func (x *ExecutionReport) GetVenueOrderId() string {
	if x != nil && x.VenueOrderId != nil {
		return *x.VenueOrderId
	}
	return ""
}

func (x *ExecutionReport) GetClientOrderId() string {
	if x != nil && x.ClientOrderId != nil {
		return *x.ClientOrderId
	}
	return ""
}

func (x *ExecutionReport) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *ExecutionReport) GetVenueId() string {
	if x != nil && x.VenueId != nil {
		return *x.VenueId
	}
	return ""
}

func (x *ExecutionReport) GetVenueSymbol() string {
	if x != nil && x.VenueSymbol != nil {
		return *x.VenueSymbol
	}
	return ""
}

func (x *ExecutionReport) GetAssetId() string {
	if x != nil && x.AssetId != nil {
		return *x.AssetId
	}
	return ""
}

func (x *ExecutionReport) GetQuoteAssetId() string {
	if x != nil && x.QuoteAssetId != nil {
		return *x.QuoteAssetId
	}
	return ""
}

func (x *ExecutionReport) GetExecutionType() ExecutionType {
	if x != nil && x.ExecutionType != nil {
		return *x.ExecutionType
	}
	return ExecutionType_EXECUTION_TYPE_UNSPECIFIED
}

func (x *ExecutionReport) GetOrderStatus() string {
	if x != nil && x.OrderStatus != nil {
		return *x.OrderStatus
	}
	return ""
}

func (x *ExecutionReport) GetSide() string {
	if x != nil && x.Side != nil {
		return *x.Side
	}
	return ""
}

func (x *ExecutionReport) GetOrderType() string {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return ""
}

func (x *ExecutionReport) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ExecutionReport) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *ExecutionReport) GetQuantity() float64 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

func (x *ExecutionReport) GetCumulativeQuantity() float64 {
	if x != nil && x.CumulativeQuantity != nil {
		return *x.CumulativeQuantity
	}
	return 0
}

func (x *ExecutionReport) GetRemainingQuantity() float64 {
	if x != nil && x.RemainingQuantity != nil {
		return *x.RemainingQuantity
	}
	return 0
}

func (x *ExecutionReport) GetFee() float64 {
	if x != nil && x.Fee != nil {
		return *x.Fee
	}
	return 0
}

func (x *ExecutionReport) GetFeeAssetId() string {
	if x != nil && x.FeeAssetId != nil {
		return *x.FeeAssetId
	}
	return ""
}

func (x *ExecutionReport) GetCommissionRate() float64 {
	if x != nil && x.CommissionRate != nil {
		return *x.CommissionRate
	}
	return 0
}

func (x *ExecutionReport) GetTradeId() string {
	if x != nil && x.TradeId != nil {
		return *x.TradeId
	}
	return ""
}

func (x *ExecutionReport) GetIsMaker() bool {
	if x != nil && x.IsMaker != nil {
		return *x.IsMaker
	}
	return false
}

func (x *ExecutionReport) GetTxHash() string {
	if x != nil && x.TxHash != nil {
		return *x.TxHash
	}
	return ""
}

func (x *ExecutionReport) GetBlockNumber() int64 {
	if x != nil && x.BlockNumber != nil {
		return *x.BlockNumber
	}
	return 0
}

func (x *ExecutionReport) GetLiquidity() string {
	if x != nil && x.Liquidity != nil {
		return *x.Liquidity
	}
	return ""
}

func (x *ExecutionReport) GetVenueExecutionId() string {
	if x != nil && x.VenueExecutionId != nil {
		return *x.VenueExecutionId
	}
	return ""
}

func (x *ExecutionReport) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *ExecutionReport) GetAverageFillPrice() float64 {
	if x != nil && x.AverageFillPrice != nil {
		return *x.AverageFillPrice
	}
	return 0
}

func (x *ExecutionReport) GetRejectionReason() string {
	if x != nil && x.RejectionReason != nil {
		return *x.RejectionReason
	}
	return ""
}

func (x *ExecutionReport) GetOrderUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.OrderUpdatedAt
	}
	return nil
}

var File_proto_venues_v1_execution_proto protoreflect.FileDescriptor

var file_proto_venues_v1_execution_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0d, 0x63, 0x71, 0x63, 0x2e, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xd9, 0x08, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a,
	0x0a, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x09, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0c, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x71,
	0x63, 0x2e, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x04, 0x52, 0x0b, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x07, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x48, 0x08, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x72, 0x72, 0x6f,
	0x77, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0a, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x75, 0x73, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0b, 0x52, 0x08, 0x75, 0x73,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x0c, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x0d, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0e, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x48, 0x10, 0x52, 0x0c, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x11, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x40, 0x0a, 0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x12, 0x52, 0x0a, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x61, 0x70, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x13, 0x52, 0x03, 0x61, 0x70, 0x72, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x61, 0x70, 0x79,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x48, 0x14, 0x52, 0x03, 0x61, 0x70, 0x79, 0x88, 0x01, 0x01,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x6f,
	0x72, 0x72, 0x6f, 0x77, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x73, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x61, 0x70, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x61, 0x70, 0x79, 0x22, 0x83, 0x0e,
	0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x26, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x0c, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x07, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x0e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x09,
	0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x69,
	0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0e, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x0f, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x10, 0x52, 0x12, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x11, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x66, 0x65, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x48, 0x12, 0x52, 0x03, 0x66, 0x65, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x0a, 0x66, 0x65, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x14, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x07, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x48, 0x16, 0x52, 0x07, 0x69, 0x73,
	0x4d, 0x61, 0x6b, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x06, 0x74, 0x78, 0x48,
	0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x48, 0x18, 0x52, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x19, 0x52, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x12, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52,
	0x10, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x1b, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x31, 0x0a, 0x12, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1c, 0x52, 0x10, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x0f,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x49, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x1e, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x65, 0x65, 0x5f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73,
	0x5f, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x78, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x66,
	0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x2a, 0xf7, 0x01, 0x0a, 0x0b, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x50, 0x4f, 0x54, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x41, 0x4c, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x10,
	0x02, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x53, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x42,
	0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x52, 0x52, 0x4f, 0x57, 0x49, 0x4e, 0x47, 0x10,
	0x05, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x4b, 0x45, 0x44, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x41,
	0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45,
	0x44, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x53, 0x10, 0x08, 0x2a, 0x8f, 0x02,
	0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x1a, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x58, 0x45, 0x43, 0x55,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41,
	0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x58, 0x45, 0x43,
	0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x10,
	0x03, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x1b, 0x0a, 0x17, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17,
	0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52,
	0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x58, 0x45,
	0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x49,
	0x52, 0x45, 0x44, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x08, 0x42,
	0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6f,
	0x6d, 0x62, 0x69, 0x6e, 0x65, 0x2d, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x2f, 0x63, 0x71,
	0x63, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x71, 0x63, 0x2f, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_venues_v1_execution_proto_rawDescOnce sync.Once
	file_proto_venues_v1_execution_proto_rawDescData = file_proto_venues_v1_execution_proto_rawDesc
)

func file_proto_venues_v1_execution_proto_rawDescGZIP() []byte {
	file_proto_venues_v1_execution_proto_rawDescOnce.Do(func() {
		file_proto_venues_v1_execution_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_venues_v1_execution_proto_rawDescData)
	})
	return file_proto_venues_v1_execution_proto_rawDescData
}

var file_proto_venues_v1_execution_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_venues_v1_execution_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_venues_v1_execution_proto_goTypes = []interface{}{
	(BalanceType)(0),            // 0: cqc.venues.v1.BalanceType
	(ExecutionType)(0),          // 1: cqc.venues.v1.ExecutionType
	(*Balance)(nil),             // 2: cqc.venues.v1.Balance
	(*ExecutionReport)(nil),     // 3: cqc.venues.v1.ExecutionReport
	(*timestamp.Timestamp)(nil), // 4: google.protobuf.Timestamp
}
var file_proto_venues_v1_execution_proto_depIdxs = []int32{
	0, // 0: cqc.venues.v1.Balance.balance_type:type_name -> cqc.venues.v1.BalanceType
	4, // 1: cqc.venues.v1.Balance.timestamp:type_name -> google.protobuf.Timestamp
	4, // 2: cqc.venues.v1.Balance.updated_at:type_name -> google.protobuf.Timestamp
	4, // 3: cqc.venues.v1.Balance.unlock_time:type_name -> google.protobuf.Timestamp
	1, // 4: cqc.venues.v1.ExecutionReport.execution_type:type_name -> cqc.venues.v1.ExecutionType
	4, // 5: cqc.venues.v1.ExecutionReport.timestamp:type_name -> google.protobuf.Timestamp
	4, // 6: cqc.venues.v1.ExecutionReport.order_updated_at:type_name -> google.protobuf.Timestamp
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_proto_venues_v1_execution_proto_init() }
func file_proto_venues_v1_execution_proto_init() {
	if File_proto_venues_v1_execution_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_venues_v1_execution_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Balance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_venues_v1_execution_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_venues_v1_execution_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_proto_venues_v1_execution_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_venues_v1_execution_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_venues_v1_execution_proto_goTypes,
		DependencyIndexes: file_proto_venues_v1_execution_proto_depIdxs,
		EnumInfos:         file_proto_venues_v1_execution_proto_enumTypes,
		MessageInfos:      file_proto_venues_v1_execution_proto_msgTypes,
	}.Build()
	File_proto_venues_v1_execution_proto = out.File
	file_proto_venues_v1_execution_proto_rawDesc = nil
	file_proto_venues_v1_execution_proto_goTypes = nil
	file_proto_venues_v1_execution_proto_depIdxs = nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v3.12.4
// source: proto/venues/v1/execution.proto

package venuesv1

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BalanceType represents the category of balance.
type BalanceType int32

const (
	BalanceType_BALANCE_TYPE_UNSPECIFIED BalanceType = 0
	BalanceType_BALANCE_TYPE_SPOT        BalanceType = 1 // Spot trading balance
	BalanceType_BALANCE_TYPE_MARGIN      BalanceType = 2 // Margin account balance
	BalanceType_BALANCE_TYPE_FUTURES     BalanceType = 3 // Futures account balance
	BalanceType_BALANCE_TYPE_LENDING     BalanceType = 4 // Lending balance (supplied)
	BalanceType_BALANCE_TYPE_BORROWING   BalanceType = 5 // Borrowed balance (debt)
	BalanceType_BALANCE_TYPE_STAKED      BalanceType = 6 // Staked balance
	BalanceType_BALANCE_TYPE_LOCKED      BalanceType = 7 // Locked/vesting balance
	BalanceType_BALANCE_TYPE_REWARDS     BalanceType = 8 // Unclaimed rewards
)

// Enum value maps for BalanceType.
var (
	BalanceType_name = map[int32]string{
		0: "BALANCE_TYPE_UNSPECIFIED",
		1: "BALANCE_TYPE_SPOT",
		2: "BALANCE_TYPE_MARGIN",
		3: "BALANCE_TYPE_FUTURES",
		4: "BALANCE_TYPE_LENDING",
		5: "BALANCE_TYPE_BORROWING",
		6: "BALANCE_TYPE_STAKED",
		7: "BALANCE_TYPE_LOCKED",
		8: "BALANCE_TYPE_REWARDS",
	}
	BalanceType_value = map[string]int32{
		"BALANCE_TYPE_UNSPECIFIED": 0,
		"BALANCE_TYPE_SPOT":        1,
		"BALANCE_TYPE_MARGIN":      2,
		"BALANCE_TYPE_FUTURES":     3,
		"BALANCE_TYPE_LENDING":     4,
		"BALANCE_TYPE_BORROWING":   5,
		"BALANCE_TYPE_STAKED":      6,
		"BALANCE_TYPE_LOCKED":      7,
		"BALANCE_TYPE_REWARDS":     8,
	}
)

func (x BalanceType) Enum() *BalanceType {
	p := new(BalanceType)
	*p = x
	return p
}

func (x BalanceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BalanceType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_venues_v1_execution_proto_enumTypes[0].Descriptor()
}

func (BalanceType) Type() protoreflect.EnumType {
	return &file_proto_venues_v1_execution_proto_enumTypes[0]
}

func (x BalanceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BalanceType.Descriptor instead.
func (BalanceType) EnumDescriptor() ([]byte, []int) {
	return file_proto_venues_v1_execution_proto_rawDescGZIP(), []int{0}
}

// ExecutionType represents how an order was executed.
type ExecutionType int32

const (
	ExecutionType_EXECUTION_TYPE_UNSPECIFIED  ExecutionType = 0
	ExecutionType_EXECUTION_TYPE_NEW          ExecutionType = 1 // Order newly placed
	ExecutionType_EXECUTION_TYPE_PARTIAL_FILL ExecutionType = 2 // Order partially filled
	ExecutionType_EXECUTION_TYPE_FILL         ExecutionType = 3 // Order completely filled
	ExecutionType_EXECUTION_TYPE_CANCELLED    ExecutionType = 4 // Order cancelled
	ExecutionType_EXECUTION_TYPE_REPLACED     ExecutionType = 5 // Order amended/replaced
	ExecutionType_EXECUTION_TYPE_REJECTED     ExecutionType = 6 // Order rejected
	ExecutionType_EXECUTION_TYPE_EXPIRED      ExecutionType = 7 // Order expired
	ExecutionType_EXECUTION_TYPE_TRADE        ExecutionType = 8 // Trade execution report
)

// Enum value maps for ExecutionType.
var (
	ExecutionType_name = map[int32]string{
		0: "EXECUTION_TYPE_UNSPECIFIED",
		1: "EXECUTION_TYPE_NEW",
		2: "EXECUTION_TYPE_PARTIAL_FILL",
		3: "EXECUTION_TYPE_FILL",
		4: "EXECUTION_TYPE_CANCELLED",
		5: "EXECUTION_TYPE_REPLACED",
		6: "EXECUTION_TYPE_REJECTED",
		7: "EXECUTION_TYPE_EXPIRED",
		8: "EXECUTION_TYPE_TRADE",
	}
	ExecutionType_value = map[string]int32{
		"EXECUTION_TYPE_UNSPECIFIED":  0,
		"EXECUTION_TYPE_NEW":          1,
		"EXECUTION_TYPE_PARTIAL_FILL": 2,
		"EXECUTION_TYPE_FILL":         3,
		"EXECUTION_TYPE_CANCELLED":    4,
		"EXECUTION_TYPE_REPLACED":     5,
		"EXECUTION_TYPE_REJECTED":     6,
		"EXECUTION_TYPE_EXPIRED":      7,
		"EXECUTION_TYPE_TRADE":        8,
	}
)

func (x ExecutionType) Enum() *ExecutionType {
	p := new(ExecutionType)
	*p = x
	return p
}

func (x ExecutionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_venues_v1_execution_proto_enumTypes[1].Descriptor()
}

func (ExecutionType) Type() protoreflect.EnumType {
	return &file_proto_venues_v1_execution_proto_enumTypes[1]
}

func (x ExecutionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutionType.Descriptor instead.
func (ExecutionType) EnumDescriptor() ([]byte, []int) {
	return file_proto_venues_v1_execution_proto_rawDescGZIP(), []int{1}
}

// Balance represents the amount of an asset held in a venue account.
type Balance struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique balance identifier.
	BalanceId *string `protobuf:"bytes,1,opt,name=balance_id,json=balanceId,proto3,oneof" json:"balance_id,omitempty"`
	// Venue account identifier.
	AccountId *string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3,oneof" json:"account_id,omitempty"`
	// Venue identifier.
	VenueId *string `protobuf:"bytes,3,opt,name=venue_id,json=venueId,proto3,oneof" json:"venue_id,omitempty"`
	// Asset identifier.
	AssetId *string `protobuf:"bytes,4,opt,name=asset_id,json=assetId,proto3,oneof" json:"asset_id,omitempty"`
	// Balance type/category.
	BalanceType *BalanceType `protobuf:"varint,5,opt,name=balance_type,json=balanceType,proto3,enum=cqc.venues.v1.BalanceType,oneof" json:"balance_type,omitempty"`
	// Total balance amount.
	Total *float64 `protobuf:"fixed64,6,opt,name=total,proto3,oneof" json:"total,omitempty"`
	// Available balance (can be used for trading/withdrawal).
	Available *float64 `protobuf:"fixed64,7,opt,name=available,proto3,oneof" json:"available,omitempty"`
	// Locked balance (in orders or pending operations).
	Locked *float64 `protobuf:"fixed64,8,opt,name=locked,proto3,oneof" json:"locked,omitempty"`
	// Balance reserved for margin requirements.
	Reserved *float64 `protobuf:"fixed64,9,opt,name=reserved,proto3,oneof" json:"reserved,omitempty"`
	// Borrowed amount (for margin accounts).
	Borrowed *float64 `protobuf:"fixed64,10,opt,name=borrowed,proto3,oneof" json:"borrowed,omitempty"`
	// Interest accrued on borrowed amount.
	Interest *float64 `protobuf:"fixed64,11,opt,name=interest,proto3,oneof" json:"interest,omitempty"`
	// Current USD value of the balance (if available).
	UsdValue *float64 `protobuf:"fixed64,12,opt,name=usd_value,json=usdValue,proto3,oneof" json:"usd_value,omitempty"`
	// Timestamp of this balance snapshot.
	Timestamp *timestamp.Timestamp `protobuf:"bytes,13,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
	// Timestamp when balance was last updated.
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,14,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	// On-chain address holding this balance (for wallets/DEX).
	WalletAddress *string `protobuf:"bytes,15,opt,name=wallet_address,json=walletAddress,proto3,oneof" json:"wallet_address,omitempty"`
	// Chain identifier (for on-chain balances).
	ChainId *string `protobuf:"bytes,16,opt,name=chain_id,json=chainId,proto3,oneof" json:"chain_id,omitempty"`
	// Whether this balance can be withdrawn.
	Withdrawable *bool `protobuf:"varint,17,opt,name=withdrawable,proto3,oneof" json:"withdrawable,omitempty"`
	// Whether this balance can be used for trading.
	Tradeable *bool `protobuf:"varint,18,opt,name=tradeable,proto3,oneof" json:"tradeable,omitempty"`
	// Staking lock period end time (for staked balances).
	UnlockTime *timestamp.Timestamp `protobuf:"bytes,19,opt,name=unlock_time,json=unlockTime,proto3,oneof" json:"unlock_time,omitempty"`
	// Annual percentage rate for lending/staking.
	Apr *float64 `protobuf:"fixed64,20,opt,name=apr,proto3,oneof" json:"apr,omitempty"`
	// Annual percentage yield for lending/staking.
	Apy           *float64 `protobuf:"fixed64,21,opt,name=apy,proto3,oneof" json:"apy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Balance) Reset() {
	*x = Balance{}
	mi := &file_proto_venues_v1_execution_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Balance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balance) ProtoMessage() {}

func (x *Balance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_venues_v1_execution_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balance.ProtoReflect.Descriptor instead.
func (*Balance) Descriptor() ([]byte, []int) {
	return file_proto_venues_v1_execution_proto_rawDescGZIP(), []int{0}
}

func (x *Balance) GetBalanceId() string {
	if x != nil && x.BalanceId != nil {
		return *x.BalanceId
	}
	return ""
}

func (x *Balance) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *Balance) GetVenueId() string {
	if x != nil && x.VenueId != nil {
		return *x.VenueId
	}
	return ""
}

func (x *Balance) GetAssetId() string {
	if x != nil && x.AssetId != nil {
		return *x.AssetId
	}
	return ""
}

func (x *Balance) GetBalanceType() BalanceType {
	if x != nil && x.BalanceType != nil {
		return *x.BalanceType
	}
	return BalanceType_BALANCE_TYPE_UNSPECIFIED
}

func (x *Balance) GetTotal() float64 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *Balance) GetAvailable() float64 {
	if x != nil && x.Available != nil {
		return *x.Available
	}
	return 0
}

func (x *Balance) GetLocked() float64 {
	if x != nil && x.Locked != nil {
		return *x.Locked
	}
	return 0
}

func (x *Balance) GetReserved() float64 {
	if x != nil && x.Reserved != nil {
		return *x.Reserved
	}
	return 0
}

func (x *Balance) GetBorrowed() float64 {
	if x != nil && x.Borrowed != nil {
		return *x.Borrowed
	}
	return 0
}

func (x *Balance) GetInterest() float64 {
	if x != nil && x.Interest != nil {
		return *x.Interest
	}
	return 0
}

func (x *Balance) GetUsdValue() float64 {
	if x != nil && x.UsdValue != nil {
		return *x.UsdValue
	}
	return 0
}

func (x *Balance) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Balance) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Balance) GetWalletAddress() string {
	if x != nil && x.WalletAddress != nil {
		return *x.WalletAddress
	}
	return ""
}

func (x *Balance) GetChainId() string {
	if x != nil && x.ChainId != nil {
		return *x.ChainId
	}
	return ""
}

func (x *Balance) GetWithdrawable() bool {
	if x != nil && x.Withdrawable != nil {
		return *x.Withdrawable
	}
	return false
}

func (x *Balance) GetTradeable() bool {
	if x != nil && x.Tradeable != nil {
		return *x.Tradeable
	}
	return false
}

func (x *Balance) GetUnlockTime() *timestamp.Timestamp {
	if x != nil {
		return x.UnlockTime
	}
	return nil
}

func (x *Balance) GetApr() float64 {
	if x != nil && x.Apr != nil {
		return *x.Apr
	}
	return 0
}

func (x *Balance) GetApy() float64 {
	if x != nil && x.Apy != nil {
		return *x.Apy
	}
	return 0
}

// ExecutionReport represents a fill or status update for an order.
// These are typically received from venue APIs or websocket feeds.
type ExecutionReport struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique execution report identifier.
	ExecutionId *string `protobuf:"bytes,1,opt,name=execution_id,json=executionId,proto3,oneof" json:"execution_id,omitempty"`
	// Order identifier.
	OrderId *string `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3,oneof" json:"order_id,omitempty"`
	// Venue-assigned order ID.
	VenueOrderId *string `protobuf:"bytes,3,opt,name=venue_order_id,json=venueOrderId,proto3,oneof" json:"venue_order_id,omitempty"`
	// Client order ID.
	ClientOrderId *string `protobuf:"bytes,4,opt,name=client_order_id,json=clientOrderId,proto3,oneof" json:"client_order_id,omitempty"`
	// Venue account identifier.
	AccountId *string `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3,oneof" json:"account_id,omitempty"`
	// Venue identifier.
	VenueId *string `protobuf:"bytes,6,opt,name=venue_id,json=venueId,proto3,oneof" json:"venue_id,omitempty"`
	// Trading pair symbol.
	VenueSymbol *string `protobuf:"bytes,7,opt,name=venue_symbol,json=venueSymbol,proto3,oneof" json:"venue_symbol,omitempty"`
	// Asset identifier for base currency.
	AssetId *string `protobuf:"bytes,8,opt,name=asset_id,json=assetId,proto3,oneof" json:"asset_id,omitempty"`
	// Asset identifier for quote currency.
	QuoteAssetId *string `protobuf:"bytes,9,opt,name=quote_asset_id,json=quoteAssetId,proto3,oneof" json:"quote_asset_id,omitempty"`
	// Execution type.
	ExecutionType *ExecutionType `protobuf:"varint,10,opt,name=execution_type,json=executionType,proto3,enum=cqc.venues.v1.ExecutionType,oneof" json:"execution_type,omitempty"`
	// Order status after this execution.
	OrderStatus *string `protobuf:"bytes,11,opt,name=order_status,json=orderStatus,proto3,oneof" json:"order_status,omitempty"`
	// Order side (buy/sell).
	Side *string `protobuf:"bytes,12,opt,name=side,proto3,oneof" json:"side,omitempty"`
	// Order type (market/limit).
	OrderType *string `protobuf:"bytes,13,opt,name=order_type,json=orderType,proto3,oneof" json:"order_type,omitempty"`
	// Timestamp of this execution.
	Timestamp *timestamp.Timestamp `protobuf:"bytes,14,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
	// Execution price for this fill.
	Price *float64 `protobuf:"fixed64,15,opt,name=price,proto3,oneof" json:"price,omitempty"`
	// Quantity executed in this fill.
	Quantity *float64 `protobuf:"fixed64,16,opt,name=quantity,proto3,oneof" json:"quantity,omitempty"`
	// Cumulative quantity filled so far.
	CumulativeQuantity *float64 `protobuf:"fixed64,17,opt,name=cumulative_quantity,json=cumulativeQuantity,proto3,oneof" json:"cumulative_quantity,omitempty"`
	// Remaining quantity unfilled.
	RemainingQuantity *float64 `protobuf:"fixed64,18,opt,name=remaining_quantity,json=remainingQuantity,proto3,oneof" json:"remaining_quantity,omitempty"`
	// Fee for this execution.
	Fee *float64 `protobuf:"fixed64,19,opt,name=fee,proto3,oneof" json:"fee,omitempty"`
	// Asset in which fee is denominated.
	FeeAssetId *string `protobuf:"bytes,20,opt,name=fee_asset_id,json=feeAssetId,proto3,oneof" json:"fee_asset_id,omitempty"`
	// Commission rate applied.
	CommissionRate *float64 `protobuf:"fixed64,21,opt,name=commission_rate,json=commissionRate,proto3,oneof" json:"commission_rate,omitempty"`
	// Trade identifier from venue.
	TradeId *string `protobuf:"bytes,22,opt,name=trade_id,json=tradeId,proto3,oneof" json:"trade_id,omitempty"`
	// Whether this is a maker or taker execution.
	IsMaker *bool `protobuf:"varint,23,opt,name=is_maker,json=isMaker,proto3,oneof" json:"is_maker,omitempty"`
	// Transaction hash (for on-chain executions).
	TxHash *string `protobuf:"bytes,24,opt,name=tx_hash,json=txHash,proto3,oneof" json:"tx_hash,omitempty"`
	// Block number (for on-chain executions).
	BlockNumber *int64 `protobuf:"varint,25,opt,name=block_number,json=blockNumber,proto3,oneof" json:"block_number,omitempty"`
	// Liquidity indicator (added/removed liquidity).
	Liquidity *string `protobuf:"bytes,26,opt,name=liquidity,proto3,oneof" json:"liquidity,omitempty"`
	// Venue-provided execution ID.
	VenueExecutionId *string `protobuf:"bytes,27,opt,name=venue_execution_id,json=venueExecutionId,proto3,oneof" json:"venue_execution_id,omitempty"`
	// Total value of this execution (price * quantity).
	Value *float64 `protobuf:"fixed64,28,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Average fill price across all executions for this order.
	AverageFillPrice *float64 `protobuf:"fixed64,29,opt,name=average_fill_price,json=averageFillPrice,proto3,oneof" json:"average_fill_price,omitempty"`
	// Rejection reason (if execution_type is REJECTED).
	RejectionReason *string `protobuf:"bytes,30,opt,name=rejection_reason,json=rejectionReason,proto3,oneof" json:"rejection_reason,omitempty"`
	// Last update timestamp for the order.
	OrderUpdatedAt *timestamp.Timestamp `protobuf:"bytes,31,opt,name=order_updated_at,json=orderUpdatedAt,proto3,oneof" json:"order_updated_at,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ExecutionReport) Reset() {
	*x = ExecutionReport{}
	mi := &file_proto_venues_v1_execution_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutionReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionReport) ProtoMessage() {}

func (x *ExecutionReport) ProtoReflect() protoreflect.Message {
	mi := &file_proto_venues_v1_execution_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionReport.ProtoReflect.Descriptor instead.
func (*ExecutionReport) Descriptor() ([]byte, []int) {
	return file_proto_venues_v1_execution_proto_rawDescGZIP(), []int{1}
}

func (x *ExecutionReport) GetExecutionId() string {
	if x != nil && x.ExecutionId != nil {
		return *x.ExecutionId
	}
	return ""
}

func (x *ExecutionReport) GetOrderId() string {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return ""
}

func (x *ExecutionReport) GetVenueOrderId() string {
	if x != nil && x.VenueOrderId != nil {
		return *x.VenueOrderId
	}
	return ""
}

func (x *ExecutionReport) GetClientOrderId() string {
	if x != nil && x.ClientOrderId != nil {
		return *x.ClientOrderId
	}
	return ""
}

func (x *ExecutionReport) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *ExecutionReport) GetVenueId() string {
	if x != nil && x.VenueId != nil {
		return *x.VenueId
	}
	return ""
}

func (x *ExecutionReport) GetVenueSymbol() string {
	if x != nil && x.VenueSymbol != nil {
		return *x.VenueSymbol
	}
	return ""
}

func (x *ExecutionReport) GetAssetId() string {
	if x != nil && x.AssetId != nil {
		return *x.AssetId
	}
	return ""
}

func (x *ExecutionReport) GetQuoteAssetId() string {
	if x != nil && x.QuoteAssetId != nil {
		return *x.QuoteAssetId
	}
	return ""
}

func (x *ExecutionReport) GetExecutionType() ExecutionType {
	if x != nil && x.ExecutionType != nil {
		return *x.ExecutionType
	}
	return ExecutionType_EXECUTION_TYPE_UNSPECIFIED
}

func (x *ExecutionReport) GetOrderStatus() string {
	if x != nil && x.OrderStatus != nil {
		return *x.OrderStatus
	}
	return ""
}

func (x *ExecutionReport) GetSide() string {
	if x != nil && x.Side != nil {
		return *x.Side
	}
	return ""
}

func (x *ExecutionReport) GetOrderType() string {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return ""
}

func (x *ExecutionReport) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ExecutionReport) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *ExecutionReport) GetQuantity() float64 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

func (x *ExecutionReport) GetCumulativeQuantity() float64 {
	if x != nil && x.CumulativeQuantity != nil {
		return *x.CumulativeQuantity
	}
	return 0
}

func (x *ExecutionReport) GetRemainingQuantity() float64 {
	if x != nil && x.RemainingQuantity != nil {
		return *x.RemainingQuantity
	}
	return 0
}

func (x *ExecutionReport) GetFee() float64 {
	if x != nil && x.Fee != nil {
		return *x.Fee
	}
	return 0
}

func (x *ExecutionReport) GetFeeAssetId() string {
	if x != nil && x.FeeAssetId != nil {
		return *x.FeeAssetId
	}
	return ""
}

func (x *ExecutionReport) GetCommissionRate() float64 {
	if x != nil && x.CommissionRate != nil {
		return *x.CommissionRate
	}
	return 0
}

func (x *ExecutionReport) GetTradeId() string {
	if x != nil && x.TradeId != nil {
		return *x.TradeId
	}
	return ""
}

func (x *ExecutionReport) GetIsMaker() bool {
	if x != nil && x.IsMaker != nil {
		return *x.IsMaker
	}
	return false
}

func (x *ExecutionReport) GetTxHash() string {
	if x != nil && x.TxHash != nil {
		return *x.TxHash
	}
	return ""
}

func (x *ExecutionReport) GetBlockNumber() int64 {
	if x != nil && x.BlockNumber != nil {
		return *x.BlockNumber
	}
	return 0
}

func (x *ExecutionReport) GetLiquidity() string {
	if x != nil && x.Liquidity != nil {
		return *x.Liquidity
	}
	return ""
}

func (x *ExecutionReport) GetVenueExecutionId() string {
	if x != nil && x.VenueExecutionId != nil {
		return *x.VenueExecutionId
	}
	return ""
}

func (x *ExecutionReport) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *ExecutionReport) GetAverageFillPrice() float64 {
	if x != nil && x.AverageFillPrice != nil {
		return *x.AverageFillPrice
	}
	return 0
}

func (x *ExecutionReport) GetRejectionReason() string {
	if x != nil && x.RejectionReason != nil {
		return *x.RejectionReason
	}
	return ""
}

func (x *ExecutionReport) GetOrderUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.OrderUpdatedAt
	}
	return nil
}

var File_proto_venues_v1_execution_proto protoreflect.FileDescriptor

const file_proto_venues_v1_execution_proto_rawDesc = "" +
	"\n" +
	"\x1fproto/venues/v1/execution.proto\x12\rcqc.venues.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"\xd9\b\n" +
	"\aBalance\x12\"\n" +
	"\n" +
	"balance_id\x18\x01 \x01(\tH\x00R\tbalanceId\x88\x01\x01\x12\"\n" +
	"\n" +
	"account_id\x18\x02 \x01(\tH\x01R\taccountId\x88\x01\x01\x12\x1e\n" +
	"\bvenue_id\x18\x03 \x01(\tH\x02R\avenueId\x88\x01\x01\x12\x1e\n" +
	"\basset_id\x18\x04 \x01(\tH\x03R\aassetId\x88\x01\x01\x12B\n" +
	"\fbalance_type\x18\x05 \x01(\x0e2\x1a.cqc.venues.v1.BalanceTypeH\x04R\vbalanceType\x88\x01\x01\x12\x19\n" +
	"\x05total\x18\x06 \x01(\x01H\x05R\x05total\x88\x01\x01\x12!\n" +
	"\tavailable\x18\a \x01(\x01H\x06R\tavailable\x88\x01\x01\x12\x1b\n" +
	"\x06locked\x18\b \x01(\x01H\aR\x06locked\x88\x01\x01\x12\x1f\n" +
	"\breserved\x18\t \x01(\x01H\bR\breserved\x88\x01\x01\x12\x1f\n" +
	"\bborrowed\x18\n" +
	" \x01(\x01H\tR\bborrowed\x88\x01\x01\x12\x1f\n" +
	"\binterest\x18\v \x01(\x01H\n" +
	"R\binterest\x88\x01\x01\x12 \n" +
	"\tusd_value\x18\f \x01(\x01H\vR\busdValue\x88\x01\x01\x12=\n" +
	"\ttimestamp\x18\r \x01(\v2\x1a.google.protobuf.TimestampH\fR\ttimestamp\x88\x01\x01\x12>\n" +
	"\n" +
	"updated_at\x18\x0e \x01(\v2\x1a.google.protobuf.TimestampH\rR\tupdatedAt\x88\x01\x01\x12*\n" +
	"\x0ewallet_address\x18\x0f \x01(\tH\x0eR\rwalletAddress\x88\x01\x01\x12\x1e\n" +
	"\bchain_id\x18\x10 \x01(\tH\x0fR\achainId\x88\x01\x01\x12'\n" +
	"\fwithdrawable\x18\x11 \x01(\bH\x10R\fwithdrawable\x88\x01\x01\x12!\n" +
	"\ttradeable\x18\x12 \x01(\bH\x11R\ttradeable\x88\x01\x01\x12@\n" +
	"\vunlock_time\x18\x13 \x01(\v2\x1a.google.protobuf.TimestampH\x12R\n" +
	"unlockTime\x88\x01\x01\x12\x15\n" +
	"\x03apr\x18\x14 \x01(\x01H\x13R\x03apr\x88\x01\x01\x12\x15\n" +
	"\x03apy\x18\x15 \x01(\x01H\x14R\x03apy\x88\x01\x01B\r\n" +
	"\v_balance_idB\r\n" +
	"\v_account_idB\v\n" +
	"\t_venue_idB\v\n" +
	"\t_asset_idB\x0f\n" +
	"\r_balance_typeB\b\n" +
	"\x06_totalB\f\n" +
	"\n" +
	"_availableB\t\n" +
	"\a_lockedB\v\n" +
	"\t_reservedB\v\n" +
	"\t_borrowedB\v\n" +
	"\t_interestB\f\n" +
	"\n" +
	"_usd_valueB\f\n" +
	"\n" +
	"_timestampB\r\n" +
	"\v_updated_atB\x11\n" +
	"\x0f_wallet_addressB\v\n" +
	"\t_chain_idB\x0f\n" +
	"\r_withdrawableB\f\n" +
	"\n" +
	"_tradeableB\x0e\n" +
	"\f_unlock_timeB\x06\n" +
	"\x04_aprB\x06\n" +
	"\x04_apy\"\x83\x0e\n" +
	"\x0fExecutionReport\x12&\n" +
	"\fexecution_id\x18\x01 \x01(\tH\x00R\vexecutionId\x88\x01\x01\x12\x1e\n" +
	"\border_id\x18\x02 \x01(\tH\x01R\aorderId\x88\x01\x01\x12)\n" +
	"\x0evenue_order_id\x18\x03 \x01(\tH\x02R\fvenueOrderId\x88\x01\x01\x12+\n" +
	"\x0fclient_order_id\x18\x04 \x01(\tH\x03R\rclientOrderId\x88\x01\x01\x12\"\n" +
	"\n" +
	"account_id\x18\x05 \x01(\tH\x04R\taccountId\x88\x01\x01\x12\x1e\n" +
	"\bvenue_id\x18\x06 \x01(\tH\x05R\avenueId\x88\x01\x01\x12&\n" +
	"\fvenue_symbol\x18\a \x01(\tH\x06R\vvenueSymbol\x88\x01\x01\x12\x1e\n" +
	"\basset_id\x18\b \x01(\tH\aR\aassetId\x88\x01\x01\x12)\n" +
	"\x0equote_asset_id\x18\t \x01(\tH\bR\fquoteAssetId\x88\x01\x01\x12H\n" +
	"\x0eexecution_type\x18\n" +
	" \x01(\x0e2\x1c.cqc.venues.v1.ExecutionTypeH\tR\rexecutionType\x88\x01\x01\x12&\n" +
	"\forder_status\x18\v \x01(\tH\n" +
	"R\vorderStatus\x88\x01\x01\x12\x17\n" +
	"\x04side\x18\f \x01(\tH\vR\x04side\x88\x01\x01\x12\"\n" +
	"\n" +
	"order_type\x18\r \x01(\tH\fR\torderType\x88\x01\x01\x12=\n" +
	"\ttimestamp\x18\x0e \x01(\v2\x1a.google.protobuf.TimestampH\rR\ttimestamp\x88\x01\x01\x12\x19\n" +
	"\x05price\x18\x0f \x01(\x01H\x0eR\x05price\x88\x01\x01\x12\x1f\n" +
	"\bquantity\x18\x10 \x01(\x01H\x0fR\bquantity\x88\x01\x01\x124\n" +
	"\x13cumulative_quantity\x18\x11 \x01(\x01H\x10R\x12cumulativeQuantity\x88\x01\x01\x122\n" +
	"\x12remaining_quantity\x18\x12 \x01(\x01H\x11R\x11remainingQuantity\x88\x01\x01\x12\x15\n" +
	"\x03fee\x18\x13 \x01(\x01H\x12R\x03fee\x88\x01\x01\x12%\n" +
	"\ffee_asset_id\x18\x14 \x01(\tH\x13R\n" +
	"feeAssetId\x88\x01\x01\x12,\n" +
	"\x0fcommission_rate\x18\x15 \x01(\x01H\x14R\x0ecommissionRate\x88\x01\x01\x12\x1e\n" +
	"\btrade_id\x18\x16 \x01(\tH\x15R\atradeId\x88\x01\x01\x12\x1e\n" +
	"\bis_maker\x18\x17 \x01(\bH\x16R\aisMaker\x88\x01\x01\x12\x1c\n" +
	"\atx_hash\x18\x18 \x01(\tH\x17R\x06txHash\x88\x01\x01\x12&\n" +
	"\fblock_number\x18\x19 \x01(\x03H\x18R\vblockNumber\x88\x01\x01\x12!\n" +
	"\tliquidity\x18\x1a \x01(\tH\x19R\tliquidity\x88\x01\x01\x121\n" +
	"\x12venue_execution_id\x18\x1b \x01(\tH\x1aR\x10venueExecutionId\x88\x01\x01\x12\x19\n" +
	"\x05value\x18\x1c \x01(\x01H\x1bR\x05value\x88\x01\x01\x121\n" +
	"\x12average_fill_price\x18\x1d \x01(\x01H\x1cR\x10averageFillPrice\x88\x01\x01\x12.\n" +
	"\x10rejection_reason\x18\x1e \x01(\tH\x1dR\x0frejectionReason\x88\x01\x01\x12I\n" +
	"\x10order_updated_at\x18\x1f \x01(\v2\x1a.google.protobuf.TimestampH\x1eR\x0eorderUpdatedAt\x88\x01\x01B\x0f\n" +
	"\r_execution_idB\v\n" +
	"\t_order_idB\x11\n" +
	"\x0f_venue_order_idB\x12\n" +
	"\x10_client_order_idB\r\n" +
	"\v_account_idB\v\n" +
	"\t_venue_idB\x0f\n" +
	"\r_venue_symbolB\v\n" +
	"\t_asset_idB\x11\n" +
	"\x0f_quote_asset_idB\x11\n" +
	"\x0f_execution_typeB\x0f\n" +
	"\r_order_statusB\a\n" +
	"\x05_sideB\r\n" +
	"\v_order_typeB\f\n" +
	"\n" +
	"_timestampB\b\n" +
	"\x06_priceB\v\n" +
	"\t_quantityB\x16\n" +
	"\x14_cumulative_quantityB\x15\n" +
	"\x13_remaining_quantityB\x06\n" +
	"\x04_feeB\x0f\n" +
	"\r_fee_asset_idB\x12\n" +
	"\x10_commission_rateB\v\n" +
	"\t_trade_idB\v\n" +
	"\t_is_makerB\n" +
	"\n" +
	"\b_tx_hashB\x0f\n" +
	"\r_block_numberB\f\n" +
	"\n" +
	"_liquidityB\x15\n" +
	"\x13_venue_execution_idB\b\n" +
	"\x06_valueB\x15\n" +
	"\x13_average_fill_priceB\x13\n" +
	"\x11_rejection_reasonB\x13\n" +
	"\x11_order_updated_at*\xf7\x01\n" +
	"\vBalanceType\x12\x1c\n" +
	"\x18BALANCE_TYPE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11BALANCE_TYPE_SPOT\x10\x01\x12\x17\n" +
	"\x13BALANCE_TYPE_MARGIN\x10\x02\x12\x18\n" +
	"\x14BALANCE_TYPE_FUTURES\x10\x03\x12\x18\n" +
	"\x14BALANCE_TYPE_LENDING\x10\x04\x12\x1a\n" +
	"\x16BALANCE_TYPE_BORROWING\x10\x05\x12\x17\n" +
	"\x13BALANCE_TYPE_STAKED\x10\x06\x12\x17\n" +
	"\x13BALANCE_TYPE_LOCKED\x10\a\x12\x18\n" +
	"\x14BALANCE_TYPE_REWARDS\x10\b*\x8f\x02\n" +
	"\rExecutionType\x12\x1e\n" +
	"\x1aEXECUTION_TYPE_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12EXECUTION_TYPE_NEW\x10\x01\x12\x1f\n" +
	"\x1bEXECUTION_TYPE_PARTIAL_FILL\x10\x02\x12\x17\n" +
	"\x13EXECUTION_TYPE_FILL\x10\x03\x12\x1c\n" +
	"\x18EXECUTION_TYPE_CANCELLED\x10\x04\x12\x1b\n" +
	"\x17EXECUTION_TYPE_REPLACED\x10\x05\x12\x1b\n" +
	"\x17EXECUTION_TYPE_REJECTED\x10\x06\x12\x1a\n" +
	"\x16EXECUTION_TYPE_EXPIRED\x10\a\x12\x18\n" +
	"\x14EXECUTION_TYPE_TRADE\x10\bB>Z<github.com/Combine-Capital/cqc/gen/go/cqc/venues/v1;venuesv1b\x06proto3"

var (
	file_proto_venues_v1_execution_proto_rawDescOnce sync.Once
	file_proto_venues_v1_execution_proto_rawDescData []byte
)

func file_proto_venues_v1_execution_proto_rawDescGZIP() []byte {
	file_proto_venues_v1_execution_proto_rawDescOnce.Do(func() {
		file_proto_venues_v1_execution_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_venues_v1_execution_proto_rawDesc), len(file_proto_venues_v1_execution_proto_rawDesc)))
	})
	return file_proto_venues_v1_execution_proto_rawDescData
}

var file_proto_venues_v1_execution_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_venues_v1_execution_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_venues_v1_execution_proto_goTypes = []any{
	(BalanceType)(0),            // 0: cqc.venues.v1.BalanceType
	(ExecutionType)(0),          // 1: cqc.venues.v1.ExecutionType
	(*Balance)(nil),             // 2: cqc.venues.v1.Balance
	(*ExecutionReport)(nil),     // 3: cqc.venues.v1.ExecutionReport
	(*timestamp.Timestamp)(nil), // 4: google.protobuf.Timestamp
}
var file_proto_venues_v1_execution_proto_depIdxs = []int32{
	0, // 0: cqc.venues.v1.Balance.balance_type:type_name -> cqc.venues.v1.BalanceType
	4, // 1: cqc.venues.v1.Balance.timestamp:type_name -> google.protobuf.Timestamp
	4, // 2: cqc.venues.v1.Balance.updated_at:type_name -> google.protobuf.Timestamp
	4, // 3: cqc.venues.v1.Balance.unlock_time:type_name -> google.protobuf.Timestamp
	1, // 4: cqc.venues.v1.ExecutionReport.execution_type:type_name -> cqc.venues.v1.ExecutionType
	4, // 5: cqc.venues.v1.ExecutionReport.timestamp:type_name -> google.protobuf.Timestamp
	4, // 6: cqc.venues.v1.ExecutionReport.order_updated_at:type_name -> google.protobuf.Timestamp
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_proto_venues_v1_execution_proto_init() }
func file_proto_venues_v1_execution_proto_init() {
	if File_proto_venues_v1_execution_proto != nil {
		return
	}
	file_proto_venues_v1_execution_proto_msgTypes[0].OneofWrappers = []any{}
	file_proto_venues_v1_execution_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_venues_v1_execution_proto_rawDesc), len(file_proto_venues_v1_execution_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_venues_v1_execution_proto_goTypes,
		DependencyIndexes: file_proto_venues_v1_execution_proto_depIdxs,
		EnumInfos:         file_proto_venues_v1_execution_proto_enumTypes,
		MessageInfos:      file_proto_venues_v1_execution_proto_msgTypes,
	}.Build()
	File_proto_venues_v1_execution_proto = out.File
	file_proto_venues_v1_execution_proto_goTypes = nil
	file_proto_venues_v1_execution_proto_depIdxs = nil
}

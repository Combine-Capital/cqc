// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v3.12.4
// source: proto/venues/v1/order.proto

package venuesv1

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// OrderType represents the type of order.
type OrderType int32

const (
	OrderType_ORDER_TYPE_UNSPECIFIED   OrderType = 0
	OrderType_ORDER_TYPE_MARKET        OrderType = 1 // Execute immediately at best available price
	OrderType_ORDER_TYPE_LIMIT         OrderType = 2 // Execute at specified price or better
	OrderType_ORDER_TYPE_STOP_LOSS     OrderType = 3 // Market order triggered at stop price
	OrderType_ORDER_TYPE_STOP_LIMIT    OrderType = 4 // Limit order triggered at stop price
	OrderType_ORDER_TYPE_TRAILING_STOP OrderType = 5 // Stop that moves with market price
	OrderType_ORDER_TYPE_POST_ONLY     OrderType = 6 // Limit order that only adds liquidity
	OrderType_ORDER_TYPE_IOC           OrderType = 7 // Immediate-or-cancel
	OrderType_ORDER_TYPE_FOK           OrderType = 8 // Fill-or-kill (complete fill or cancel)
	OrderType_ORDER_TYPE_GTC           OrderType = 9 // Good-til-cancelled
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0: "ORDER_TYPE_UNSPECIFIED",
		1: "ORDER_TYPE_MARKET",
		2: "ORDER_TYPE_LIMIT",
		3: "ORDER_TYPE_STOP_LOSS",
		4: "ORDER_TYPE_STOP_LIMIT",
		5: "ORDER_TYPE_TRAILING_STOP",
		6: "ORDER_TYPE_POST_ONLY",
		7: "ORDER_TYPE_IOC",
		8: "ORDER_TYPE_FOK",
		9: "ORDER_TYPE_GTC",
	}
	OrderType_value = map[string]int32{
		"ORDER_TYPE_UNSPECIFIED":   0,
		"ORDER_TYPE_MARKET":        1,
		"ORDER_TYPE_LIMIT":         2,
		"ORDER_TYPE_STOP_LOSS":     3,
		"ORDER_TYPE_STOP_LIMIT":    4,
		"ORDER_TYPE_TRAILING_STOP": 5,
		"ORDER_TYPE_POST_ONLY":     6,
		"ORDER_TYPE_IOC":           7,
		"ORDER_TYPE_FOK":           8,
		"ORDER_TYPE_GTC":           9,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_venues_v1_order_proto_enumTypes[0].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_proto_venues_v1_order_proto_enumTypes[0]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_proto_venues_v1_order_proto_rawDescGZIP(), []int{0}
}

// OrderSide represents whether the order is a buy or sell.
type OrderSide int32

const (
	OrderSide_ORDER_SIDE_UNSPECIFIED OrderSide = 0
	OrderSide_ORDER_SIDE_BUY         OrderSide = 1 // Buy order (long)
	OrderSide_ORDER_SIDE_SELL        OrderSide = 2 // Sell order (short)
)

// Enum value maps for OrderSide.
var (
	OrderSide_name = map[int32]string{
		0: "ORDER_SIDE_UNSPECIFIED",
		1: "ORDER_SIDE_BUY",
		2: "ORDER_SIDE_SELL",
	}
	OrderSide_value = map[string]int32{
		"ORDER_SIDE_UNSPECIFIED": 0,
		"ORDER_SIDE_BUY":         1,
		"ORDER_SIDE_SELL":        2,
	}
)

func (x OrderSide) Enum() *OrderSide {
	p := new(OrderSide)
	*p = x
	return p
}

func (x OrderSide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderSide) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_venues_v1_order_proto_enumTypes[1].Descriptor()
}

func (OrderSide) Type() protoreflect.EnumType {
	return &file_proto_venues_v1_order_proto_enumTypes[1]
}

func (x OrderSide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderSide.Descriptor instead.
func (OrderSide) EnumDescriptor() ([]byte, []int) {
	return file_proto_venues_v1_order_proto_rawDescGZIP(), []int{1}
}

// OrderStatus represents the current state of an order.
type OrderStatus int32

const (
	OrderStatus_ORDER_STATUS_UNSPECIFIED      OrderStatus = 0
	OrderStatus_ORDER_STATUS_PENDING          OrderStatus = 1 // Order created but not yet submitted
	OrderStatus_ORDER_STATUS_SUBMITTED        OrderStatus = 2 // Order submitted to venue
	OrderStatus_ORDER_STATUS_OPEN             OrderStatus = 3 // Order active on venue order book
	OrderStatus_ORDER_STATUS_PARTIALLY_FILLED OrderStatus = 4 // Order partially executed
	OrderStatus_ORDER_STATUS_FILLED           OrderStatus = 5 // Order fully executed
	OrderStatus_ORDER_STATUS_CANCELLED        OrderStatus = 6 // Order cancelled by user
	OrderStatus_ORDER_STATUS_REJECTED         OrderStatus = 7 // Order rejected by venue
	OrderStatus_ORDER_STATUS_EXPIRED          OrderStatus = 8 // Order expired (time-based orders)
	OrderStatus_ORDER_STATUS_FAILED           OrderStatus = 9 // Order failed due to error
)

// Enum value maps for OrderStatus.
var (
	OrderStatus_name = map[int32]string{
		0: "ORDER_STATUS_UNSPECIFIED",
		1: "ORDER_STATUS_PENDING",
		2: "ORDER_STATUS_SUBMITTED",
		3: "ORDER_STATUS_OPEN",
		4: "ORDER_STATUS_PARTIALLY_FILLED",
		5: "ORDER_STATUS_FILLED",
		6: "ORDER_STATUS_CANCELLED",
		7: "ORDER_STATUS_REJECTED",
		8: "ORDER_STATUS_EXPIRED",
		9: "ORDER_STATUS_FAILED",
	}
	OrderStatus_value = map[string]int32{
		"ORDER_STATUS_UNSPECIFIED":      0,
		"ORDER_STATUS_PENDING":          1,
		"ORDER_STATUS_SUBMITTED":        2,
		"ORDER_STATUS_OPEN":             3,
		"ORDER_STATUS_PARTIALLY_FILLED": 4,
		"ORDER_STATUS_FILLED":           5,
		"ORDER_STATUS_CANCELLED":        6,
		"ORDER_STATUS_REJECTED":         7,
		"ORDER_STATUS_EXPIRED":          8,
		"ORDER_STATUS_FAILED":           9,
	}
)

func (x OrderStatus) Enum() *OrderStatus {
	p := new(OrderStatus)
	*p = x
	return p
}

func (x OrderStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_venues_v1_order_proto_enumTypes[2].Descriptor()
}

func (OrderStatus) Type() protoreflect.EnumType {
	return &file_proto_venues_v1_order_proto_enumTypes[2]
}

func (x OrderStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderStatus.Descriptor instead.
func (OrderStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_venues_v1_order_proto_rawDescGZIP(), []int{2}
}

// TimeInForce represents how long an order remains active.
type TimeInForce int32

const (
	TimeInForce_TIME_IN_FORCE_UNSPECIFIED TimeInForce = 0
	TimeInForce_TIME_IN_FORCE_GTC         TimeInForce = 1 // Good-til-cancelled
	TimeInForce_TIME_IN_FORCE_IOC         TimeInForce = 2 // Immediate-or-cancel
	TimeInForce_TIME_IN_FORCE_FOK         TimeInForce = 3 // Fill-or-kill
	TimeInForce_TIME_IN_FORCE_GTD         TimeInForce = 4 // Good-til-date
	TimeInForce_TIME_IN_FORCE_DAY         TimeInForce = 5 // Day order (expires at end of trading day)
)

// Enum value maps for TimeInForce.
var (
	TimeInForce_name = map[int32]string{
		0: "TIME_IN_FORCE_UNSPECIFIED",
		1: "TIME_IN_FORCE_GTC",
		2: "TIME_IN_FORCE_IOC",
		3: "TIME_IN_FORCE_FOK",
		4: "TIME_IN_FORCE_GTD",
		5: "TIME_IN_FORCE_DAY",
	}
	TimeInForce_value = map[string]int32{
		"TIME_IN_FORCE_UNSPECIFIED": 0,
		"TIME_IN_FORCE_GTC":         1,
		"TIME_IN_FORCE_IOC":         2,
		"TIME_IN_FORCE_FOK":         3,
		"TIME_IN_FORCE_GTD":         4,
		"TIME_IN_FORCE_DAY":         5,
	}
)

func (x TimeInForce) Enum() *TimeInForce {
	p := new(TimeInForce)
	*p = x
	return p
}

func (x TimeInForce) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeInForce) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_venues_v1_order_proto_enumTypes[3].Descriptor()
}

func (TimeInForce) Type() protoreflect.EnumType {
	return &file_proto_venues_v1_order_proto_enumTypes[3]
}

func (x TimeInForce) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeInForce.Descriptor instead.
func (TimeInForce) EnumDescriptor() ([]byte, []int) {
	return file_proto_venues_v1_order_proto_rawDescGZIP(), []int{3}
}

// Order represents a trading order placed on a venue.
type Order struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique order identifier (internal system ID).
	OrderId *string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3,oneof" json:"order_id,omitempty"`
	// Venue-assigned order identifier.
	VenueOrderId *string `protobuf:"bytes,2,opt,name=venue_order_id,json=venueOrderId,proto3,oneof" json:"venue_order_id,omitempty"`
	// Client-provided order identifier for tracking.
	ClientOrderId *string `protobuf:"bytes,3,opt,name=client_order_id,json=clientOrderId,proto3,oneof" json:"client_order_id,omitempty"`
	// Portfolio identifier.
	PortfolioId *string `protobuf:"bytes,4,opt,name=portfolio_id,json=portfolioId,proto3,oneof" json:"portfolio_id,omitempty"`
	// Position identifier (for position-based orders).
	PositionId *string `protobuf:"bytes,5,opt,name=position_id,json=positionId,proto3,oneof" json:"position_id,omitempty"`
	// Venue account identifier.
	AccountId *string `protobuf:"bytes,6,opt,name=account_id,json=accountId,proto3,oneof" json:"account_id,omitempty"`
	// Venue where order is placed.
	VenueId *string `protobuf:"bytes,7,opt,name=venue_id,json=venueId,proto3,oneof" json:"venue_id,omitempty"`
	// Trading pair symbol on the venue.
	VenueSymbol *string `protobuf:"bytes,8,opt,name=venue_symbol,json=venueSymbol,proto3,oneof" json:"venue_symbol,omitempty"`
	// Asset identifier for base currency.
	AssetId *string `protobuf:"bytes,9,opt,name=asset_id,json=assetId,proto3,oneof" json:"asset_id,omitempty"`
	// Asset identifier for quote currency.
	QuoteAssetId *string `protobuf:"bytes,10,opt,name=quote_asset_id,json=quoteAssetId,proto3,oneof" json:"quote_asset_id,omitempty"`
	// Order type.
	OrderType *OrderType `protobuf:"varint,11,opt,name=order_type,json=orderType,proto3,enum=cqc.venues.v1.OrderType,oneof" json:"order_type,omitempty"`
	// Order side (buy or sell).
	Side *OrderSide `protobuf:"varint,12,opt,name=side,proto3,enum=cqc.venues.v1.OrderSide,oneof" json:"side,omitempty"`
	// Current order status.
	Status *OrderStatus `protobuf:"varint,13,opt,name=status,proto3,enum=cqc.venues.v1.OrderStatus,oneof" json:"status,omitempty"`
	// Time in force policy.
	TimeInForce *TimeInForce `protobuf:"varint,14,opt,name=time_in_force,json=timeInForce,proto3,enum=cqc.venues.v1.TimeInForce,oneof" json:"time_in_force,omitempty"`
	// Requested order quantity (base currency).
	Quantity *float64 `protobuf:"fixed64,15,opt,name=quantity,proto3,oneof" json:"quantity,omitempty"`
	// Filled quantity so far.
	FilledQuantity *float64 `protobuf:"fixed64,16,opt,name=filled_quantity,json=filledQuantity,proto3,oneof" json:"filled_quantity,omitempty"`
	// Remaining unfilled quantity.
	RemainingQuantity *float64 `protobuf:"fixed64,17,opt,name=remaining_quantity,json=remainingQuantity,proto3,oneof" json:"remaining_quantity,omitempty"`
	// Limit price (for limit orders).
	Price *float64 `protobuf:"fixed64,18,opt,name=price,proto3,oneof" json:"price,omitempty"`
	// Stop price (for stop orders).
	StopPrice *float64 `protobuf:"fixed64,19,opt,name=stop_price,json=stopPrice,proto3,oneof" json:"stop_price,omitempty"`
	// Average fill price across all executions.
	AverageFillPrice *float64 `protobuf:"fixed64,20,opt,name=average_fill_price,json=averageFillPrice,proto3,oneof" json:"average_fill_price,omitempty"`
	// Total value of order (quantity * price for limit, approximate for market).
	Value *float64 `protobuf:"fixed64,21,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Total fees paid for executions.
	TotalFees *float64 `protobuf:"fixed64,22,opt,name=total_fees,json=totalFees,proto3,oneof" json:"total_fees,omitempty"`
	// Asset in which fees are paid.
	FeeAssetId *string `protobuf:"bytes,23,opt,name=fee_asset_id,json=feeAssetId,proto3,oneof" json:"fee_asset_id,omitempty"`
	// Timestamp when order was created.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,24,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	// Timestamp when order was submitted to venue.
	SubmittedAt *timestamp.Timestamp `protobuf:"bytes,25,opt,name=submitted_at,json=submittedAt,proto3,oneof" json:"submitted_at,omitempty"`
	// Timestamp when order was last updated.
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,26,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	// Timestamp when order was filled or cancelled.
	ClosedAt *timestamp.Timestamp `protobuf:"bytes,27,opt,name=closed_at,json=closedAt,proto3,oneof" json:"closed_at,omitempty"`
	// Expiration timestamp (for GTD orders).
	ExpiresAt *timestamp.Timestamp `protobuf:"bytes,28,opt,name=expires_at,json=expiresAt,proto3,oneof" json:"expires_at,omitempty"`
	// Reduce-only flag (only reduces position, doesn't increase).
	ReduceOnly *bool `protobuf:"varint,29,opt,name=reduce_only,json=reduceOnly,proto3,oneof" json:"reduce_only,omitempty"`
	// Post-only flag (only adds liquidity, never takes).
	PostOnly *bool `protobuf:"varint,30,opt,name=post_only,json=postOnly,proto3,oneof" json:"post_only,omitempty"`
	// Leverage used for this order (for margin/futures).
	Leverage *float64 `protobuf:"fixed64,31,opt,name=leverage,proto3,oneof" json:"leverage,omitempty"`
	// Rejection reason (if status is REJECTED).
	RejectionReason *string `protobuf:"bytes,32,opt,name=rejection_reason,json=rejectionReason,proto3,oneof" json:"rejection_reason,omitempty"`
	// Strategy or bot identifier that placed this order.
	StrategyId *string `protobuf:"bytes,33,opt,name=strategy_id,json=strategyId,proto3,oneof" json:"strategy_id,omitempty"`
	// Notes or tags for this order.
	Notes *string `protobuf:"bytes,34,opt,name=notes,proto3,oneof" json:"notes,omitempty"`
	// Parent order ID (for multi-leg orders or OCO orders).
	ParentOrderId *string `protobuf:"bytes,35,opt,name=parent_order_id,json=parentOrderId,proto3,oneof" json:"parent_order_id,omitempty"`
	// Whether this is a simulated/paper trade.
	IsSimulated   *bool `protobuf:"varint,36,opt,name=is_simulated,json=isSimulated,proto3,oneof" json:"is_simulated,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Order) Reset() {
	*x = Order{}
	mi := &file_proto_venues_v1_order_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_proto_venues_v1_order_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_proto_venues_v1_order_proto_rawDescGZIP(), []int{0}
}

func (x *Order) GetOrderId() string {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return ""
}

func (x *Order) GetVenueOrderId() string {
	if x != nil && x.VenueOrderId != nil {
		return *x.VenueOrderId
	}
	return ""
}

func (x *Order) GetClientOrderId() string {
	if x != nil && x.ClientOrderId != nil {
		return *x.ClientOrderId
	}
	return ""
}

func (x *Order) GetPortfolioId() string {
	if x != nil && x.PortfolioId != nil {
		return *x.PortfolioId
	}
	return ""
}

func (x *Order) GetPositionId() string {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return ""
}

func (x *Order) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *Order) GetVenueId() string {
	if x != nil && x.VenueId != nil {
		return *x.VenueId
	}
	return ""
}

func (x *Order) GetVenueSymbol() string {
	if x != nil && x.VenueSymbol != nil {
		return *x.VenueSymbol
	}
	return ""
}

func (x *Order) GetAssetId() string {
	if x != nil && x.AssetId != nil {
		return *x.AssetId
	}
	return ""
}

func (x *Order) GetQuoteAssetId() string {
	if x != nil && x.QuoteAssetId != nil {
		return *x.QuoteAssetId
	}
	return ""
}

func (x *Order) GetOrderType() OrderType {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return OrderType_ORDER_TYPE_UNSPECIFIED
}

func (x *Order) GetSide() OrderSide {
	if x != nil && x.Side != nil {
		return *x.Side
	}
	return OrderSide_ORDER_SIDE_UNSPECIFIED
}

func (x *Order) GetStatus() OrderStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return OrderStatus_ORDER_STATUS_UNSPECIFIED
}

func (x *Order) GetTimeInForce() TimeInForce {
	if x != nil && x.TimeInForce != nil {
		return *x.TimeInForce
	}
	return TimeInForce_TIME_IN_FORCE_UNSPECIFIED
}

func (x *Order) GetQuantity() float64 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

func (x *Order) GetFilledQuantity() float64 {
	if x != nil && x.FilledQuantity != nil {
		return *x.FilledQuantity
	}
	return 0
}

func (x *Order) GetRemainingQuantity() float64 {
	if x != nil && x.RemainingQuantity != nil {
		return *x.RemainingQuantity
	}
	return 0
}

func (x *Order) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *Order) GetStopPrice() float64 {
	if x != nil && x.StopPrice != nil {
		return *x.StopPrice
	}
	return 0
}

func (x *Order) GetAverageFillPrice() float64 {
	if x != nil && x.AverageFillPrice != nil {
		return *x.AverageFillPrice
	}
	return 0
}

func (x *Order) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *Order) GetTotalFees() float64 {
	if x != nil && x.TotalFees != nil {
		return *x.TotalFees
	}
	return 0
}

func (x *Order) GetFeeAssetId() string {
	if x != nil && x.FeeAssetId != nil {
		return *x.FeeAssetId
	}
	return ""
}

func (x *Order) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Order) GetSubmittedAt() *timestamp.Timestamp {
	if x != nil {
		return x.SubmittedAt
	}
	return nil
}

func (x *Order) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Order) GetClosedAt() *timestamp.Timestamp {
	if x != nil {
		return x.ClosedAt
	}
	return nil
}

func (x *Order) GetExpiresAt() *timestamp.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *Order) GetReduceOnly() bool {
	if x != nil && x.ReduceOnly != nil {
		return *x.ReduceOnly
	}
	return false
}

func (x *Order) GetPostOnly() bool {
	if x != nil && x.PostOnly != nil {
		return *x.PostOnly
	}
	return false
}

func (x *Order) GetLeverage() float64 {
	if x != nil && x.Leverage != nil {
		return *x.Leverage
	}
	return 0
}

func (x *Order) GetRejectionReason() string {
	if x != nil && x.RejectionReason != nil {
		return *x.RejectionReason
	}
	return ""
}

func (x *Order) GetStrategyId() string {
	if x != nil && x.StrategyId != nil {
		return *x.StrategyId
	}
	return ""
}

func (x *Order) GetNotes() string {
	if x != nil && x.Notes != nil {
		return *x.Notes
	}
	return ""
}

func (x *Order) GetParentOrderId() string {
	if x != nil && x.ParentOrderId != nil {
		return *x.ParentOrderId
	}
	return ""
}

func (x *Order) GetIsSimulated() bool {
	if x != nil && x.IsSimulated != nil {
		return *x.IsSimulated
	}
	return false
}

var File_proto_venues_v1_order_proto protoreflect.FileDescriptor

const file_proto_venues_v1_order_proto_rawDesc = "" +
	"\n" +
	"\x1bproto/venues/v1/order.proto\x12\rcqc.venues.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"\xf3\x10\n" +
	"\x05Order\x12\x1e\n" +
	"\border_id\x18\x01 \x01(\tH\x00R\aorderId\x88\x01\x01\x12)\n" +
	"\x0evenue_order_id\x18\x02 \x01(\tH\x01R\fvenueOrderId\x88\x01\x01\x12+\n" +
	"\x0fclient_order_id\x18\x03 \x01(\tH\x02R\rclientOrderId\x88\x01\x01\x12&\n" +
	"\fportfolio_id\x18\x04 \x01(\tH\x03R\vportfolioId\x88\x01\x01\x12$\n" +
	"\vposition_id\x18\x05 \x01(\tH\x04R\n" +
	"positionId\x88\x01\x01\x12\"\n" +
	"\n" +
	"account_id\x18\x06 \x01(\tH\x05R\taccountId\x88\x01\x01\x12\x1e\n" +
	"\bvenue_id\x18\a \x01(\tH\x06R\avenueId\x88\x01\x01\x12&\n" +
	"\fvenue_symbol\x18\b \x01(\tH\aR\vvenueSymbol\x88\x01\x01\x12\x1e\n" +
	"\basset_id\x18\t \x01(\tH\bR\aassetId\x88\x01\x01\x12)\n" +
	"\x0equote_asset_id\x18\n" +
	" \x01(\tH\tR\fquoteAssetId\x88\x01\x01\x12<\n" +
	"\n" +
	"order_type\x18\v \x01(\x0e2\x18.cqc.venues.v1.OrderTypeH\n" +
	"R\torderType\x88\x01\x01\x121\n" +
	"\x04side\x18\f \x01(\x0e2\x18.cqc.venues.v1.OrderSideH\vR\x04side\x88\x01\x01\x127\n" +
	"\x06status\x18\r \x01(\x0e2\x1a.cqc.venues.v1.OrderStatusH\fR\x06status\x88\x01\x01\x12C\n" +
	"\rtime_in_force\x18\x0e \x01(\x0e2\x1a.cqc.venues.v1.TimeInForceH\rR\vtimeInForce\x88\x01\x01\x12\x1f\n" +
	"\bquantity\x18\x0f \x01(\x01H\x0eR\bquantity\x88\x01\x01\x12,\n" +
	"\x0ffilled_quantity\x18\x10 \x01(\x01H\x0fR\x0efilledQuantity\x88\x01\x01\x122\n" +
	"\x12remaining_quantity\x18\x11 \x01(\x01H\x10R\x11remainingQuantity\x88\x01\x01\x12\x19\n" +
	"\x05price\x18\x12 \x01(\x01H\x11R\x05price\x88\x01\x01\x12\"\n" +
	"\n" +
	"stop_price\x18\x13 \x01(\x01H\x12R\tstopPrice\x88\x01\x01\x121\n" +
	"\x12average_fill_price\x18\x14 \x01(\x01H\x13R\x10averageFillPrice\x88\x01\x01\x12\x19\n" +
	"\x05value\x18\x15 \x01(\x01H\x14R\x05value\x88\x01\x01\x12\"\n" +
	"\n" +
	"total_fees\x18\x16 \x01(\x01H\x15R\ttotalFees\x88\x01\x01\x12%\n" +
	"\ffee_asset_id\x18\x17 \x01(\tH\x16R\n" +
	"feeAssetId\x88\x01\x01\x12>\n" +
	"\n" +
	"created_at\x18\x18 \x01(\v2\x1a.google.protobuf.TimestampH\x17R\tcreatedAt\x88\x01\x01\x12B\n" +
	"\fsubmitted_at\x18\x19 \x01(\v2\x1a.google.protobuf.TimestampH\x18R\vsubmittedAt\x88\x01\x01\x12>\n" +
	"\n" +
	"updated_at\x18\x1a \x01(\v2\x1a.google.protobuf.TimestampH\x19R\tupdatedAt\x88\x01\x01\x12<\n" +
	"\tclosed_at\x18\x1b \x01(\v2\x1a.google.protobuf.TimestampH\x1aR\bclosedAt\x88\x01\x01\x12>\n" +
	"\n" +
	"expires_at\x18\x1c \x01(\v2\x1a.google.protobuf.TimestampH\x1bR\texpiresAt\x88\x01\x01\x12$\n" +
	"\vreduce_only\x18\x1d \x01(\bH\x1cR\n" +
	"reduceOnly\x88\x01\x01\x12 \n" +
	"\tpost_only\x18\x1e \x01(\bH\x1dR\bpostOnly\x88\x01\x01\x12\x1f\n" +
	"\bleverage\x18\x1f \x01(\x01H\x1eR\bleverage\x88\x01\x01\x12.\n" +
	"\x10rejection_reason\x18  \x01(\tH\x1fR\x0frejectionReason\x88\x01\x01\x12$\n" +
	"\vstrategy_id\x18! \x01(\tH R\n" +
	"strategyId\x88\x01\x01\x12\x19\n" +
	"\x05notes\x18\" \x01(\tH!R\x05notes\x88\x01\x01\x12+\n" +
	"\x0fparent_order_id\x18# \x01(\tH\"R\rparentOrderId\x88\x01\x01\x12&\n" +
	"\fis_simulated\x18$ \x01(\bH#R\visSimulated\x88\x01\x01B\v\n" +
	"\t_order_idB\x11\n" +
	"\x0f_venue_order_idB\x12\n" +
	"\x10_client_order_idB\x0f\n" +
	"\r_portfolio_idB\x0e\n" +
	"\f_position_idB\r\n" +
	"\v_account_idB\v\n" +
	"\t_venue_idB\x0f\n" +
	"\r_venue_symbolB\v\n" +
	"\t_asset_idB\x11\n" +
	"\x0f_quote_asset_idB\r\n" +
	"\v_order_typeB\a\n" +
	"\x05_sideB\t\n" +
	"\a_statusB\x10\n" +
	"\x0e_time_in_forceB\v\n" +
	"\t_quantityB\x12\n" +
	"\x10_filled_quantityB\x15\n" +
	"\x13_remaining_quantityB\b\n" +
	"\x06_priceB\r\n" +
	"\v_stop_priceB\x15\n" +
	"\x13_average_fill_priceB\b\n" +
	"\x06_valueB\r\n" +
	"\v_total_feesB\x0f\n" +
	"\r_fee_asset_idB\r\n" +
	"\v_created_atB\x0f\n" +
	"\r_submitted_atB\r\n" +
	"\v_updated_atB\f\n" +
	"\n" +
	"_closed_atB\r\n" +
	"\v_expires_atB\x0e\n" +
	"\f_reduce_onlyB\f\n" +
	"\n" +
	"_post_onlyB\v\n" +
	"\t_leverageB\x13\n" +
	"\x11_rejection_reasonB\x0e\n" +
	"\f_strategy_idB\b\n" +
	"\x06_notesB\x12\n" +
	"\x10_parent_order_idB\x0f\n" +
	"\r_is_simulated*\xfd\x01\n" +
	"\tOrderType\x12\x1a\n" +
	"\x16ORDER_TYPE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11ORDER_TYPE_MARKET\x10\x01\x12\x14\n" +
	"\x10ORDER_TYPE_LIMIT\x10\x02\x12\x18\n" +
	"\x14ORDER_TYPE_STOP_LOSS\x10\x03\x12\x19\n" +
	"\x15ORDER_TYPE_STOP_LIMIT\x10\x04\x12\x1c\n" +
	"\x18ORDER_TYPE_TRAILING_STOP\x10\x05\x12\x18\n" +
	"\x14ORDER_TYPE_POST_ONLY\x10\x06\x12\x12\n" +
	"\x0eORDER_TYPE_IOC\x10\a\x12\x12\n" +
	"\x0eORDER_TYPE_FOK\x10\b\x12\x12\n" +
	"\x0eORDER_TYPE_GTC\x10\t*P\n" +
	"\tOrderSide\x12\x1a\n" +
	"\x16ORDER_SIDE_UNSPECIFIED\x10\x00\x12\x12\n" +
	"\x0eORDER_SIDE_BUY\x10\x01\x12\x13\n" +
	"\x0fORDER_SIDE_SELL\x10\x02*\x9e\x02\n" +
	"\vOrderStatus\x12\x1c\n" +
	"\x18ORDER_STATUS_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14ORDER_STATUS_PENDING\x10\x01\x12\x1a\n" +
	"\x16ORDER_STATUS_SUBMITTED\x10\x02\x12\x15\n" +
	"\x11ORDER_STATUS_OPEN\x10\x03\x12!\n" +
	"\x1dORDER_STATUS_PARTIALLY_FILLED\x10\x04\x12\x17\n" +
	"\x13ORDER_STATUS_FILLED\x10\x05\x12\x1a\n" +
	"\x16ORDER_STATUS_CANCELLED\x10\x06\x12\x19\n" +
	"\x15ORDER_STATUS_REJECTED\x10\a\x12\x18\n" +
	"\x14ORDER_STATUS_EXPIRED\x10\b\x12\x17\n" +
	"\x13ORDER_STATUS_FAILED\x10\t*\x9f\x01\n" +
	"\vTimeInForce\x12\x1d\n" +
	"\x19TIME_IN_FORCE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11TIME_IN_FORCE_GTC\x10\x01\x12\x15\n" +
	"\x11TIME_IN_FORCE_IOC\x10\x02\x12\x15\n" +
	"\x11TIME_IN_FORCE_FOK\x10\x03\x12\x15\n" +
	"\x11TIME_IN_FORCE_GTD\x10\x04\x12\x15\n" +
	"\x11TIME_IN_FORCE_DAY\x10\x05B>Z<github.com/Combine-Capital/cqc/gen/go/cqc/venues/v1;venuesv1b\x06proto3"

var (
	file_proto_venues_v1_order_proto_rawDescOnce sync.Once
	file_proto_venues_v1_order_proto_rawDescData []byte
)

func file_proto_venues_v1_order_proto_rawDescGZIP() []byte {
	file_proto_venues_v1_order_proto_rawDescOnce.Do(func() {
		file_proto_venues_v1_order_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_venues_v1_order_proto_rawDesc), len(file_proto_venues_v1_order_proto_rawDesc)))
	})
	return file_proto_venues_v1_order_proto_rawDescData
}

var file_proto_venues_v1_order_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_proto_venues_v1_order_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_proto_venues_v1_order_proto_goTypes = []any{
	(OrderType)(0),              // 0: cqc.venues.v1.OrderType
	(OrderSide)(0),              // 1: cqc.venues.v1.OrderSide
	(OrderStatus)(0),            // 2: cqc.venues.v1.OrderStatus
	(TimeInForce)(0),            // 3: cqc.venues.v1.TimeInForce
	(*Order)(nil),               // 4: cqc.venues.v1.Order
	(*timestamp.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_proto_venues_v1_order_proto_depIdxs = []int32{
	0, // 0: cqc.venues.v1.Order.order_type:type_name -> cqc.venues.v1.OrderType
	1, // 1: cqc.venues.v1.Order.side:type_name -> cqc.venues.v1.OrderSide
	2, // 2: cqc.venues.v1.Order.status:type_name -> cqc.venues.v1.OrderStatus
	3, // 3: cqc.venues.v1.Order.time_in_force:type_name -> cqc.venues.v1.TimeInForce
	5, // 4: cqc.venues.v1.Order.created_at:type_name -> google.protobuf.Timestamp
	5, // 5: cqc.venues.v1.Order.submitted_at:type_name -> google.protobuf.Timestamp
	5, // 6: cqc.venues.v1.Order.updated_at:type_name -> google.protobuf.Timestamp
	5, // 7: cqc.venues.v1.Order.closed_at:type_name -> google.protobuf.Timestamp
	5, // 8: cqc.venues.v1.Order.expires_at:type_name -> google.protobuf.Timestamp
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_proto_venues_v1_order_proto_init() }
func file_proto_venues_v1_order_proto_init() {
	if File_proto_venues_v1_order_proto != nil {
		return
	}
	file_proto_venues_v1_order_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_venues_v1_order_proto_rawDesc), len(file_proto_venues_v1_order_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_venues_v1_order_proto_goTypes,
		DependencyIndexes: file_proto_venues_v1_order_proto_depIdxs,
		EnumInfos:         file_proto_venues_v1_order_proto_enumTypes,
		MessageInfos:      file_proto_venues_v1_order_proto_msgTypes,
	}.Build()
	File_proto_venues_v1_order_proto = out.File
	file_proto_venues_v1_order_proto_goTypes = nil
	file_proto_venues_v1_order_proto_depIdxs = nil
}

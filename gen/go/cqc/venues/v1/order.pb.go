// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: proto/venues/v1/order.proto

package venuesv1

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// OrderType represents the type of order.
type OrderType int32

const (
	OrderType_ORDER_TYPE_UNSPECIFIED   OrderType = 0
	OrderType_ORDER_TYPE_MARKET        OrderType = 1 // Execute immediately at best available price
	OrderType_ORDER_TYPE_LIMIT         OrderType = 2 // Execute at specified price or better
	OrderType_ORDER_TYPE_STOP_LOSS     OrderType = 3 // Market order triggered at stop price
	OrderType_ORDER_TYPE_STOP_LIMIT    OrderType = 4 // Limit order triggered at stop price
	OrderType_ORDER_TYPE_TRAILING_STOP OrderType = 5 // Stop that moves with market price
	OrderType_ORDER_TYPE_POST_ONLY     OrderType = 6 // Limit order that only adds liquidity
	OrderType_ORDER_TYPE_IOC           OrderType = 7 // Immediate-or-cancel
	OrderType_ORDER_TYPE_FOK           OrderType = 8 // Fill-or-kill (complete fill or cancel)
	OrderType_ORDER_TYPE_GTC           OrderType = 9 // Good-til-cancelled
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0: "ORDER_TYPE_UNSPECIFIED",
		1: "ORDER_TYPE_MARKET",
		2: "ORDER_TYPE_LIMIT",
		3: "ORDER_TYPE_STOP_LOSS",
		4: "ORDER_TYPE_STOP_LIMIT",
		5: "ORDER_TYPE_TRAILING_STOP",
		6: "ORDER_TYPE_POST_ONLY",
		7: "ORDER_TYPE_IOC",
		8: "ORDER_TYPE_FOK",
		9: "ORDER_TYPE_GTC",
	}
	OrderType_value = map[string]int32{
		"ORDER_TYPE_UNSPECIFIED":   0,
		"ORDER_TYPE_MARKET":        1,
		"ORDER_TYPE_LIMIT":         2,
		"ORDER_TYPE_STOP_LOSS":     3,
		"ORDER_TYPE_STOP_LIMIT":    4,
		"ORDER_TYPE_TRAILING_STOP": 5,
		"ORDER_TYPE_POST_ONLY":     6,
		"ORDER_TYPE_IOC":           7,
		"ORDER_TYPE_FOK":           8,
		"ORDER_TYPE_GTC":           9,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_venues_v1_order_proto_enumTypes[0].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_proto_venues_v1_order_proto_enumTypes[0]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_proto_venues_v1_order_proto_rawDescGZIP(), []int{0}
}

// OrderSide represents whether the order is a buy or sell.
type OrderSide int32

const (
	OrderSide_ORDER_SIDE_UNSPECIFIED OrderSide = 0
	OrderSide_ORDER_SIDE_BUY         OrderSide = 1 // Buy order (long)
	OrderSide_ORDER_SIDE_SELL        OrderSide = 2 // Sell order (short)
)

// Enum value maps for OrderSide.
var (
	OrderSide_name = map[int32]string{
		0: "ORDER_SIDE_UNSPECIFIED",
		1: "ORDER_SIDE_BUY",
		2: "ORDER_SIDE_SELL",
	}
	OrderSide_value = map[string]int32{
		"ORDER_SIDE_UNSPECIFIED": 0,
		"ORDER_SIDE_BUY":         1,
		"ORDER_SIDE_SELL":        2,
	}
)

func (x OrderSide) Enum() *OrderSide {
	p := new(OrderSide)
	*p = x
	return p
}

func (x OrderSide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderSide) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_venues_v1_order_proto_enumTypes[1].Descriptor()
}

func (OrderSide) Type() protoreflect.EnumType {
	return &file_proto_venues_v1_order_proto_enumTypes[1]
}

func (x OrderSide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderSide.Descriptor instead.
func (OrderSide) EnumDescriptor() ([]byte, []int) {
	return file_proto_venues_v1_order_proto_rawDescGZIP(), []int{1}
}

// OrderStatus represents the current state of an order.
type OrderStatus int32

const (
	OrderStatus_ORDER_STATUS_UNSPECIFIED      OrderStatus = 0
	OrderStatus_ORDER_STATUS_PENDING          OrderStatus = 1 // Order created but not yet submitted
	OrderStatus_ORDER_STATUS_SUBMITTED        OrderStatus = 2 // Order submitted to venue
	OrderStatus_ORDER_STATUS_OPEN             OrderStatus = 3 // Order active on venue order book
	OrderStatus_ORDER_STATUS_PARTIALLY_FILLED OrderStatus = 4 // Order partially executed
	OrderStatus_ORDER_STATUS_FILLED           OrderStatus = 5 // Order fully executed
	OrderStatus_ORDER_STATUS_CANCELLED        OrderStatus = 6 // Order cancelled by user
	OrderStatus_ORDER_STATUS_REJECTED         OrderStatus = 7 // Order rejected by venue
	OrderStatus_ORDER_STATUS_EXPIRED          OrderStatus = 8 // Order expired (time-based orders)
	OrderStatus_ORDER_STATUS_FAILED           OrderStatus = 9 // Order failed due to error
)

// Enum value maps for OrderStatus.
var (
	OrderStatus_name = map[int32]string{
		0: "ORDER_STATUS_UNSPECIFIED",
		1: "ORDER_STATUS_PENDING",
		2: "ORDER_STATUS_SUBMITTED",
		3: "ORDER_STATUS_OPEN",
		4: "ORDER_STATUS_PARTIALLY_FILLED",
		5: "ORDER_STATUS_FILLED",
		6: "ORDER_STATUS_CANCELLED",
		7: "ORDER_STATUS_REJECTED",
		8: "ORDER_STATUS_EXPIRED",
		9: "ORDER_STATUS_FAILED",
	}
	OrderStatus_value = map[string]int32{
		"ORDER_STATUS_UNSPECIFIED":      0,
		"ORDER_STATUS_PENDING":          1,
		"ORDER_STATUS_SUBMITTED":        2,
		"ORDER_STATUS_OPEN":             3,
		"ORDER_STATUS_PARTIALLY_FILLED": 4,
		"ORDER_STATUS_FILLED":           5,
		"ORDER_STATUS_CANCELLED":        6,
		"ORDER_STATUS_REJECTED":         7,
		"ORDER_STATUS_EXPIRED":          8,
		"ORDER_STATUS_FAILED":           9,
	}
)

func (x OrderStatus) Enum() *OrderStatus {
	p := new(OrderStatus)
	*p = x
	return p
}

func (x OrderStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_venues_v1_order_proto_enumTypes[2].Descriptor()
}

func (OrderStatus) Type() protoreflect.EnumType {
	return &file_proto_venues_v1_order_proto_enumTypes[2]
}

func (x OrderStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderStatus.Descriptor instead.
func (OrderStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_venues_v1_order_proto_rawDescGZIP(), []int{2}
}

// TimeInForce represents how long an order remains active.
type TimeInForce int32

const (
	TimeInForce_TIME_IN_FORCE_UNSPECIFIED TimeInForce = 0
	TimeInForce_TIME_IN_FORCE_GTC         TimeInForce = 1 // Good-til-cancelled
	TimeInForce_TIME_IN_FORCE_IOC         TimeInForce = 2 // Immediate-or-cancel
	TimeInForce_TIME_IN_FORCE_FOK         TimeInForce = 3 // Fill-or-kill
	TimeInForce_TIME_IN_FORCE_GTD         TimeInForce = 4 // Good-til-date
	TimeInForce_TIME_IN_FORCE_DAY         TimeInForce = 5 // Day order (expires at end of trading day)
)

// Enum value maps for TimeInForce.
var (
	TimeInForce_name = map[int32]string{
		0: "TIME_IN_FORCE_UNSPECIFIED",
		1: "TIME_IN_FORCE_GTC",
		2: "TIME_IN_FORCE_IOC",
		3: "TIME_IN_FORCE_FOK",
		4: "TIME_IN_FORCE_GTD",
		5: "TIME_IN_FORCE_DAY",
	}
	TimeInForce_value = map[string]int32{
		"TIME_IN_FORCE_UNSPECIFIED": 0,
		"TIME_IN_FORCE_GTC":         1,
		"TIME_IN_FORCE_IOC":         2,
		"TIME_IN_FORCE_FOK":         3,
		"TIME_IN_FORCE_GTD":         4,
		"TIME_IN_FORCE_DAY":         5,
	}
)

func (x TimeInForce) Enum() *TimeInForce {
	p := new(TimeInForce)
	*p = x
	return p
}

func (x TimeInForce) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeInForce) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_venues_v1_order_proto_enumTypes[3].Descriptor()
}

func (TimeInForce) Type() protoreflect.EnumType {
	return &file_proto_venues_v1_order_proto_enumTypes[3]
}

func (x TimeInForce) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeInForce.Descriptor instead.
func (TimeInForce) EnumDescriptor() ([]byte, []int) {
	return file_proto_venues_v1_order_proto_rawDescGZIP(), []int{3}
}

// Order represents a trading order placed on a venue.
type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique order identifier (internal system ID).
	OrderId *string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3,oneof" json:"order_id,omitempty"`
	// Venue-assigned order identifier.
	VenueOrderId *string `protobuf:"bytes,2,opt,name=venue_order_id,json=venueOrderId,proto3,oneof" json:"venue_order_id,omitempty"`
	// Client-provided order identifier for tracking.
	ClientOrderId *string `protobuf:"bytes,3,opt,name=client_order_id,json=clientOrderId,proto3,oneof" json:"client_order_id,omitempty"`
	// Portfolio identifier.
	PortfolioId *string `protobuf:"bytes,4,opt,name=portfolio_id,json=portfolioId,proto3,oneof" json:"portfolio_id,omitempty"`
	// Position identifier (for position-based orders).
	PositionId *string `protobuf:"bytes,5,opt,name=position_id,json=positionId,proto3,oneof" json:"position_id,omitempty"`
	// Venue account identifier.
	AccountId *string `protobuf:"bytes,6,opt,name=account_id,json=accountId,proto3,oneof" json:"account_id,omitempty"`
	// Venue where order is placed.
	VenueId *string `protobuf:"bytes,7,opt,name=venue_id,json=venueId,proto3,oneof" json:"venue_id,omitempty"`
	// Trading pair symbol on the venue.
	VenueSymbol *string `protobuf:"bytes,8,opt,name=venue_symbol,json=venueSymbol,proto3,oneof" json:"venue_symbol,omitempty"`
	// Asset identifier for base currency.
	AssetId *string `protobuf:"bytes,9,opt,name=asset_id,json=assetId,proto3,oneof" json:"asset_id,omitempty"`
	// Asset identifier for quote currency.
	QuoteAssetId *string `protobuf:"bytes,10,opt,name=quote_asset_id,json=quoteAssetId,proto3,oneof" json:"quote_asset_id,omitempty"`
	// Order type.
	OrderType *OrderType `protobuf:"varint,11,opt,name=order_type,json=orderType,proto3,enum=cqc.venues.v1.OrderType,oneof" json:"order_type,omitempty"`
	// Order side (buy or sell).
	Side *OrderSide `protobuf:"varint,12,opt,name=side,proto3,enum=cqc.venues.v1.OrderSide,oneof" json:"side,omitempty"`
	// Current order status.
	Status *OrderStatus `protobuf:"varint,13,opt,name=status,proto3,enum=cqc.venues.v1.OrderStatus,oneof" json:"status,omitempty"`
	// Time in force policy.
	TimeInForce *TimeInForce `protobuf:"varint,14,opt,name=time_in_force,json=timeInForce,proto3,enum=cqc.venues.v1.TimeInForce,oneof" json:"time_in_force,omitempty"`
	// Requested order quantity (base currency).
	Quantity *float64 `protobuf:"fixed64,15,opt,name=quantity,proto3,oneof" json:"quantity,omitempty"`
	// Filled quantity so far.
	FilledQuantity *float64 `protobuf:"fixed64,16,opt,name=filled_quantity,json=filledQuantity,proto3,oneof" json:"filled_quantity,omitempty"`
	// Remaining unfilled quantity.
	RemainingQuantity *float64 `protobuf:"fixed64,17,opt,name=remaining_quantity,json=remainingQuantity,proto3,oneof" json:"remaining_quantity,omitempty"`
	// Limit price (for limit orders).
	Price *float64 `protobuf:"fixed64,18,opt,name=price,proto3,oneof" json:"price,omitempty"`
	// Stop price (for stop orders).
	StopPrice *float64 `protobuf:"fixed64,19,opt,name=stop_price,json=stopPrice,proto3,oneof" json:"stop_price,omitempty"`
	// Average fill price across all executions.
	AverageFillPrice *float64 `protobuf:"fixed64,20,opt,name=average_fill_price,json=averageFillPrice,proto3,oneof" json:"average_fill_price,omitempty"`
	// Total value of order (quantity * price for limit, approximate for market).
	Value *float64 `protobuf:"fixed64,21,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Total fees paid for executions.
	TotalFees *float64 `protobuf:"fixed64,22,opt,name=total_fees,json=totalFees,proto3,oneof" json:"total_fees,omitempty"`
	// Asset in which fees are paid.
	FeeAssetId *string `protobuf:"bytes,23,opt,name=fee_asset_id,json=feeAssetId,proto3,oneof" json:"fee_asset_id,omitempty"`
	// Timestamp when order was created.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,24,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	// Timestamp when order was submitted to venue.
	SubmittedAt *timestamp.Timestamp `protobuf:"bytes,25,opt,name=submitted_at,json=submittedAt,proto3,oneof" json:"submitted_at,omitempty"`
	// Timestamp when order was last updated.
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,26,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	// Timestamp when order was filled or cancelled.
	ClosedAt *timestamp.Timestamp `protobuf:"bytes,27,opt,name=closed_at,json=closedAt,proto3,oneof" json:"closed_at,omitempty"`
	// Expiration timestamp (for GTD orders).
	ExpiresAt *timestamp.Timestamp `protobuf:"bytes,28,opt,name=expires_at,json=expiresAt,proto3,oneof" json:"expires_at,omitempty"`
	// Reduce-only flag (only reduces position, doesn't increase).
	ReduceOnly *bool `protobuf:"varint,29,opt,name=reduce_only,json=reduceOnly,proto3,oneof" json:"reduce_only,omitempty"`
	// Post-only flag (only adds liquidity, never takes).
	PostOnly *bool `protobuf:"varint,30,opt,name=post_only,json=postOnly,proto3,oneof" json:"post_only,omitempty"`
	// Leverage used for this order (for margin/futures).
	Leverage *float64 `protobuf:"fixed64,31,opt,name=leverage,proto3,oneof" json:"leverage,omitempty"`
	// Rejection reason (if status is REJECTED).
	RejectionReason *string `protobuf:"bytes,32,opt,name=rejection_reason,json=rejectionReason,proto3,oneof" json:"rejection_reason,omitempty"`
	// Strategy or bot identifier that placed this order.
	StrategyId *string `protobuf:"bytes,33,opt,name=strategy_id,json=strategyId,proto3,oneof" json:"strategy_id,omitempty"`
	// Notes or tags for this order.
	Notes *string `protobuf:"bytes,34,opt,name=notes,proto3,oneof" json:"notes,omitempty"`
	// Parent order ID (for multi-leg orders or OCO orders).
	ParentOrderId *string `protobuf:"bytes,35,opt,name=parent_order_id,json=parentOrderId,proto3,oneof" json:"parent_order_id,omitempty"`
	// Whether this is a simulated/paper trade.
	IsSimulated *bool `protobuf:"varint,36,opt,name=is_simulated,json=isSimulated,proto3,oneof" json:"is_simulated,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_venues_v1_order_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_proto_venues_v1_order_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_proto_venues_v1_order_proto_rawDescGZIP(), []int{0}
}

func (x *Order) GetOrderId() string {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return ""
}

func (x *Order) GetVenueOrderId() string {
	if x != nil && x.VenueOrderId != nil {
		return *x.VenueOrderId
	}
	return ""
}

func (x *Order) GetClientOrderId() string {
	if x != nil && x.ClientOrderId != nil {
		return *x.ClientOrderId
	}
	return ""
}

func (x *Order) GetPortfolioId() string {
	if x != nil && x.PortfolioId != nil {
		return *x.PortfolioId
	}
	return ""
}

func (x *Order) GetPositionId() string {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return ""
}

func (x *Order) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *Order) GetVenueId() string {
	if x != nil && x.VenueId != nil {
		return *x.VenueId
	}
	return ""
}

func (x *Order) GetVenueSymbol() string {
	if x != nil && x.VenueSymbol != nil {
		return *x.VenueSymbol
	}
	return ""
}

func (x *Order) GetAssetId() string {
	if x != nil && x.AssetId != nil {
		return *x.AssetId
	}
	return ""
}

func (x *Order) GetQuoteAssetId() string {
	if x != nil && x.QuoteAssetId != nil {
		return *x.QuoteAssetId
	}
	return ""
}

func (x *Order) GetOrderType() OrderType {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return OrderType_ORDER_TYPE_UNSPECIFIED
}

func (x *Order) GetSide() OrderSide {
	if x != nil && x.Side != nil {
		return *x.Side
	}
	return OrderSide_ORDER_SIDE_UNSPECIFIED
}

func (x *Order) GetStatus() OrderStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return OrderStatus_ORDER_STATUS_UNSPECIFIED
}

func (x *Order) GetTimeInForce() TimeInForce {
	if x != nil && x.TimeInForce != nil {
		return *x.TimeInForce
	}
	return TimeInForce_TIME_IN_FORCE_UNSPECIFIED
}

func (x *Order) GetQuantity() float64 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

func (x *Order) GetFilledQuantity() float64 {
	if x != nil && x.FilledQuantity != nil {
		return *x.FilledQuantity
	}
	return 0
}

func (x *Order) GetRemainingQuantity() float64 {
	if x != nil && x.RemainingQuantity != nil {
		return *x.RemainingQuantity
	}
	return 0
}

func (x *Order) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *Order) GetStopPrice() float64 {
	if x != nil && x.StopPrice != nil {
		return *x.StopPrice
	}
	return 0
}

func (x *Order) GetAverageFillPrice() float64 {
	if x != nil && x.AverageFillPrice != nil {
		return *x.AverageFillPrice
	}
	return 0
}

func (x *Order) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *Order) GetTotalFees() float64 {
	if x != nil && x.TotalFees != nil {
		return *x.TotalFees
	}
	return 0
}

func (x *Order) GetFeeAssetId() string {
	if x != nil && x.FeeAssetId != nil {
		return *x.FeeAssetId
	}
	return ""
}

func (x *Order) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Order) GetSubmittedAt() *timestamp.Timestamp {
	if x != nil {
		return x.SubmittedAt
	}
	return nil
}

func (x *Order) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Order) GetClosedAt() *timestamp.Timestamp {
	if x != nil {
		return x.ClosedAt
	}
	return nil
}

func (x *Order) GetExpiresAt() *timestamp.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *Order) GetReduceOnly() bool {
	if x != nil && x.ReduceOnly != nil {
		return *x.ReduceOnly
	}
	return false
}

func (x *Order) GetPostOnly() bool {
	if x != nil && x.PostOnly != nil {
		return *x.PostOnly
	}
	return false
}

func (x *Order) GetLeverage() float64 {
	if x != nil && x.Leverage != nil {
		return *x.Leverage
	}
	return 0
}

func (x *Order) GetRejectionReason() string {
	if x != nil && x.RejectionReason != nil {
		return *x.RejectionReason
	}
	return ""
}

func (x *Order) GetStrategyId() string {
	if x != nil && x.StrategyId != nil {
		return *x.StrategyId
	}
	return ""
}

func (x *Order) GetNotes() string {
	if x != nil && x.Notes != nil {
		return *x.Notes
	}
	return ""
}

func (x *Order) GetParentOrderId() string {
	if x != nil && x.ParentOrderId != nil {
		return *x.ParentOrderId
	}
	return ""
}

func (x *Order) GetIsSimulated() bool {
	if x != nil && x.IsSimulated != nil {
		return *x.IsSimulated
	}
	return false
}

var File_proto_venues_v1_order_proto protoreflect.FileDescriptor

var file_proto_venues_v1_order_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x63,
	0x71, 0x63, 0x2e, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf3, 0x10,
	0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0c, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c,
	0x69, 0x6f, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x07, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0b, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x07, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x0a, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x31, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x48, 0x0b, 0x52, 0x04, 0x73, 0x69,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x48, 0x0c, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x43,
	0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x48, 0x0d, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0e, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0f, 0x52,
	0x0e, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x48, 0x10,
	0x52, 0x11, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x01, 0x48, 0x11, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x01, 0x48, 0x12, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x13, 0x52, 0x10, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x48, 0x14, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x65,
	0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x48, 0x15, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x46, 0x65, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52,
	0x0a, 0x66, 0x65, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3e,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x17,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x42,
	0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x18, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x19, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x1a, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x3e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x1b, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x1c, 0x52, 0x0a, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x4f,
	0x6e, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x6f,
	0x6e, 0x6c, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x1d, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x1e, 0x52, 0x08, 0x6c, 0x65,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x0f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20,
	0x52, 0x0a, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x21,
	0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x22, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73, 0x69,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x48, 0x23, 0x52,
	0x0b, 0x69, 0x73, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69,
	0x6f, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x69, 0x64,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e,
	0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x6f,
	0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x65, 0x65, 0x5f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x5f, 0x61, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f,
	0x6f, 0x6e, 0x6c, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x73, 0x5f, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x2a, 0xfd, 0x01, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b,
	0x45, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x4f,
	0x53, 0x53, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x04, 0x12,
	0x1c, 0x0a, 0x18, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52,
	0x41, 0x49, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x05, 0x12, 0x18, 0x0a,
	0x14, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x54,
	0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4f, 0x43, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x4b, 0x10, 0x08, 0x12,
	0x12, 0x0a, 0x0e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x54,
	0x43, 0x10, 0x09, 0x2a, 0x50, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x42, 0x55, 0x59, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x53,
	0x45, 0x4c, 0x4c, 0x10, 0x02, 0x2a, 0x9e, 0x02, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1a, 0x0a,
	0x16, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55,
	0x42, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x03,
	0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x45,
	0x44, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x08, 0x12, 0x17, 0x0a,
	0x13, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x09, 0x2a, 0x9f, 0x01, 0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49,
	0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e,
	0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x54, 0x43, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x49, 0x4f,
	0x43, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x46,
	0x4f, 0x52, 0x43, 0x45, 0x5f, 0x46, 0x4f, 0x4b, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x54, 0x44, 0x10,
	0x04, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x46, 0x4f, 0x52,
	0x43, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x05, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x2d, 0x43,
	0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x2f, 0x63, 0x71, 0x63, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67,
	0x6f, 0x2f, 0x63, 0x71, 0x63, 0x2f, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x3b,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_venues_v1_order_proto_rawDescOnce sync.Once
	file_proto_venues_v1_order_proto_rawDescData = file_proto_venues_v1_order_proto_rawDesc
)

func file_proto_venues_v1_order_proto_rawDescGZIP() []byte {
	file_proto_venues_v1_order_proto_rawDescOnce.Do(func() {
		file_proto_venues_v1_order_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_venues_v1_order_proto_rawDescData)
	})
	return file_proto_venues_v1_order_proto_rawDescData
}

var file_proto_venues_v1_order_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_proto_venues_v1_order_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_proto_venues_v1_order_proto_goTypes = []interface{}{
	(OrderType)(0),              // 0: cqc.venues.v1.OrderType
	(OrderSide)(0),              // 1: cqc.venues.v1.OrderSide
	(OrderStatus)(0),            // 2: cqc.venues.v1.OrderStatus
	(TimeInForce)(0),            // 3: cqc.venues.v1.TimeInForce
	(*Order)(nil),               // 4: cqc.venues.v1.Order
	(*timestamp.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_proto_venues_v1_order_proto_depIdxs = []int32{
	0, // 0: cqc.venues.v1.Order.order_type:type_name -> cqc.venues.v1.OrderType
	1, // 1: cqc.venues.v1.Order.side:type_name -> cqc.venues.v1.OrderSide
	2, // 2: cqc.venues.v1.Order.status:type_name -> cqc.venues.v1.OrderStatus
	3, // 3: cqc.venues.v1.Order.time_in_force:type_name -> cqc.venues.v1.TimeInForce
	5, // 4: cqc.venues.v1.Order.created_at:type_name -> google.protobuf.Timestamp
	5, // 5: cqc.venues.v1.Order.submitted_at:type_name -> google.protobuf.Timestamp
	5, // 6: cqc.venues.v1.Order.updated_at:type_name -> google.protobuf.Timestamp
	5, // 7: cqc.venues.v1.Order.closed_at:type_name -> google.protobuf.Timestamp
	5, // 8: cqc.venues.v1.Order.expires_at:type_name -> google.protobuf.Timestamp
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_proto_venues_v1_order_proto_init() }
func file_proto_venues_v1_order_proto_init() {
	if File_proto_venues_v1_order_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_venues_v1_order_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_venues_v1_order_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_venues_v1_order_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_venues_v1_order_proto_goTypes,
		DependencyIndexes: file_proto_venues_v1_order_proto_depIdxs,
		EnumInfos:         file_proto_venues_v1_order_proto_enumTypes,
		MessageInfos:      file_proto_venues_v1_order_proto_msgTypes,
	}.Build()
	File_proto_venues_v1_order_proto = out.File
	file_proto_venues_v1_order_proto_rawDesc = nil
	file_proto_venues_v1_order_proto_goTypes = nil
	file_proto_venues_v1_order_proto_depIdxs = nil
}

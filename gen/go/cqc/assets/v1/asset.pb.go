// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: proto/assets/v1/asset.proto

package assetsv1

import (
	_struct "github.com/golang/protobuf/ptypes/struct"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AssetType represents the classification of an asset based on its technical implementation.
type AssetType int32

const (
	AssetType_ASSET_TYPE_UNSPECIFIED   AssetType = 0
	AssetType_ASSET_TYPE_NATIVE        AssetType = 1 // Native blockchain token (ETH, SOL, BTC)
	AssetType_ASSET_TYPE_ERC20         AssetType = 2 // Fungible token standard on EVM chains
	AssetType_ASSET_TYPE_SPL           AssetType = 3 // Solana Program Library token
	AssetType_ASSET_TYPE_ERC721        AssetType = 4 // Non-fungible token
	AssetType_ASSET_TYPE_ERC1155       AssetType = 5 // Multi-token standard
	AssetType_ASSET_TYPE_SYNTHETIC     AssetType = 6 // Synthetic/derivative representation
	AssetType_ASSET_TYPE_LP_TOKEN      AssetType = 7 // Liquidity provider token
	AssetType_ASSET_TYPE_RECEIPT_TOKEN AssetType = 8 // Receipt for deposited assets (aTokens, cTokens)
	AssetType_ASSET_TYPE_WRAPPED       AssetType = 9 // Wrapped version of native asset
)

// Enum value maps for AssetType.
var (
	AssetType_name = map[int32]string{
		0: "ASSET_TYPE_UNSPECIFIED",
		1: "ASSET_TYPE_NATIVE",
		2: "ASSET_TYPE_ERC20",
		3: "ASSET_TYPE_SPL",
		4: "ASSET_TYPE_ERC721",
		5: "ASSET_TYPE_ERC1155",
		6: "ASSET_TYPE_SYNTHETIC",
		7: "ASSET_TYPE_LP_TOKEN",
		8: "ASSET_TYPE_RECEIPT_TOKEN",
		9: "ASSET_TYPE_WRAPPED",
	}
	AssetType_value = map[string]int32{
		"ASSET_TYPE_UNSPECIFIED":   0,
		"ASSET_TYPE_NATIVE":        1,
		"ASSET_TYPE_ERC20":         2,
		"ASSET_TYPE_SPL":           3,
		"ASSET_TYPE_ERC721":        4,
		"ASSET_TYPE_ERC1155":       5,
		"ASSET_TYPE_SYNTHETIC":     6,
		"ASSET_TYPE_LP_TOKEN":      7,
		"ASSET_TYPE_RECEIPT_TOKEN": 8,
		"ASSET_TYPE_WRAPPED":       9,
	}
)

func (x AssetType) Enum() *AssetType {
	p := new(AssetType)
	*p = x
	return p
}

func (x AssetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssetType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_assets_v1_asset_proto_enumTypes[0].Descriptor()
}

func (AssetType) Type() protoreflect.EnumType {
	return &file_proto_assets_v1_asset_proto_enumTypes[0]
}

func (x AssetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssetType.Descriptor instead.
func (AssetType) EnumDescriptor() ([]byte, []int) {
	return file_proto_assets_v1_asset_proto_rawDescGZIP(), []int{0}
}

// DataSource represents external data providers for asset metadata.
type DataSource int32

const (
	DataSource_DATA_SOURCE_UNSPECIFIED   DataSource = 0
	DataSource_DATA_SOURCE_COINGECKO     DataSource = 1 // CoinGecko API
	DataSource_DATA_SOURCE_COINMARKETCAP DataSource = 2 // CoinMarketCap API
	DataSource_DATA_SOURCE_DEFILLAMA     DataSource = 3 // DefiLlama API
	DataSource_DATA_SOURCE_MESSARI       DataSource = 4 // Messari API
	DataSource_DATA_SOURCE_INTERNAL      DataSource = 5 // Internal/manual data
)

// Enum value maps for DataSource.
var (
	DataSource_name = map[int32]string{
		0: "DATA_SOURCE_UNSPECIFIED",
		1: "DATA_SOURCE_COINGECKO",
		2: "DATA_SOURCE_COINMARKETCAP",
		3: "DATA_SOURCE_DEFILLAMA",
		4: "DATA_SOURCE_MESSARI",
		5: "DATA_SOURCE_INTERNAL",
	}
	DataSource_value = map[string]int32{
		"DATA_SOURCE_UNSPECIFIED":   0,
		"DATA_SOURCE_COINGECKO":     1,
		"DATA_SOURCE_COINMARKETCAP": 2,
		"DATA_SOURCE_DEFILLAMA":     3,
		"DATA_SOURCE_MESSARI":       4,
		"DATA_SOURCE_INTERNAL":      5,
	}
)

func (x DataSource) Enum() *DataSource {
	p := new(DataSource)
	*p = x
	return p
}

func (x DataSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataSource) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_assets_v1_asset_proto_enumTypes[1].Descriptor()
}

func (DataSource) Type() protoreflect.EnumType {
	return &file_proto_assets_v1_asset_proto_enumTypes[1]
}

func (x DataSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataSource.Descriptor instead.
func (DataSource) EnumDescriptor() ([]byte, []int) {
	return file_proto_assets_v1_asset_proto_rawDescGZIP(), []int{1}
}

// Asset represents a canonical cross-chain asset in the system.
// Assets represent the logical/conceptual asset (e.g., "USDC") while deployments
// represent specific on-chain instances (e.g., USDC on Ethereum, USDC on Polygon).
type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique UUID identifier for the asset.
	// Represented as string in UUID format (e.g., "550e8400-e29b-41d4-a716-446655440000").
	AssetId *string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3,oneof" json:"asset_id,omitempty"`
	// Trading symbol (e.g., "BTC", "ETH", "USDC").
	Symbol *string `protobuf:"bytes,2,opt,name=symbol,proto3,oneof" json:"symbol,omitempty"`
	// Full human-readable name (e.g., "Bitcoin", "Ethereum", "USD Coin").
	Name *string `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// Classification of the asset type.
	AssetType *AssetType `protobuf:"varint,4,opt,name=asset_type,json=assetType,proto3,enum=cqc.assets.v1.AssetType,oneof" json:"asset_type,omitempty"`
	// Category or classification (e.g., "stablecoin", "governance", "blue_chip", "meme").
	Category *string `protobuf:"bytes,5,opt,name=category,proto3,oneof" json:"category,omitempty"`
	// Detailed description of the asset and its purpose.
	Description *string `protobuf:"bytes,6,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// URL to asset logo image.
	LogoUrl *string `protobuf:"bytes,7,opt,name=logo_url,json=logoUrl,proto3,oneof" json:"logo_url,omitempty"`
	// Official website URL.
	WebsiteUrl *string `protobuf:"bytes,8,opt,name=website_url,json=websiteUrl,proto3,oneof" json:"website_url,omitempty"`
	// Timestamp when this asset record was created.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	// Additional metadata as structured data.
	Metadata *_struct.Struct `protobuf:"bytes,10,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
}

func (x *Asset) Reset() {
	*x = Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_assets_v1_asset_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_proto_assets_v1_asset_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_proto_assets_v1_asset_proto_rawDescGZIP(), []int{0}
}

func (x *Asset) GetAssetId() string {
	if x != nil && x.AssetId != nil {
		return *x.AssetId
	}
	return ""
}

func (x *Asset) GetSymbol() string {
	if x != nil && x.Symbol != nil {
		return *x.Symbol
	}
	return ""
}

func (x *Asset) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Asset) GetAssetType() AssetType {
	if x != nil && x.AssetType != nil {
		return *x.AssetType
	}
	return AssetType_ASSET_TYPE_UNSPECIFIED
}

func (x *Asset) GetCategory() string {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ""
}

func (x *Asset) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Asset) GetLogoUrl() string {
	if x != nil && x.LogoUrl != nil {
		return *x.LogoUrl
	}
	return ""
}

func (x *Asset) GetWebsiteUrl() string {
	if x != nil && x.WebsiteUrl != nil {
		return *x.WebsiteUrl
	}
	return ""
}

func (x *Asset) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Asset) GetMetadata() *_struct.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// AssetIdentifier maps canonical assets to external data provider identifiers.
// This enables lookups by CoinGecko ID, CoinMarketCap ID, etc.
type AssetIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Asset UUID this identifier belongs to.
	AssetId *string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3,oneof" json:"asset_id,omitempty"`
	// Data provider/source of this identifier.
	Source *DataSource `protobuf:"varint,2,opt,name=source,proto3,enum=cqc.assets.v1.DataSource,oneof" json:"source,omitempty"`
	// External identifier from the data provider (e.g., "bitcoin" for CoinGecko, "1" for CMC).
	ExternalId *string `protobuf:"bytes,3,opt,name=external_id,json=externalId,proto3,oneof" json:"external_id,omitempty"`
	// Whether this is the primary identifier for this source.
	IsPrimary *bool `protobuf:"varint,4,opt,name=is_primary,json=isPrimary,proto3,oneof" json:"is_primary,omitempty"`
	// Additional metadata specific to this identifier mapping.
	Metadata *_struct.Struct `protobuf:"bytes,5,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
}

func (x *AssetIdentifier) Reset() {
	*x = AssetIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_assets_v1_asset_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetIdentifier) ProtoMessage() {}

func (x *AssetIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_proto_assets_v1_asset_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetIdentifier.ProtoReflect.Descriptor instead.
func (*AssetIdentifier) Descriptor() ([]byte, []int) {
	return file_proto_assets_v1_asset_proto_rawDescGZIP(), []int{1}
}

func (x *AssetIdentifier) GetAssetId() string {
	if x != nil && x.AssetId != nil {
		return *x.AssetId
	}
	return ""
}

func (x *AssetIdentifier) GetSource() DataSource {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return DataSource_DATA_SOURCE_UNSPECIFIED
}

func (x *AssetIdentifier) GetExternalId() string {
	if x != nil && x.ExternalId != nil {
		return *x.ExternalId
	}
	return ""
}

func (x *AssetIdentifier) GetIsPrimary() bool {
	if x != nil && x.IsPrimary != nil {
		return *x.IsPrimary
	}
	return false
}

func (x *AssetIdentifier) GetMetadata() *_struct.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

var File_proto_assets_v1_asset_proto protoreflect.FileDescriptor

var file_proto_assets_v1_asset_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x63,
	0x71, 0x63, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa9, 0x04, 0x0a, 0x05,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0a, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x63, 0x71, 0x63, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x03, 0x52, 0x09, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0a, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74,
	0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x08, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x48, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb1, 0x02, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x08, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x71,
	0x63, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52,
	0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x04, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2a, 0x80, 0x02, 0x0a, 0x09,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x53, 0x53,
	0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30,
	0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x50, 0x4c, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x52, 0x43, 0x37, 0x32, 0x31, 0x10, 0x04, 0x12, 0x16, 0x0a,
	0x12, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x52, 0x43, 0x31,
	0x31, 0x35, 0x35, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x54, 0x48, 0x45, 0x54, 0x49, 0x43, 0x10, 0x06, 0x12,
	0x17, 0x0a, 0x13, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x50,
	0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x53, 0x53, 0x45,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x5f, 0x54,
	0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x52, 0x41, 0x50, 0x50, 0x45, 0x44, 0x10, 0x09, 0x2a, 0xb1,
	0x01, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1b, 0x0a,
	0x17, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x47, 0x45,
	0x43, 0x4b, 0x4f, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x43,
	0x41, 0x50, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4c, 0x4c, 0x41, 0x4d, 0x41, 0x10, 0x03, 0x12,
	0x17, 0x0a, 0x13, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x52, 0x49, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0x10, 0x05, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x2d, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c,
	0x2f, 0x63, 0x71, 0x63, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x71, 0x63, 0x2f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_assets_v1_asset_proto_rawDescOnce sync.Once
	file_proto_assets_v1_asset_proto_rawDescData = file_proto_assets_v1_asset_proto_rawDesc
)

func file_proto_assets_v1_asset_proto_rawDescGZIP() []byte {
	file_proto_assets_v1_asset_proto_rawDescOnce.Do(func() {
		file_proto_assets_v1_asset_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_assets_v1_asset_proto_rawDescData)
	})
	return file_proto_assets_v1_asset_proto_rawDescData
}

var file_proto_assets_v1_asset_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_assets_v1_asset_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_assets_v1_asset_proto_goTypes = []interface{}{
	(AssetType)(0),              // 0: cqc.assets.v1.AssetType
	(DataSource)(0),             // 1: cqc.assets.v1.DataSource
	(*Asset)(nil),               // 2: cqc.assets.v1.Asset
	(*AssetIdentifier)(nil),     // 3: cqc.assets.v1.AssetIdentifier
	(*timestamp.Timestamp)(nil), // 4: google.protobuf.Timestamp
	(*_struct.Struct)(nil),      // 5: google.protobuf.Struct
}
var file_proto_assets_v1_asset_proto_depIdxs = []int32{
	0, // 0: cqc.assets.v1.Asset.asset_type:type_name -> cqc.assets.v1.AssetType
	4, // 1: cqc.assets.v1.Asset.created_at:type_name -> google.protobuf.Timestamp
	5, // 2: cqc.assets.v1.Asset.metadata:type_name -> google.protobuf.Struct
	1, // 3: cqc.assets.v1.AssetIdentifier.source:type_name -> cqc.assets.v1.DataSource
	5, // 4: cqc.assets.v1.AssetIdentifier.metadata:type_name -> google.protobuf.Struct
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_proto_assets_v1_asset_proto_init() }
func file_proto_assets_v1_asset_proto_init() {
	if File_proto_assets_v1_asset_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_assets_v1_asset_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_assets_v1_asset_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_assets_v1_asset_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_proto_assets_v1_asset_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_assets_v1_asset_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_assets_v1_asset_proto_goTypes,
		DependencyIndexes: file_proto_assets_v1_asset_proto_depIdxs,
		EnumInfos:         file_proto_assets_v1_asset_proto_enumTypes,
		MessageInfos:      file_proto_assets_v1_asset_proto_msgTypes,
	}.Build()
	File_proto_assets_v1_asset_proto = out.File
	file_proto_assets_v1_asset_proto_rawDesc = nil
	file_proto_assets_v1_asset_proto_goTypes = nil
	file_proto_assets_v1_asset_proto_depIdxs = nil
}

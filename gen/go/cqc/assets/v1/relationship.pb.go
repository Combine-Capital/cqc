// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v3.12.4
// source: proto/assets/v1/relationship.proto

package assetsv1

import (
	_struct "github.com/golang/protobuf/ptypes/struct"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RelationshipType defines the nature of relationships between assets.
type RelationshipType int32

const (
	RelationshipType_RELATIONSHIP_TYPE_UNSPECIFIED    RelationshipType = 0
	RelationshipType_RELATIONSHIP_TYPE_WRAPS          RelationshipType = 1 // Wraps an underlying asset (WETH wraps ETH)
	RelationshipType_RELATIONSHIP_TYPE_BRIDGES        RelationshipType = 2 // Bridged to another chain
	RelationshipType_RELATIONSHIP_TYPE_STAKES         RelationshipType = 3 // Liquid staking derivative (stETH stakes ETH)
	RelationshipType_RELATIONSHIP_TYPE_SYNTHETIC_OF   RelationshipType = 4 // Synthetic representation of an asset
	RelationshipType_RELATIONSHIP_TYPE_LIQUIDITY_PAIR RelationshipType = 5 // LP token containing multiple assets
	RelationshipType_RELATIONSHIP_TYPE_MIGRATES_TO    RelationshipType = 6 // Token migration path (old -> new)
	RelationshipType_RELATIONSHIP_TYPE_FORKS_FROM     RelationshipType = 7 // Blockchain fork (ETH -> ETC)
	RelationshipType_RELATIONSHIP_TYPE_REBASES_WITH   RelationshipType = 8 // Rebasing token variant
)

// Enum value maps for RelationshipType.
var (
	RelationshipType_name = map[int32]string{
		0: "RELATIONSHIP_TYPE_UNSPECIFIED",
		1: "RELATIONSHIP_TYPE_WRAPS",
		2: "RELATIONSHIP_TYPE_BRIDGES",
		3: "RELATIONSHIP_TYPE_STAKES",
		4: "RELATIONSHIP_TYPE_SYNTHETIC_OF",
		5: "RELATIONSHIP_TYPE_LIQUIDITY_PAIR",
		6: "RELATIONSHIP_TYPE_MIGRATES_TO",
		7: "RELATIONSHIP_TYPE_FORKS_FROM",
		8: "RELATIONSHIP_TYPE_REBASES_WITH",
	}
	RelationshipType_value = map[string]int32{
		"RELATIONSHIP_TYPE_UNSPECIFIED":    0,
		"RELATIONSHIP_TYPE_WRAPS":          1,
		"RELATIONSHIP_TYPE_BRIDGES":        2,
		"RELATIONSHIP_TYPE_STAKES":         3,
		"RELATIONSHIP_TYPE_SYNTHETIC_OF":   4,
		"RELATIONSHIP_TYPE_LIQUIDITY_PAIR": 5,
		"RELATIONSHIP_TYPE_MIGRATES_TO":    6,
		"RELATIONSHIP_TYPE_FORKS_FROM":     7,
		"RELATIONSHIP_TYPE_REBASES_WITH":   8,
	}
)

func (x RelationshipType) Enum() *RelationshipType {
	p := new(RelationshipType)
	*p = x
	return p
}

func (x RelationshipType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelationshipType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_assets_v1_relationship_proto_enumTypes[0].Descriptor()
}

func (RelationshipType) Type() protoreflect.EnumType {
	return &file_proto_assets_v1_relationship_proto_enumTypes[0]
}

func (x RelationshipType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RelationshipType.Descriptor instead.
func (RelationshipType) EnumDescriptor() ([]byte, []int) {
	return file_proto_assets_v1_relationship_proto_rawDescGZIP(), []int{0}
}

// AssetRelationship represents a relationship between two assets.
// Examples: WETH wraps ETH, stETH stakes ETH, bridged USDC relates to native USDC.
type AssetRelationship struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique relationship identifier (UUID).
	RelationshipId *string `protobuf:"bytes,1,opt,name=relationship_id,json=relationshipId,proto3,oneof" json:"relationship_id,omitempty"`
	// Parent asset UUID (the underlying or source asset).
	// Example: ETH is the parent when WETH wraps it.
	FromAssetId *string `protobuf:"bytes,2,opt,name=from_asset_id,json=fromAssetId,proto3,oneof" json:"from_asset_id,omitempty"`
	// Child asset UUID (the derivative or resulting asset).
	// Example: WETH is the child when it wraps ETH.
	ToAssetId *string `protobuf:"bytes,3,opt,name=to_asset_id,json=toAssetId,proto3,oneof" json:"to_asset_id,omitempty"`
	// Type of relationship between parent and child.
	RelationshipType *RelationshipType `protobuf:"varint,4,opt,name=relationship_type,json=relationshipType,proto3,enum=cqc.assets.v1.RelationshipType,oneof" json:"relationship_type,omitempty"`
	// Conversion rate between assets, if fixed.
	// Represented as string to preserve precision.
	// NULL/empty for non-1:1 conversions (e.g., stETH to ETH is variable).
	// Example: "1.000000000000000000" for 1:1 wrapping.
	ConversionRate *string `protobuf:"bytes,5,opt,name=conversion_rate,json=conversionRate,proto3,oneof" json:"conversion_rate,omitempty"`
	// Protocol facilitating this relationship (e.g., "Lido", "Aave", "Uniswap", "Wormhole").
	Protocol *string `protobuf:"bytes,6,opt,name=protocol,proto3,oneof" json:"protocol,omitempty"`
	// Human-readable explanation of this relationship.
	Description *string `protobuf:"bytes,7,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Timestamp when this relationship was established.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	// Timestamp when this relationship was last updated.
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	// Additional relationship-specific metadata.
	Metadata      *_struct.Struct `protobuf:"bytes,10,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssetRelationship) Reset() {
	*x = AssetRelationship{}
	mi := &file_proto_assets_v1_relationship_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetRelationship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetRelationship) ProtoMessage() {}

func (x *AssetRelationship) ProtoReflect() protoreflect.Message {
	mi := &file_proto_assets_v1_relationship_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetRelationship.ProtoReflect.Descriptor instead.
func (*AssetRelationship) Descriptor() ([]byte, []int) {
	return file_proto_assets_v1_relationship_proto_rawDescGZIP(), []int{0}
}

func (x *AssetRelationship) GetRelationshipId() string {
	if x != nil && x.RelationshipId != nil {
		return *x.RelationshipId
	}
	return ""
}

func (x *AssetRelationship) GetFromAssetId() string {
	if x != nil && x.FromAssetId != nil {
		return *x.FromAssetId
	}
	return ""
}

func (x *AssetRelationship) GetToAssetId() string {
	if x != nil && x.ToAssetId != nil {
		return *x.ToAssetId
	}
	return ""
}

func (x *AssetRelationship) GetRelationshipType() RelationshipType {
	if x != nil && x.RelationshipType != nil {
		return *x.RelationshipType
	}
	return RelationshipType_RELATIONSHIP_TYPE_UNSPECIFIED
}

func (x *AssetRelationship) GetConversionRate() string {
	if x != nil && x.ConversionRate != nil {
		return *x.ConversionRate
	}
	return ""
}

func (x *AssetRelationship) GetProtocol() string {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return ""
}

func (x *AssetRelationship) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *AssetRelationship) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AssetRelationship) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *AssetRelationship) GetMetadata() *_struct.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// AssetGroup represents a logical grouping of related assets.
// Examples: All USDC variants across chains, all native ETH versions.
type AssetGroup struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique group identifier (UUID).
	GroupId *string `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3,oneof" json:"group_id,omitempty"`
	// Unique group name (lowercase_with_underscores).
	Name *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// Description of what this group represents.
	Description *string `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// List of member assets with weights.
	Members []*AssetGroupMember `protobuf:"bytes,4,rep,name=members,proto3" json:"members,omitempty"`
	// Timestamp when this group was created.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	// Timestamp when this group was last updated.
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	// Additional group metadata.
	Metadata      *_struct.Struct `protobuf:"bytes,7,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssetGroup) Reset() {
	*x = AssetGroup{}
	mi := &file_proto_assets_v1_relationship_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetGroup) ProtoMessage() {}

func (x *AssetGroup) ProtoReflect() protoreflect.Message {
	mi := &file_proto_assets_v1_relationship_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetGroup.ProtoReflect.Descriptor instead.
func (*AssetGroup) Descriptor() ([]byte, []int) {
	return file_proto_assets_v1_relationship_proto_rawDescGZIP(), []int{1}
}

func (x *AssetGroup) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *AssetGroup) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AssetGroup) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *AssetGroup) GetMembers() []*AssetGroupMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *AssetGroup) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AssetGroup) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *AssetGroup) GetMetadata() *_struct.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// AssetGroupMember represents membership of an asset in a group.
type AssetGroupMember struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique membership identifier (UUID).
	MemberId *string `protobuf:"bytes,1,opt,name=member_id,json=memberId,proto3,oneof" json:"member_id,omitempty"`
	// Group identifier this membership belongs to.
	GroupId *string `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3,oneof" json:"group_id,omitempty"`
	// Asset UUID that is a member of this group.
	AssetId *string `protobuf:"bytes,3,opt,name=asset_id,json=assetId,proto3,oneof" json:"asset_id,omitempty"`
	// Weight for aggregation (default 1.0).
	Weight *float64 `protobuf:"fixed64,4,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	// Timestamp when this asset was added to the group.
	AddedAt       *timestamp.Timestamp `protobuf:"bytes,5,opt,name=added_at,json=addedAt,proto3,oneof" json:"added_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssetGroupMember) Reset() {
	*x = AssetGroupMember{}
	mi := &file_proto_assets_v1_relationship_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetGroupMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetGroupMember) ProtoMessage() {}

func (x *AssetGroupMember) ProtoReflect() protoreflect.Message {
	mi := &file_proto_assets_v1_relationship_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetGroupMember.ProtoReflect.Descriptor instead.
func (*AssetGroupMember) Descriptor() ([]byte, []int) {
	return file_proto_assets_v1_relationship_proto_rawDescGZIP(), []int{2}
}

func (x *AssetGroupMember) GetMemberId() string {
	if x != nil && x.MemberId != nil {
		return *x.MemberId
	}
	return ""
}

func (x *AssetGroupMember) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *AssetGroupMember) GetAssetId() string {
	if x != nil && x.AssetId != nil {
		return *x.AssetId
	}
	return ""
}

func (x *AssetGroupMember) GetWeight() float64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *AssetGroupMember) GetAddedAt() *timestamp.Timestamp {
	if x != nil {
		return x.AddedAt
	}
	return nil
}

var File_proto_assets_v1_relationship_proto protoreflect.FileDescriptor

const file_proto_assets_v1_relationship_proto_rawDesc = "" +
	"\n" +
	"\"proto/assets/v1/relationship.proto\x12\rcqc.assets.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1cgoogle/protobuf/struct.proto\"\xba\x05\n" +
	"\x11AssetRelationship\x12,\n" +
	"\x0frelationship_id\x18\x01 \x01(\tH\x00R\x0erelationshipId\x88\x01\x01\x12'\n" +
	"\rfrom_asset_id\x18\x02 \x01(\tH\x01R\vfromAssetId\x88\x01\x01\x12#\n" +
	"\vto_asset_id\x18\x03 \x01(\tH\x02R\ttoAssetId\x88\x01\x01\x12Q\n" +
	"\x11relationship_type\x18\x04 \x01(\x0e2\x1f.cqc.assets.v1.RelationshipTypeH\x03R\x10relationshipType\x88\x01\x01\x12,\n" +
	"\x0fconversion_rate\x18\x05 \x01(\tH\x04R\x0econversionRate\x88\x01\x01\x12\x1f\n" +
	"\bprotocol\x18\x06 \x01(\tH\x05R\bprotocol\x88\x01\x01\x12%\n" +
	"\vdescription\x18\a \x01(\tH\x06R\vdescription\x88\x01\x01\x12>\n" +
	"\n" +
	"created_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampH\aR\tcreatedAt\x88\x01\x01\x12>\n" +
	"\n" +
	"updated_at\x18\t \x01(\v2\x1a.google.protobuf.TimestampH\bR\tupdatedAt\x88\x01\x01\x128\n" +
	"\bmetadata\x18\n" +
	" \x01(\v2\x17.google.protobuf.StructH\tR\bmetadata\x88\x01\x01B\x12\n" +
	"\x10_relationship_idB\x10\n" +
	"\x0e_from_asset_idB\x0e\n" +
	"\f_to_asset_idB\x14\n" +
	"\x12_relationship_typeB\x12\n" +
	"\x10_conversion_rateB\v\n" +
	"\t_protocolB\x0e\n" +
	"\f_descriptionB\r\n" +
	"\v_created_atB\r\n" +
	"\v_updated_atB\v\n" +
	"\t_metadata\"\xb2\x03\n" +
	"\n" +
	"AssetGroup\x12\x1e\n" +
	"\bgroup_id\x18\x01 \x01(\tH\x00R\agroupId\x88\x01\x01\x12\x17\n" +
	"\x04name\x18\x02 \x01(\tH\x01R\x04name\x88\x01\x01\x12%\n" +
	"\vdescription\x18\x03 \x01(\tH\x02R\vdescription\x88\x01\x01\x129\n" +
	"\amembers\x18\x04 \x03(\v2\x1f.cqc.assets.v1.AssetGroupMemberR\amembers\x12>\n" +
	"\n" +
	"created_at\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampH\x03R\tcreatedAt\x88\x01\x01\x12>\n" +
	"\n" +
	"updated_at\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampH\x04R\tupdatedAt\x88\x01\x01\x128\n" +
	"\bmetadata\x18\a \x01(\v2\x17.google.protobuf.StructH\x05R\bmetadata\x88\x01\x01B\v\n" +
	"\t_group_idB\a\n" +
	"\x05_nameB\x0e\n" +
	"\f_descriptionB\r\n" +
	"\v_created_atB\r\n" +
	"\v_updated_atB\v\n" +
	"\t_metadata\"\x8d\x02\n" +
	"\x10AssetGroupMember\x12 \n" +
	"\tmember_id\x18\x01 \x01(\tH\x00R\bmemberId\x88\x01\x01\x12\x1e\n" +
	"\bgroup_id\x18\x02 \x01(\tH\x01R\agroupId\x88\x01\x01\x12\x1e\n" +
	"\basset_id\x18\x03 \x01(\tH\x02R\aassetId\x88\x01\x01\x12\x1b\n" +
	"\x06weight\x18\x04 \x01(\x01H\x03R\x06weight\x88\x01\x01\x12:\n" +
	"\badded_at\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampH\x04R\aaddedAt\x88\x01\x01B\f\n" +
	"\n" +
	"_member_idB\v\n" +
	"\t_group_idB\v\n" +
	"\t_asset_idB\t\n" +
	"\a_weightB\v\n" +
	"\t_added_at*\xc2\x02\n" +
	"\x10RelationshipType\x12!\n" +
	"\x1dRELATIONSHIP_TYPE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17RELATIONSHIP_TYPE_WRAPS\x10\x01\x12\x1d\n" +
	"\x19RELATIONSHIP_TYPE_BRIDGES\x10\x02\x12\x1c\n" +
	"\x18RELATIONSHIP_TYPE_STAKES\x10\x03\x12\"\n" +
	"\x1eRELATIONSHIP_TYPE_SYNTHETIC_OF\x10\x04\x12$\n" +
	" RELATIONSHIP_TYPE_LIQUIDITY_PAIR\x10\x05\x12!\n" +
	"\x1dRELATIONSHIP_TYPE_MIGRATES_TO\x10\x06\x12 \n" +
	"\x1cRELATIONSHIP_TYPE_FORKS_FROM\x10\a\x12\"\n" +
	"\x1eRELATIONSHIP_TYPE_REBASES_WITH\x10\bB>Z<github.com/Combine-Capital/cqc/gen/go/cqc/assets/v1;assetsv1b\x06proto3"

var (
	file_proto_assets_v1_relationship_proto_rawDescOnce sync.Once
	file_proto_assets_v1_relationship_proto_rawDescData []byte
)

func file_proto_assets_v1_relationship_proto_rawDescGZIP() []byte {
	file_proto_assets_v1_relationship_proto_rawDescOnce.Do(func() {
		file_proto_assets_v1_relationship_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_assets_v1_relationship_proto_rawDesc), len(file_proto_assets_v1_relationship_proto_rawDesc)))
	})
	return file_proto_assets_v1_relationship_proto_rawDescData
}

var file_proto_assets_v1_relationship_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_assets_v1_relationship_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_proto_assets_v1_relationship_proto_goTypes = []any{
	(RelationshipType)(0),       // 0: cqc.assets.v1.RelationshipType
	(*AssetRelationship)(nil),   // 1: cqc.assets.v1.AssetRelationship
	(*AssetGroup)(nil),          // 2: cqc.assets.v1.AssetGroup
	(*AssetGroupMember)(nil),    // 3: cqc.assets.v1.AssetGroupMember
	(*timestamp.Timestamp)(nil), // 4: google.protobuf.Timestamp
	(*_struct.Struct)(nil),      // 5: google.protobuf.Struct
}
var file_proto_assets_v1_relationship_proto_depIdxs = []int32{
	0, // 0: cqc.assets.v1.AssetRelationship.relationship_type:type_name -> cqc.assets.v1.RelationshipType
	4, // 1: cqc.assets.v1.AssetRelationship.created_at:type_name -> google.protobuf.Timestamp
	4, // 2: cqc.assets.v1.AssetRelationship.updated_at:type_name -> google.protobuf.Timestamp
	5, // 3: cqc.assets.v1.AssetRelationship.metadata:type_name -> google.protobuf.Struct
	3, // 4: cqc.assets.v1.AssetGroup.members:type_name -> cqc.assets.v1.AssetGroupMember
	4, // 5: cqc.assets.v1.AssetGroup.created_at:type_name -> google.protobuf.Timestamp
	4, // 6: cqc.assets.v1.AssetGroup.updated_at:type_name -> google.protobuf.Timestamp
	5, // 7: cqc.assets.v1.AssetGroup.metadata:type_name -> google.protobuf.Struct
	4, // 8: cqc.assets.v1.AssetGroupMember.added_at:type_name -> google.protobuf.Timestamp
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_proto_assets_v1_relationship_proto_init() }
func file_proto_assets_v1_relationship_proto_init() {
	if File_proto_assets_v1_relationship_proto != nil {
		return
	}
	file_proto_assets_v1_relationship_proto_msgTypes[0].OneofWrappers = []any{}
	file_proto_assets_v1_relationship_proto_msgTypes[1].OneofWrappers = []any{}
	file_proto_assets_v1_relationship_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_assets_v1_relationship_proto_rawDesc), len(file_proto_assets_v1_relationship_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_assets_v1_relationship_proto_goTypes,
		DependencyIndexes: file_proto_assets_v1_relationship_proto_depIdxs,
		EnumInfos:         file_proto_assets_v1_relationship_proto_enumTypes,
		MessageInfos:      file_proto_assets_v1_relationship_proto_msgTypes,
	}.Build()
	File_proto_assets_v1_relationship_proto = out.File
	file_proto_assets_v1_relationship_proto_goTypes = nil
	file_proto_assets_v1_relationship_proto_depIdxs = nil
}
